/*
* generated by Xtext
*/
package cruise.umple.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import cruise.umple.services.UmpleGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class UmpleParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private UmpleGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Model_ModelAssignment(this, this, 0, inst);
			case 1: return new Program__Anonymous_program_1_1Assignment(this, this, 1, inst);
			case 2: return new Anonymous_program_1__Alternatives(this, this, 2, inst);
			case 3: return new Directive__Alternatives(this, this, 3, inst);
			case 4: return new Glossary__Group(this, this, 4, inst);
			case 5: return new Word__Group(this, this, 5, inst);
			case 6: return new Strictness__Group(this, this, 6, inst);
			case 7: return new Anonymous_strictness_1__Alternatives(this, this, 7, inst);
			case 8: return new Generate__Group(this, this, 8, inst);
			case 9: return new Generate_path__Group(this, this, 9, inst);
			case 10: return new UseStatement__Group(this, this, 10, inst);
			case 11: return new Namespace__Group(this, this, 11, inst);
			case 12: return new Entity__Alternatives(this, this, 12, inst);
			case 13: return new Comment__Alternatives(this, this, 13, inst);
			case 14: return new InlineComment__Group(this, this, 14, inst);
			case 15: return new MultilineComment__Group(this, this, 15, inst);
			case 16: return new Debug__Group(this, this, 16, inst);
			case 17: return new Abstract__Group(this, this, 17, inst);
			case 18: return new ClassDefinition__Group(this, this, 18, inst);
			case 19: return new ExternalDefinition__Group(this, this, 19, inst);
			case 20: return new InterfaceDefinition__Group(this, this, 20, inst);
			case 21: return new AssociationDefinition__Group(this, this, 21, inst);
			case 22: return new AssociationClassDefinition__Group(this, this, 22, inst);
			case 23: return new ClassContent__Alternatives(this, this, 23, inst);
			case 24: return new AssociationClassContent__Alternatives(this, this, 24, inst);
			case 25: return new InterfaceBody__InterfaceMemberDeclaration_1Assignment(this, this, 25, inst);
			case 26: return new InterfaceMemberDeclaration__Alternatives(this, this, 26, inst);
			case 27: return new ConstantDeclaration__Group(this, this, 27, inst);
			case 28: return new Anonymous_constantDeclaration_1__Alternatives(this, this, 28, inst);
			case 29: return new Anonymous_constantDeclaration_2__Group(this, this, 29, inst);
			case 30: return new MoreCode__Group(this, this, 30, inst);
			case 31: return new Anonymous_moreCode_1__Group(this, this, 31, inst);
			case 32: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 32, inst);
			case 33: return new Anonymous_codeLangs_1__Group(this, this, 33, inst);
			case 34: return new CodeLang__CodeLang_1Assignment(this, this, 34, inst);
			case 35: return new MethodBody__Group(this, this, 35, inst);
			case 36: return new Anonymous_methodBody_1__Precondition_1Assignment(this, this, 36, inst);
			case 37: return new Anonymous_methodBody_2__Postcondition_1Assignment(this, this, 37, inst);
			case 38: return new ConcreteMethodDeclaration__Group(this, this, 38, inst);
			case 39: return new Anonymous_concreteMethodDeclaration_1__Group(this, this, 39, inst);
			case 40: return new Anonymous_concreteMethodDeclaration_2__MoreCode_1Assignment(this, this, 40, inst);
			case 41: return new AbstractMethodDeclaration__Group(this, this, 41, inst);
			case 42: return new MethodDeclarator__Alternatives(this, this, 42, inst);
			case 43: return new ParameterList__Group(this, this, 43, inst);
			case 44: return new Anonymous_parameterList_1__Group(this, this, 44, inst);
			case 45: return new Parameter__Anonymous_parameter_1_1Assignment(this, this, 45, inst);
			case 46: return new Anonymous_parameter_1__Alternatives(this, this, 46, inst);
			case 47: return new Association__Group(this, this, 47, inst);
			case 48: return new SymmetricReflexiveAssociation__Group(this, this, 48, inst);
			case 49: return new InlineAssociation__Group(this, this, 49, inst);
			case 50: return new InlineAssociationEnd__Alternatives(this, this, 50, inst);
			case 51: return new SingleAssociationEnd__Group(this, this, 51, inst);
			case 52: return new AssociationEnd__Alternatives(this, this, 52, inst);
			case 53: return new Multiplicity__Alternatives(this, this, 53, inst);
			case 54: return new IsSorted__Group(this, this, 54, inst);
			case 55: return new Attribute__Alternatives(this, this, 55, inst);
			case 56: return new SimpleAttribute__Group(this, this, 56, inst);
			case 57: return new AutouniqueAttribute__Group(this, this, 57, inst);
			case 58: return new DerivedAttribute__Group(this, this, 58, inst);
			case 59: return new Anonymous_derivedAttribute_1__Alternatives(this, this, 59, inst);
			case 60: return new Anonymous_derivedAttribute_2__Group(this, this, 60, inst);
			case 61: return new Anonymous_derivedAttribute_3__MoreCode_1Assignment(this, this, 61, inst);
			case 62: return new ComplexAttribute__Group(this, this, 62, inst);
			case 63: return new Anonymous_complexAttribute_1__Alternatives(this, this, 63, inst);
			case 64: return new Anonymous_complexAttribute_2__Group(this, this, 64, inst);
			case 65: return new Key__Group(this, this, 65, inst);
			case 66: return new Anonymous_key_1__Group(this, this, 66, inst);
			case 67: return new Depend__Group(this, this, 67, inst);
			case 68: return new ExtraCode__ExtraCode_1Assignment(this, this, 68, inst);
			case 69: return new SoftwarePattern__Alternatives(this, this, 69, inst);
			case 70: return new IsA__Alternatives(this, this, 70, inst);
			case 71: return new SingleIsA__Group(this, this, 71, inst);
			case 72: return new Anonymous_singleIsA_1__Group(this, this, 72, inst);
			case 73: return new MultipleIsA__Group(this, this, 73, inst);
			case 74: return new Anonymous_multipleIsA_1__Group(this, this, 74, inst);
			case 75: return new Singleton__Group(this, this, 75, inst);
			case 76: return new Immutable__Group(this, this, 76, inst);
			case 77: return new KeyDefinition__Alternatives(this, this, 77, inst);
			case 78: return new CodeInjection__Alternatives(this, this, 78, inst);
			case 79: return new BeforeCode__Group(this, this, 79, inst);
			case 80: return new Anonymous_beforeCode_1__Group(this, this, 80, inst);
			case 81: return new Anonymous_beforeCode_2__MoreCode_1Assignment(this, this, 81, inst);
			case 82: return new AfterCode__Group(this, this, 82, inst);
			case 83: return new Anonymous_afterCode_1__Group(this, this, 83, inst);
			case 84: return new Anonymous_afterCode_2__MoreCode_1Assignment(this, this, 84, inst);
			case 85: return new StateMachineDefinition__Group(this, this, 85, inst);
			case 86: return new StateMachine__Alternatives(this, this, 86, inst);
			case 87: return new ActiveDefinition__Group(this, this, 87, inst);
			case 88: return new InlineStateMachine__Group(this, this, 88, inst);
			case 89: return new Anonymous_inlineStateMachine_1__Alternatives(this, this, 89, inst);
			case 90: return new ReferencedStateMachine__Alternatives(this, this, 90, inst);
			case 91: return new ExtendedStateMachine__Anonymous_extendedStateMachine_1_1Assignment(this, this, 91, inst);
			case 92: return new Anonymous_extendedStateMachine_1__Alternatives(this, this, 92, inst);
			case 93: return new Enum__Alternatives(this, this, 93, inst);
			case 94: return new Anonymous_enum_1__Group(this, this, 94, inst);
			case 95: return new State__Alternatives(this, this, 95, inst);
			case 96: return new Anonymous_state_1__StateInternal_1Assignment(this, this, 96, inst);
			case 97: return new StateInternal__Alternatives(this, this, 97, inst);
			case 98: return new StateEntity__Alternatives(this, this, 98, inst);
			case 99: return new AutoTransition__Alternatives(this, this, 99, inst);
			case 100: return new AutoTransitionBlock__Alternatives(this, this, 100, inst);
			case 101: return new Transition__Alternatives(this, this, 101, inst);
			case 102: return new EventDefinition__Alternatives(this, this, 102, inst);
			case 103: return new Anonymous_eventDefinition_1__ParameterList_1Assignment(this, this, 103, inst);
			case 104: return new AfterEveryEvent__Group(this, this, 104, inst);
			case 105: return new AfterEvent__Group(this, this, 105, inst);
			case 106: return new Action__Group(this, this, 106, inst);
			case 107: return new Anonymous_action_1__Group(this, this, 107, inst);
			case 108: return new Anonymous_action_2__MoreCode_1Assignment(this, this, 108, inst);
			case 109: return new EntryOrExitAction__Group(this, this, 109, inst);
			case 110: return new Anonymous_entryOrExitAction_1__Group(this, this, 110, inst);
			case 111: return new Anonymous_entryOrExitAction_2__MoreCode_1Assignment(this, this, 111, inst);
			case 112: return new Activity__Group(this, this, 112, inst);
			case 113: return new Anonymous_activity_1__Group(this, this, 113, inst);
			case 114: return new Anonymous_activity_2__MoreCode_1Assignment(this, this, 114, inst);
			case 115: return new MoreGuards__Group(this, this, 115, inst);
			case 116: return new Anonymous_moreGuards_1__Group(this, this, 116, inst);
			case 117: return new Guard__Group(this, this, 117, inst);
			case 118: return new Anonymous_guard_1__Group(this, this, 118, inst);
			case 119: return new Anonymous_guard_2__MoreGuards_1Assignment(this, this, 119, inst);
			case 120: return new TraceType__Group(this, this, 120, inst);
			case 121: return new Anonymous_traceType_1__Verbisty_1Assignment(this, this, 121, inst);
			case 122: return new Anonymous_traceType_2__TracerArgument_1Assignment(this, this, 122, inst);
			case 123: return new Trace__Alternatives(this, this, 123, inst);
			case 124: return new TraceDirective__Group(this, this, 124, inst);
			case 125: return new Anonymous_traceDirective_1__Alternatives(this, this, 125, inst);
			case 126: return new TraceItem__Alternatives(this, this, 126, inst);
			case 127: return new TraceEntity__Group(this, this, 127, inst);
			case 128: return new Anonymous_traceEntity_1__Group(this, this, 128, inst);
			case 129: return new TraceOptions__Group(this, this, 129, inst);
			case 130: return new Anonymous_traceOptions_1__Group(this, this, 130, inst);
			case 131: return new TraceOption__Option_1Assignment(this, this, 131, inst);
			case 132: return new PreOrPostCondition__Group(this, this, 132, inst);
			case 133: return new ExecuteClause__Group(this, this, 133, inst);
			case 134: return new TraceWhen__Group(this, this, 134, inst);
			case 135: return new TraceFor__Group(this, this, 135, inst);
			case 136: return new TraceLevel__Group(this, this, 136, inst);
			case 137: return new TracePeriod__Group(this, this, 137, inst);
			case 138: return new TraceDuring__Group(this, this, 138, inst);
			case 139: return new TraceRecord__Group(this, this, 139, inst);
			case 140: return new RecordEntity__Group(this, this, 140, inst);
			case 141: return new Anonymous_recordEntity_2__Group(this, this, 141, inst);
			case 142: return new TraceCondition__Group(this, this, 142, inst);
			case 143: return new ConditionRHS__Group(this, this, 143, inst);
			case 144: return new TraceCase__Alternatives(this, this, 144, inst);
			case 145: return new TraceCaseDef__Group(this, this, 145, inst);
			case 146: return new TraceCaseActivation__Group(this, this, 146, inst);
			case 147: return new TraceCaseDeactivation__Group(this, this, 147, inst);
			case 148: return new DeActivateFor__Group(this, this, 148, inst);
			case 149: return new Precondition__Group(this, this, 149, inst);
			case 150: return new Postcondition__Group(this, this, 150, inst);
			case 151: return new Invariant__Group(this, this, 151, inst);
			case 152: return new Anonymous_invariant_1__Group(this, this, 152, inst);
			case 153: return new Anonymous_invariant_2__Constraint_1Assignment(this, this, 153, inst);
			case 154: return new ConstraintToken__Constraint_1Assignment(this, this, 154, inst);
			case 155: return new Constraint__Alternatives(this, this, 155, inst);
			case 156: return new Anonymous_constraint_1__ConstraintBody_1Assignment(this, this, 156, inst);
			case 157: return new NegativeConstraint__Alternatives(this, this, 157, inst);
			case 158: return new ConstraintBody__Group(this, this, 158, inst);
			case 159: return new Anonymous_constraintBody_1__LinkingOp_1Assignment(this, this, 159, inst);
			case 160: return new LinkingOp__Alternatives(this, this, 160, inst);
			case 161: return new Anonymous_linkingOp_1__Group(this, this, 161, inst);
			case 162: return new Anonymous_linkingOp_2__Group(this, this, 162, inst);
			case 163: return new Anonymous_linkingOp_3__Group(this, this, 163, inst);
			case 164: return new ConstraintExpr__Alternatives(this, this, 164, inst);
			case 165: return new Anonymous_constraintExpr_1__Group(this, this, 165, inst);
			case 166: return new CompoundExpr__Alternatives(this, this, 166, inst);
			case 167: return new BoolExpr__Alternatives(this, this, 167, inst);
			case 168: return new StringExpr__Alternatives(this, this, 168, inst);
			case 169: return new StringLit__Alternatives(this, this, 169, inst);
			case 170: return new GenExpr__Group(this, this, 170, inst);
			case 171: return new Anonymous_genExpr_1__Group(this, this, 171, inst);
			case 172: return new Anonymous_genExpr_2__Group(this, this, 172, inst);
			case 173: return new NumExpr__Group(this, this, 173, inst);
			case 174: return new Anonymous_numExpr_1__Group(this, this, 174, inst);
			case 175: return new Anonymous_numExpr_2__Group(this, this, 175, inst);
			case 176: return new Anonymous_numExpr_3__Group(this, this, 176, inst);
			case 177: return new Anonymous_numExpr_4__Group(this, this, 177, inst);
			case 178: return new EqualityOp__Alternatives(this, this, 178, inst);
			case 179: return new EqualsOp__EqualsOp_1Assignment(this, this, 179, inst);
			case 180: return new NotequalsOp__NotequalsOp_1Assignment(this, this, 180, inst);
			case 181: return new OrdinalOp__Alternatives(this, this, 181, inst);
			case 182: return new GreaterOp__GreaterOp_1Assignment(this, this, 182, inst);
			case 183: return new LessOp__LessOp_1Assignment(this, this, 183, inst);
			case 184: return new MoreOp__MoreOp_1Assignment(this, this, 184, inst);
			case 185: return new SmallerOp__SmallerOp_1Assignment(this, this, 185, inst);
			case 186: return new Position__Alternatives(this, this, 186, inst);
			case 187: return new ElementPosition__Group(this, this, 187, inst);
			case 188: return new AssociationPosition__Group(this, this, 188, inst);
			case 189: return new Coordinate__Group(this, this, 189, inst);
			case 190: return new DisplayColor__Group(this, this, 190, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Model ****************
 *
 * Model:
 * 	model=Program_;
 *
 **/

// model=Program_
protected class Model_ModelAssignment extends AssignmentToken  {
	
	public Model_ModelAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getModelAccess().getModelAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Program__Anonymous_program_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getModelRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("model",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("model");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getProgram_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getModelAccess().getModelProgram_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Model ****************/


/************ begin Rule Program_ ****************
 *
 * Program_:
 * 	Anonymous_program_1_1+=Anonymous_program_1_*;
 *
 **/

// Anonymous_program_1_1+=Anonymous_program_1_*
protected class Program__Anonymous_program_1_1Assignment extends AssignmentToken  {
	
	public Program__Anonymous_program_1_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProgram_Access().getAnonymous_program_1_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_program_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_program_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_program_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_program_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getProgram_Access().getAnonymous_program_1_1Anonymous_program_1_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Program__Anonymous_program_1_1Assignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule Program_ ****************/


/************ begin Rule Anonymous_program_1_ ****************
 *
 * Anonymous_program_1_:
 * 	Comment_1+=Comment_ | Directive_1+=Directive_ | ";";
 *
 **/

// Comment_1+=Comment_ | Directive_1+=Directive_ | ";"
protected class Anonymous_program_1__Alternatives extends AlternativesToken {

	public Anonymous_program_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_program_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_program_1__Comment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_program_1__Directive_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_program_1__SemicolonKeyword_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_program_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Comment_1+=Comment_
protected class Anonymous_program_1__Comment_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_program_1__Comment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_program_1_Access().getComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Comment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Comment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_program_1_Access().getComment_1Comment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Directive_1+=Directive_
protected class Anonymous_program_1__Directive_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_program_1__Directive_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_program_1_Access().getDirective_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Directive__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Directive_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Directive_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDirective_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_program_1_Access().getDirective_1Directive_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ";"
protected class Anonymous_program_1__SemicolonKeyword_2 extends KeywordToken  {
	
	public Anonymous_program_1__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_program_1_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


/************ end Rule Anonymous_program_1_ ****************/


/************ begin Rule Directive_ ****************
 *
 * Directive_:
 * 	Glossary_1+=Glossary_ | Generate_1+=Generate_ | Generate_path_1+=Generate_path_ | UseStatement_1+=UseStatement_ |
 * 	Namespace_1+=Namespace_ | TraceType_1+=TraceType_ | Entity_1+=Entity_ | Debug_1+=Debug_ | Strictness_1+=Strictness_;
 *
 **/

// Glossary_1+=Glossary_ | Generate_1+=Generate_ | Generate_path_1+=Generate_path_ | UseStatement_1+=UseStatement_ |
// Namespace_1+=Namespace_ | TraceType_1+=TraceType_ | Entity_1+=Entity_ | Debug_1+=Debug_ | Strictness_1+=Strictness_
protected class Directive__Alternatives extends AlternativesToken {

	public Directive__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDirective_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Directive__Glossary_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Directive__Generate_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Directive__Generate_path_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Directive__UseStatement_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Directive__Namespace_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Directive__TraceType_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Directive__Entity_1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Directive__Debug_1Assignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Directive__Strictness_1Assignment_8(lastRuleCallOrigin, this, 8, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDirective_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Glossary_1+=Glossary_
protected class Directive__Glossary_1Assignment_0 extends AssignmentToken  {
	
	public Directive__Glossary_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getGlossary_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Glossary__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Glossary_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Glossary_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGlossary_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getGlossary_1Glossary_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Generate_1+=Generate_
protected class Directive__Generate_1Assignment_1 extends AssignmentToken  {
	
	public Directive__Generate_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getGenerate_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Generate_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Generate_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenerate_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getGenerate_1Generate_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Generate_path_1+=Generate_path_
protected class Directive__Generate_path_1Assignment_2 extends AssignmentToken  {
	
	public Directive__Generate_path_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getGenerate_path_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Generate_path_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Generate_path_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenerate_path_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getGenerate_path_1Generate_path_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// UseStatement_1+=UseStatement_
protected class Directive__UseStatement_1Assignment_3 extends AssignmentToken  {
	
	public Directive__UseStatement_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getUseStatement_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UseStatement__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("UseStatement_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("UseStatement_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUseStatement_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getUseStatement_1UseStatement_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Namespace_1+=Namespace_
protected class Directive__Namespace_1Assignment_4 extends AssignmentToken  {
	
	public Directive__Namespace_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getNamespace_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Namespace__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Namespace_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Namespace_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNamespace_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getNamespace_1Namespace_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceType_1+=TraceType_
protected class Directive__TraceType_1Assignment_5 extends AssignmentToken  {
	
	public Directive__TraceType_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getTraceType_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceType__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceType_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceType_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceType_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getTraceType_1TraceType_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Entity_1+=Entity_
protected class Directive__Entity_1Assignment_6 extends AssignmentToken  {
	
	public Directive__Entity_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getEntity_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Entity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Entity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Entity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getEntity_1Entity_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Debug_1+=Debug_
protected class Directive__Debug_1Assignment_7 extends AssignmentToken  {
	
	public Directive__Debug_1Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getDebug_1Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Debug__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Debug_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Debug_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDebug_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getDebug_1Debug_ParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Strictness_1+=Strictness_
protected class Directive__Strictness_1Assignment_8 extends AssignmentToken  {
	
	public Directive__Strictness_1Assignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDirective_Access().getStrictness_1Assignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Strictness__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Strictness_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Strictness_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStrictness_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDirective_Access().getStrictness_1Strictness_ParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Directive_ ****************/


/************ begin Rule Glossary_ ****************
 *
 * Glossary_:
 * 	"glossary" "{" Word_1+=Word_* "}";
 *
 **/

// "glossary" "{" Word_1+=Word_* "}"
protected class Glossary__Group extends GroupToken {
	
	public Glossary__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGlossary_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Glossary__RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGlossary_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "glossary"
protected class Glossary__GlossaryKeyword_0 extends KeywordToken  {
	
	public Glossary__GlossaryKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGlossary_Access().getGlossaryKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class Glossary__LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Glossary__LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGlossary_Access().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Glossary__GlossaryKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Word_1+=Word_*
protected class Glossary__Word_1Assignment_2 extends AssignmentToken  {
	
	public Glossary__Word_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGlossary_Access().getWord_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Word__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Word_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Word_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getWord_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGlossary_Access().getWord_1Word_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Glossary__Word_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Glossary__LeftCurlyBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Glossary__RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public Glossary__RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGlossary_Access().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Glossary__Word_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Glossary__LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Glossary_ ****************/


/************ begin Rule Word_ ****************
 *
 * Word_:
 * 	singular_1=ID ":" plural_1=ID ";";
 *
 **/

// singular_1=ID ":" plural_1=ID ";"
protected class Word__Group extends GroupToken {
	
	public Word__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWord_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Word__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWord_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// singular_1=ID
protected class Word__Singular_1Assignment_0 extends AssignmentToken  {
	
	public Word__Singular_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWord_Access().getSingular_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("singular_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("singular_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWord_Access().getSingular_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWord_Access().getSingular_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Word__ColonKeyword_1 extends KeywordToken  {
	
	public Word__ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWord_Access().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Word__Singular_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// plural_1=ID
protected class Word__Plural_1Assignment_2 extends AssignmentToken  {
	
	public Word__Plural_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWord_Access().getPlural_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Word__ColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("plural_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("plural_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getWord_Access().getPlural_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getWord_Access().getPlural_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Word__SemicolonKeyword_3 extends KeywordToken  {
	
	public Word__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWord_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Word__Plural_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Word_ ****************/


/************ begin Rule Strictness_ ****************
 *
 * Strictness_:
 * 	"strictness" Anonymous_strictness_1_1+=Anonymous_strictness_1_ ";";
 *
 **/

// "strictness" Anonymous_strictness_1_1+=Anonymous_strictness_1_ ";"
protected class Strictness__Group extends GroupToken {
	
	public Strictness__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStrictness_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Strictness__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStrictness_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "strictness"
protected class Strictness__StrictnessKeyword_0 extends KeywordToken  {
	
	public Strictness__StrictnessKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStrictness_Access().getStrictnessKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Anonymous_strictness_1_1+=Anonymous_strictness_1_
protected class Strictness__Anonymous_strictness_1_1Assignment_1 extends AssignmentToken  {
	
	public Strictness__Anonymous_strictness_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStrictness_Access().getAnonymous_strictness_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_strictness_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_strictness_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_strictness_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_strictness_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStrictness_Access().getAnonymous_strictness_1_1Anonymous_strictness_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Strictness__StrictnessKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Strictness__SemicolonKeyword_2 extends KeywordToken  {
	
	public Strictness__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStrictness_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Strictness__Anonymous_strictness_1_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Strictness_ ****************/


/************ begin Rule Anonymous_strictness_1_ ****************
 *
 * Anonymous_strictness_1_:
 * 	strictnessLevel_1=("modelOnly" | "noExtraCode" | "none") | message_1=("allow" | "expect" | "disallow")
 * 	messageNumber_1=ID;
 *
 **/

// strictnessLevel_1=("modelOnly" | "noExtraCode" | "none") | message_1=("allow" | "expect" | "disallow")
// messageNumber_1=ID
protected class Anonymous_strictness_1__Alternatives extends AlternativesToken {

	public Anonymous_strictness_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_strictness_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_strictness_1__StrictnessLevel_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_strictness_1__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_strictness_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// strictnessLevel_1=("modelOnly" | "noExtraCode" | "none")
protected class Anonymous_strictness_1__StrictnessLevel_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_strictness_1__StrictnessLevel_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("strictnessLevel_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("strictnessLevel_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1ModelOnlyKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1ModelOnlyKeyword_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1NoExtraCodeKeyword_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1NoExtraCodeKeyword_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1NoneKeyword_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_strictness_1_Access().getStrictnessLevel_1NoneKeyword_0_0_2();
			return obj;
		}
		return null;
	}

}

// message_1=("allow" | "expect" | "disallow") messageNumber_1=ID
protected class Anonymous_strictness_1__Group_1 extends GroupToken {
	
	public Anonymous_strictness_1__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_strictness_1_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_strictness_1__MessageNumber_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// message_1=("allow" | "expect" | "disallow")
protected class Anonymous_strictness_1__Message_1Assignment_1_0 extends AssignmentToken  {
	
	public Anonymous_strictness_1__Message_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_strictness_1_Access().getMessage_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("message_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("message_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getMessage_1AllowKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_strictness_1_Access().getMessage_1AllowKeyword_1_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getMessage_1ExpectKeyword_1_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_strictness_1_Access().getMessage_1ExpectKeyword_1_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getMessage_1DisallowKeyword_1_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_strictness_1_Access().getMessage_1DisallowKeyword_1_0_0_2();
			return obj;
		}
		return null;
	}

}

// messageNumber_1=ID
protected class Anonymous_strictness_1__MessageNumber_1Assignment_1_1 extends AssignmentToken  {
	
	public Anonymous_strictness_1__MessageNumber_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_strictness_1_Access().getMessageNumber_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_strictness_1__Message_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("messageNumber_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("messageNumber_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_strictness_1_Access().getMessageNumber_1IDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_strictness_1_Access().getMessageNumber_1IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Anonymous_strictness_1_ ****************/


/************ begin Rule Generate_ ****************
 *
 * Generate_:
 * 	"generate" generate_1=("Java" | "Php" | "RTCpp" | "Ruby" | "Cpp" | "Json" | "Yuml" | "Violet" | "Umlet" | "Simulate" |
 * 	"TextUml" | "GvStateDiagram" | "GvClassDiagram" | "Papyrus" | "Ecore" | "Xmi" | "Xtext" | "Sql") ";";
 *
 **/

// "generate" generate_1=("Java" | "Php" | "RTCpp" | "Ruby" | "Cpp" | "Json" | "Yuml" | "Violet" | "Umlet" | "Simulate" |
// "TextUml" | "GvStateDiagram" | "GvClassDiagram" | "Papyrus" | "Ecore" | "Xmi" | "Xtext" | "Sql") ";"
protected class Generate__Group extends GroupToken {
	
	public Generate__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenerate_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenerate_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "generate"
protected class Generate__GenerateKeyword_0 extends KeywordToken  {
	
	public Generate__GenerateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_Access().getGenerateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// generate_1=("Java" | "Php" | "RTCpp" | "Ruby" | "Cpp" | "Json" | "Yuml" | "Violet" | "Umlet" | "Simulate" | "TextUml" |
// "GvStateDiagram" | "GvClassDiagram" | "Papyrus" | "Ecore" | "Xmi" | "Xtext" | "Sql")
protected class Generate__Generate_1Assignment_1 extends AssignmentToken  {
	
	public Generate__Generate_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenerate_Access().getGenerate_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate__GenerateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("generate_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("generate_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1JavaKeyword_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1JavaKeyword_1_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1PhpKeyword_1_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1PhpKeyword_1_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1RTCppKeyword_1_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1RTCppKeyword_1_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1RubyKeyword_1_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1RubyKeyword_1_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1CppKeyword_1_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1CppKeyword_1_0_4();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1JsonKeyword_1_0_5(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1JsonKeyword_1_0_5();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1YumlKeyword_1_0_6(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1YumlKeyword_1_0_6();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1VioletKeyword_1_0_7(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1VioletKeyword_1_0_7();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1UmletKeyword_1_0_8(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1UmletKeyword_1_0_8();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1SimulateKeyword_1_0_9(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1SimulateKeyword_1_0_9();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1TextUmlKeyword_1_0_10(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1TextUmlKeyword_1_0_10();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1GvStateDiagramKeyword_1_0_11(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1GvStateDiagramKeyword_1_0_11();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1GvClassDiagramKeyword_1_0_12(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1GvClassDiagramKeyword_1_0_12();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1PapyrusKeyword_1_0_13(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1PapyrusKeyword_1_0_13();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1EcoreKeyword_1_0_14(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1EcoreKeyword_1_0_14();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1XmiKeyword_1_0_15(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1XmiKeyword_1_0_15();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1XtextKeyword_1_0_16(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1XtextKeyword_1_0_16();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_Access().getGenerate_1SqlKeyword_1_0_17(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_Access().getGenerate_1SqlKeyword_1_0_17();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Generate__SemicolonKeyword_2 extends KeywordToken  {
	
	public Generate__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate__Generate_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Generate_ ****************/


/************ begin Rule Generate_path_ ****************
 *
 * Generate_path_:
 * 	"generate" language_1=("Java" | "Php" | "RTCpp" | "Ruby" | "Cpp" | "Json" | "Yuml" | "Violet" | "Umlet" | "Simulate" |
 * 	"TextUml" | "GvStateDiagram" | "GvClassDiagram" | "Papyrus" | "Ecore" | "Xmi" | "Xtext" | "Sql") "\"" output_1=block
 * 	"\"" override_1=("--override" | "--override-all")? ";";
 *
 **/

// "generate" language_1=("Java" | "Php" | "RTCpp" | "Ruby" | "Cpp" | "Json" | "Yuml" | "Violet" | "Umlet" | "Simulate" |
// "TextUml" | "GvStateDiagram" | "GvClassDiagram" | "Papyrus" | "Ecore" | "Xmi" | "Xtext" | "Sql") "\"" output_1=block
// "\"" override_1=("--override" | "--override-all")? ";"
protected class Generate_path__Group extends GroupToken {
	
	public Generate_path__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__SemicolonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenerate_path_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "generate"
protected class Generate_path__GenerateKeyword_0 extends KeywordToken  {
	
	public Generate_path__GenerateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getGenerateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// language_1=("Java" | "Php" | "RTCpp" | "Ruby" | "Cpp" | "Json" | "Yuml" | "Violet" | "Umlet" | "Simulate" | "TextUml" |
// "GvStateDiagram" | "GvClassDiagram" | "Papyrus" | "Ecore" | "Xmi" | "Xtext" | "Sql")
protected class Generate_path__Language_1Assignment_1 extends AssignmentToken  {
	
	public Generate_path__Language_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getLanguage_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__GenerateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("language_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("language_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1JavaKeyword_1_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1JavaKeyword_1_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1PhpKeyword_1_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1PhpKeyword_1_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1RTCppKeyword_1_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1RTCppKeyword_1_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1RubyKeyword_1_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1RubyKeyword_1_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1CppKeyword_1_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1CppKeyword_1_0_4();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1JsonKeyword_1_0_5(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1JsonKeyword_1_0_5();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1YumlKeyword_1_0_6(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1YumlKeyword_1_0_6();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1VioletKeyword_1_0_7(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1VioletKeyword_1_0_7();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1UmletKeyword_1_0_8(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1UmletKeyword_1_0_8();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1SimulateKeyword_1_0_9(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1SimulateKeyword_1_0_9();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1TextUmlKeyword_1_0_10(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1TextUmlKeyword_1_0_10();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1GvStateDiagramKeyword_1_0_11(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1GvStateDiagramKeyword_1_0_11();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1GvClassDiagramKeyword_1_0_12(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1GvClassDiagramKeyword_1_0_12();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1PapyrusKeyword_1_0_13(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1PapyrusKeyword_1_0_13();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1EcoreKeyword_1_0_14(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1EcoreKeyword_1_0_14();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1XmiKeyword_1_0_15(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1XmiKeyword_1_0_15();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1XtextKeyword_1_0_16(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1XtextKeyword_1_0_16();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getLanguage_1SqlKeyword_1_0_17(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getLanguage_1SqlKeyword_1_0_17();
			return obj;
		}
		return null;
	}

}

// "\""
protected class Generate_path__QuotationMarkKeyword_2 extends KeywordToken  {
	
	public Generate_path__QuotationMarkKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getQuotationMarkKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__Language_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// output_1=block
protected class Generate_path__Output_1Assignment_3 extends AssignmentToken  {
	
	public Generate_path__Output_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getOutput_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__QuotationMarkKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("output_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("output_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getOutput_1BlockTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGenerate_path_Access().getOutput_1BlockTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "\""
protected class Generate_path__QuotationMarkKeyword_4 extends KeywordToken  {
	
	public Generate_path__QuotationMarkKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getQuotationMarkKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__Output_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// override_1=("--override" | "--override-all")?
protected class Generate_path__Override_1Assignment_5 extends AssignmentToken  {
	
	public Generate_path__Override_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getOverride_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__QuotationMarkKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("override_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("override_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getOverride_1OverrideKeyword_5_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getOverride_1OverrideKeyword_5_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_path_Access().getOverride_1OverrideAllKeyword_5_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGenerate_path_Access().getOverride_1OverrideAllKeyword_5_0_1();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Generate_path__SemicolonKeyword_6 extends KeywordToken  {
	
	public Generate_path__SemicolonKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_path_Access().getSemicolonKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_path__Override_1Assignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Generate_path__QuotationMarkKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Generate_path_ ****************/


/************ begin Rule UseStatement_ ****************
 *
 * UseStatement_:
 * 	"use" use_1=ID ";";
 *
 **/

// "use" use_1=ID ";"
protected class UseStatement__Group extends GroupToken {
	
	public UseStatement__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUseStatement_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UseStatement__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUseStatement_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "use"
protected class UseStatement__UseKeyword_0 extends KeywordToken  {
	
	public UseStatement__UseKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUseStatement_Access().getUseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// use_1=ID
protected class UseStatement__Use_1Assignment_1 extends AssignmentToken  {
	
	public UseStatement__Use_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUseStatement_Access().getUse_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UseStatement__UseKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("use_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("use_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUseStatement_Access().getUse_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUseStatement_Access().getUse_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class UseStatement__SemicolonKeyword_2 extends KeywordToken  {
	
	public UseStatement__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUseStatement_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UseStatement__Use_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule UseStatement_ ****************/


/************ begin Rule Namespace_ ****************
 *
 * Namespace_:
 * 	"namespace" namespace_1=ID ";";
 *
 **/

// "namespace" namespace_1=ID ";"
protected class Namespace__Group extends GroupToken {
	
	public Namespace__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNamespace_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Namespace__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNamespace_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "namespace"
protected class Namespace__NamespaceKeyword_0 extends KeywordToken  {
	
	public Namespace__NamespaceKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamespace_Access().getNamespaceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// namespace_1=ID
protected class Namespace__Namespace_1Assignment_1 extends AssignmentToken  {
	
	public Namespace__Namespace_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNamespace_Access().getNamespace_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Namespace__NamespaceKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("namespace_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("namespace_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNamespace_Access().getNamespace_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNamespace_Access().getNamespace_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Namespace__SemicolonKeyword_2 extends KeywordToken  {
	
	public Namespace__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNamespace_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Namespace__Namespace_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Namespace_ ****************/


/************ begin Rule Entity_ ****************
 *
 * Entity_:
 * 	ClassDefinition_1+=ClassDefinition_ | InterfaceDefinition_1+=InterfaceDefinition_ |
 * 	ExternalDefinition_1+=ExternalDefinition_ | AssociationDefinition_1+=AssociationDefinition_ |
 * 	AssociationClassDefinition_1+=AssociationClassDefinition_ | StateMachineDefinition_1+=StateMachineDefinition_;
 *
 **/

// ClassDefinition_1+=ClassDefinition_ | InterfaceDefinition_1+=InterfaceDefinition_ |
// ExternalDefinition_1+=ExternalDefinition_ | AssociationDefinition_1+=AssociationDefinition_ |
// AssociationClassDefinition_1+=AssociationClassDefinition_ | StateMachineDefinition_1+=StateMachineDefinition_
protected class Entity__Alternatives extends AlternativesToken {

	public Entity__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEntity_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Entity__ClassDefinition_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Entity__InterfaceDefinition_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Entity__ExternalDefinition_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Entity__AssociationDefinition_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Entity__AssociationClassDefinition_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Entity__StateMachineDefinition_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEntity_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ClassDefinition_1+=ClassDefinition_
protected class Entity__ClassDefinition_1Assignment_0 extends AssignmentToken  {
	
	public Entity__ClassDefinition_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntity_Access().getClassDefinition_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ClassDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ClassDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntity_Access().getClassDefinition_1ClassDefinition_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// InterfaceDefinition_1+=InterfaceDefinition_
protected class Entity__InterfaceDefinition_1Assignment_1 extends AssignmentToken  {
	
	public Entity__InterfaceDefinition_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntity_Access().getInterfaceDefinition_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InterfaceDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InterfaceDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInterfaceDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntity_Access().getInterfaceDefinition_1InterfaceDefinition_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ExternalDefinition_1+=ExternalDefinition_
protected class Entity__ExternalDefinition_1Assignment_2 extends AssignmentToken  {
	
	public Entity__ExternalDefinition_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntity_Access().getExternalDefinition_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ExternalDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ExternalDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntity_Access().getExternalDefinition_1ExternalDefinition_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AssociationDefinition_1+=AssociationDefinition_
protected class Entity__AssociationDefinition_1Assignment_3 extends AssignmentToken  {
	
	public Entity__AssociationDefinition_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntity_Access().getAssociationDefinition_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntity_Access().getAssociationDefinition_1AssociationDefinition_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AssociationClassDefinition_1+=AssociationClassDefinition_
protected class Entity__AssociationClassDefinition_1Assignment_4 extends AssignmentToken  {
	
	public Entity__AssociationClassDefinition_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntity_Access().getAssociationClassDefinition_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationClassDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationClassDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationClassDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntity_Access().getAssociationClassDefinition_1AssociationClassDefinition_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// StateMachineDefinition_1+=StateMachineDefinition_
protected class Entity__StateMachineDefinition_1Assignment_5 extends AssignmentToken  {
	
	public Entity__StateMachineDefinition_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntity_Access().getStateMachineDefinition_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachineDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StateMachineDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StateMachineDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateMachineDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntity_Access().getStateMachineDefinition_1StateMachineDefinition_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Entity_ ****************/


/************ begin Rule Comment_ ****************
 *
 * Comment_:
 * 	InlineComment_1+=InlineComment_ | MultilineComment_1+=MultilineComment_;
 *
 **/

// InlineComment_1+=InlineComment_ | MultilineComment_1+=MultilineComment_
protected class Comment__Alternatives extends AlternativesToken {

	public Comment__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getComment_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__InlineComment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Comment__MultilineComment_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComment_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// InlineComment_1+=InlineComment_
protected class Comment__InlineComment_1Assignment_0 extends AssignmentToken  {
	
	public Comment__InlineComment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComment_Access().getInlineComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineComment__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InlineComment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InlineComment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComment_Access().getInlineComment_1InlineComment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// MultilineComment_1+=MultilineComment_
protected class Comment__MultilineComment_1Assignment_1 extends AssignmentToken  {
	
	public Comment__MultilineComment_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComment_Access().getMultilineComment_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultilineComment__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("MultilineComment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MultilineComment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultilineComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComment_Access().getMultilineComment_1MultilineComment_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Comment_ ****************/


/************ begin Rule InlineComment_ ****************
 *
 * InlineComment_:
 * 	"//" inlineComment_1=block;
 *
 **/

// "//" inlineComment_1=block
protected class InlineComment__Group extends GroupToken {
	
	public InlineComment__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInlineComment_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineComment__InlineComment_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInlineComment_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "//"
protected class InlineComment__SolidusSolidusKeyword_0 extends KeywordToken  {
	
	public InlineComment__SolidusSolidusKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInlineComment_Access().getSolidusSolidusKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// inlineComment_1=block
protected class InlineComment__InlineComment_1Assignment_1 extends AssignmentToken  {
	
	public InlineComment__InlineComment_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineComment_Access().getInlineComment_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineComment__SolidusSolidusKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("inlineComment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("inlineComment_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInlineComment_Access().getInlineComment_1BlockTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInlineComment_Access().getInlineComment_1BlockTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule InlineComment_ ****************/


/************ begin Rule MultilineComment_ ****************
 *
 * MultilineComment_:
 * 	"/ *" multilineComment_1=block "* /";
 *
 **/

// "/ *" multilineComment_1=block "* /"
protected class MultilineComment__Group extends GroupToken {
	
	public MultilineComment__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultilineComment_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultilineComment__AsteriskSolidusKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultilineComment_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "/ *"
protected class MultilineComment__SolidusAsteriskKeyword_0 extends KeywordToken  {
	
	public MultilineComment__SolidusAsteriskKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultilineComment_Access().getSolidusAsteriskKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// multilineComment_1=block
protected class MultilineComment__MultilineComment_1Assignment_1 extends AssignmentToken  {
	
	public MultilineComment__MultilineComment_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultilineComment_Access().getMultilineComment_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultilineComment__SolidusAsteriskKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("multilineComment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("multilineComment_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultilineComment_Access().getMultilineComment_1BlockTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultilineComment_Access().getMultilineComment_1BlockTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "* /"
protected class MultilineComment__AsteriskSolidusKeyword_2 extends KeywordToken  {
	
	public MultilineComment__AsteriskSolidusKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultilineComment_Access().getAsteriskSolidusKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultilineComment__MultilineComment_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule MultilineComment_ ****************/


/************ begin Rule Debug_ ****************
 *
 * Debug_:
 * 	debug_1?="debug" ";";
 *
 **/

// debug_1?="debug" ";"
protected class Debug__Group extends GroupToken {
	
	public Debug__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDebug_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Debug__SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDebug_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// debug_1?="debug"
protected class Debug__Debug_1Assignment_0 extends AssignmentToken  {
	
	public Debug__Debug_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDebug_Access().getDebug_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("debug_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("debug_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDebug_Access().getDebug_1DebugKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Debug__SemicolonKeyword_1 extends KeywordToken  {
	
	public Debug__SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDebug_Access().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Debug__Debug_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Debug_ ****************/


/************ begin Rule Abstract_ ****************
 *
 * Abstract_:
 * 	abstract_1?="abstract" ";";
 *
 **/

// abstract_1?="abstract" ";"
protected class Abstract__Group extends GroupToken {
	
	public Abstract__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbstract_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Abstract__SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbstract_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// abstract_1?="abstract"
protected class Abstract__Abstract_1Assignment_0 extends AssignmentToken  {
	
	public Abstract__Abstract_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstract_Access().getAbstract_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("abstract_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("abstract_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAbstract_Access().getAbstract_1AbstractKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Abstract__SemicolonKeyword_1 extends KeywordToken  {
	
	public Abstract__SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstract_Access().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Abstract__Abstract_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Abstract_ ****************/


/************ begin Rule ClassDefinition_ ****************
 *
 * ClassDefinition_:
 * 	"class" name_1=ID "{" ClassContent_1+=ClassContent_* "}";
 *
 **/

// "class" name_1=ID "{" ClassContent_1+=ClassContent_* "}"
protected class ClassDefinition__Group extends GroupToken {
	
	public ClassDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClassDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "class"
protected class ClassDefinition__ClassKeyword_0 extends KeywordToken  {
	
	public ClassDefinition__ClassKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefinition_Access().getClassKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID
protected class ClassDefinition__Name_1Assignment_1 extends AssignmentToken  {
	
	public ClassDefinition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__ClassKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getClassDefinition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getClassDefinition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ClassDefinition__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ClassDefinition__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefinition_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ClassContent_1+=ClassContent_*
protected class ClassDefinition__ClassContent_1Assignment_3 extends AssignmentToken  {
	
	public ClassDefinition__ClassContent_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassDefinition_Access().getClassContent_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassContent__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ClassContent_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ClassContent_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassContent_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassDefinition_Access().getClassContent_1ClassContent_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ClassDefinition__ClassContent_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ClassDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ClassDefinition__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ClassDefinition__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassDefinition_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__ClassContent_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ClassDefinition_ ****************/


/************ begin Rule ExternalDefinition_ ****************
 *
 * ExternalDefinition_:
 * 	"external" interface_1?="interface"? name_1=ID "{" ClassContent_1+=ClassContent_* "}";
 *
 **/

// "external" interface_1?="interface"? name_1=ID "{" ClassContent_1+=ClassContent_* "}"
protected class ExternalDefinition__Group extends GroupToken {
	
	public ExternalDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalDefinition__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExternalDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "external"
protected class ExternalDefinition__ExternalKeyword_0 extends KeywordToken  {
	
	public ExternalDefinition__ExternalKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getExternalKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// interface_1?="interface"?
protected class ExternalDefinition__Interface_1Assignment_1 extends AssignmentToken  {
	
	public ExternalDefinition__Interface_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getInterface_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalDefinition__ExternalKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("interface_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("interface_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getExternalDefinition_Access().getInterface_1InterfaceKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class ExternalDefinition__Name_1Assignment_2 extends AssignmentToken  {
	
	public ExternalDefinition__Name_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getName_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalDefinition__Interface_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExternalDefinition__ExternalKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExternalDefinition_Access().getName_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExternalDefinition_Access().getName_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ExternalDefinition__LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ExternalDefinition__LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalDefinition__Name_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ClassContent_1+=ClassContent_*
protected class ExternalDefinition__ClassContent_1Assignment_4 extends AssignmentToken  {
	
	public ExternalDefinition__ClassContent_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getClassContent_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassContent__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ClassContent_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ClassContent_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassContent_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExternalDefinition_Access().getClassContent_1ClassContent_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExternalDefinition__ClassContent_1Assignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ExternalDefinition__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ExternalDefinition__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public ExternalDefinition__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalDefinition_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExternalDefinition__ClassContent_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ExternalDefinition__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExternalDefinition_ ****************/


/************ begin Rule InterfaceDefinition_ ****************
 *
 * InterfaceDefinition_:
 * 	"interface" name_1=ID "{" Depend_1+=Depend_* InterfaceBody_1+=InterfaceBody_ "}";
 *
 **/

// "interface" name_1=ID "{" Depend_1+=Depend_* InterfaceBody_1+=InterfaceBody_ "}"
protected class InterfaceDefinition__Group extends GroupToken {
	
	public InterfaceDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceDefinition__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterfaceDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "interface"
protected class InterfaceDefinition__InterfaceKeyword_0 extends KeywordToken  {
	
	public InterfaceDefinition__InterfaceKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getInterfaceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID
protected class InterfaceDefinition__Name_1Assignment_1 extends AssignmentToken  {
	
	public InterfaceDefinition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceDefinition__InterfaceKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInterfaceDefinition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInterfaceDefinition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class InterfaceDefinition__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public InterfaceDefinition__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceDefinition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Depend_1+=Depend_*
protected class InterfaceDefinition__Depend_1Assignment_3 extends AssignmentToken  {
	
	public InterfaceDefinition__Depend_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getDepend_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Depend__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Depend_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Depend_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDepend_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceDefinition_Access().getDepend_1Depend_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceDefinition__Depend_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InterfaceDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// InterfaceBody_1+=InterfaceBody_
protected class InterfaceDefinition__InterfaceBody_1Assignment_4 extends AssignmentToken  {
	
	public InterfaceDefinition__InterfaceBody_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getInterfaceBody_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceBody__InterfaceMemberDeclaration_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InterfaceBody_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InterfaceBody_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInterfaceBody_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceDefinition_Access().getInterfaceBody_1InterfaceBody_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceDefinition__Depend_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InterfaceDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class InterfaceDefinition__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public InterfaceDefinition__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInterfaceDefinition_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceDefinition__InterfaceBody_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule InterfaceDefinition_ ****************/


/************ begin Rule AssociationDefinition_ ****************
 *
 * AssociationDefinition_:
 * 	"association" name_1=ID? "{" Association_1+=Association_* "}";
 *
 **/

// "association" name_1=ID? "{" Association_1+=Association_* "}"
protected class AssociationDefinition__Group extends GroupToken {
	
	public AssociationDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationDefinition__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssociationDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "association"
protected class AssociationDefinition__AssociationKeyword_0 extends KeywordToken  {
	
	public AssociationDefinition__AssociationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationDefinition_Access().getAssociationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID?
protected class AssociationDefinition__Name_1Assignment_1 extends AssignmentToken  {
	
	public AssociationDefinition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationDefinition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationDefinition__AssociationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationDefinition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationDefinition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class AssociationDefinition__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public AssociationDefinition__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationDefinition_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationDefinition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssociationDefinition__AssociationKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// Association_1+=Association_*
protected class AssociationDefinition__Association_1Assignment_3 extends AssignmentToken  {
	
	public AssociationDefinition__Association_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationDefinition_Access().getAssociation_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Association__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Association_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Association_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationDefinition_Access().getAssociation_1Association_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssociationDefinition__Association_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new AssociationDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class AssociationDefinition__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public AssociationDefinition__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationDefinition_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationDefinition__Association_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssociationDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule AssociationDefinition_ ****************/


/************ begin Rule AssociationClassDefinition_ ****************
 *
 * AssociationClassDefinition_:
 * 	"associationClass" name_1=ID "{" AssociationClassContent_1+=AssociationClassContent_* "}";
 *
 **/

// "associationClass" name_1=ID "{" AssociationClassContent_1+=AssociationClassContent_* "}"
protected class AssociationClassDefinition__Group extends GroupToken {
	
	public AssociationClassDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationClassDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassDefinition__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssociationClassDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "associationClass"
protected class AssociationClassDefinition__AssociationClassKeyword_0 extends KeywordToken  {
	
	public AssociationClassDefinition__AssociationClassKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationClassDefinition_Access().getAssociationClassKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID
protected class AssociationClassDefinition__Name_1Assignment_1 extends AssignmentToken  {
	
	public AssociationClassDefinition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassDefinition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassDefinition__AssociationClassKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationClassDefinition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationClassDefinition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class AssociationClassDefinition__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public AssociationClassDefinition__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationClassDefinition_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassDefinition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// AssociationClassContent_1+=AssociationClassContent_*
protected class AssociationClassDefinition__AssociationClassContent_1Assignment_3 extends AssignmentToken  {
	
	public AssociationClassDefinition__AssociationClassContent_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassDefinition_Access().getAssociationClassContent_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassContent__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationClassContent_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationClassContent_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationClassContent_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassDefinition_Access().getAssociationClassContent_1AssociationClassContent_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssociationClassDefinition__AssociationClassContent_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new AssociationClassDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class AssociationClassDefinition__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public AssociationClassDefinition__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationClassDefinition_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassDefinition__AssociationClassContent_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssociationClassDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule AssociationClassDefinition_ ****************/


/************ begin Rule ClassContent_ ****************
 *
 * ClassContent_:
 * 	Comment_1+=Comment_ | ClassDefinition_1+=ClassDefinition_ | Trace_1+=Trace_ | Position_1+=Position_ |
 * 	DisplayColor_1+=DisplayColor_ | Abstract_1+=Abstract_ | Invariant_1+=Invariant_ | SoftwarePattern_1+=SoftwarePattern_
 * 	| Depend_1+=Depend_ | SymmetricReflexiveAssociation_1+=SymmetricReflexiveAssociation_ | Attribute_1+=Attribute_ |
 * 	StateMachine_1+=StateMachine_ | InlineAssociation_1+=InlineAssociation_ |
 * 	ConcreteMethodDeclaration_1+=ConcreteMethodDeclaration_ | ConstantDeclaration_1+=ConstantDeclaration_ | ";" |
 * 	ExtraCode_1+=ExtraCode_;
 *
 **/

// Comment_1+=Comment_ | ClassDefinition_1+=ClassDefinition_ | Trace_1+=Trace_ | Position_1+=Position_ |
// DisplayColor_1+=DisplayColor_ | Abstract_1+=Abstract_ | Invariant_1+=Invariant_ | SoftwarePattern_1+=SoftwarePattern_ |
// Depend_1+=Depend_ | SymmetricReflexiveAssociation_1+=SymmetricReflexiveAssociation_ | Attribute_1+=Attribute_ |
// StateMachine_1+=StateMachine_ | InlineAssociation_1+=InlineAssociation_ |
// ConcreteMethodDeclaration_1+=ConcreteMethodDeclaration_ | ConstantDeclaration_1+=ConstantDeclaration_ | ";" |
// ExtraCode_1+=ExtraCode_
protected class ClassContent__Alternatives extends AlternativesToken {

	public ClassContent__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getClassContent_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassContent__Comment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ClassContent__ClassDefinition_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ClassContent__Trace_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ClassContent__Position_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ClassContent__DisplayColor_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ClassContent__Abstract_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new ClassContent__Invariant_1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new ClassContent__SoftwarePattern_1Assignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new ClassContent__Depend_1Assignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new ClassContent__SymmetricReflexiveAssociation_1Assignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new ClassContent__Attribute_1Assignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new ClassContent__StateMachine_1Assignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new ClassContent__InlineAssociation_1Assignment_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new ClassContent__ConcreteMethodDeclaration_1Assignment_13(lastRuleCallOrigin, this, 13, inst);
			case 14: return new ClassContent__ConstantDeclaration_1Assignment_14(lastRuleCallOrigin, this, 14, inst);
			case 15: return new ClassContent__SemicolonKeyword_15(lastRuleCallOrigin, this, 15, inst);
			case 16: return new ClassContent__ExtraCode_1Assignment_16(lastRuleCallOrigin, this, 16, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClassContent_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Comment_1+=Comment_
protected class ClassContent__Comment_1Assignment_0 extends AssignmentToken  {
	
	public ClassContent__Comment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Comment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Comment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getComment_1Comment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ClassDefinition_1+=ClassDefinition_
protected class ClassContent__ClassDefinition_1Assignment_1 extends AssignmentToken  {
	
	public ClassContent__ClassDefinition_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getClassDefinition_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ClassDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ClassDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getClassDefinition_1ClassDefinition_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Trace_1+=Trace_
protected class ClassContent__Trace_1Assignment_2 extends AssignmentToken  {
	
	public ClassContent__Trace_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getTrace_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trace__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Trace_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Trace_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrace_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getTrace_1Trace_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Position_1+=Position_
protected class ClassContent__Position_1Assignment_3 extends AssignmentToken  {
	
	public ClassContent__Position_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getPosition_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Position__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Position_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Position_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPosition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getPosition_1Position_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// DisplayColor_1+=DisplayColor_
protected class ClassContent__DisplayColor_1Assignment_4 extends AssignmentToken  {
	
	public ClassContent__DisplayColor_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getDisplayColor_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DisplayColor__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("DisplayColor_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("DisplayColor_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDisplayColor_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getDisplayColor_1DisplayColor_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Abstract_1+=Abstract_
protected class ClassContent__Abstract_1Assignment_5 extends AssignmentToken  {
	
	public ClassContent__Abstract_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getAbstract_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Abstract__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Abstract_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Abstract_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstract_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getAbstract_1Abstract_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Invariant_1+=Invariant_
protected class ClassContent__Invariant_1Assignment_6 extends AssignmentToken  {
	
	public ClassContent__Invariant_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getInvariant_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Invariant__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Invariant_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Invariant_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInvariant_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getInvariant_1Invariant_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// SoftwarePattern_1+=SoftwarePattern_
protected class ClassContent__SoftwarePattern_1Assignment_7 extends AssignmentToken  {
	
	public ClassContent__SoftwarePattern_1Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getSoftwarePattern_1Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SoftwarePattern__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SoftwarePattern_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SoftwarePattern_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSoftwarePattern_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getSoftwarePattern_1SoftwarePattern_ParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Depend_1+=Depend_
protected class ClassContent__Depend_1Assignment_8 extends AssignmentToken  {
	
	public ClassContent__Depend_1Assignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getDepend_1Assignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Depend__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Depend_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Depend_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDepend_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getDepend_1Depend_ParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// SymmetricReflexiveAssociation_1+=SymmetricReflexiveAssociation_
protected class ClassContent__SymmetricReflexiveAssociation_1Assignment_9 extends AssignmentToken  {
	
	public ClassContent__SymmetricReflexiveAssociation_1Assignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getSymmetricReflexiveAssociation_1Assignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SymmetricReflexiveAssociation__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SymmetricReflexiveAssociation_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SymmetricReflexiveAssociation_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSymmetricReflexiveAssociation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getSymmetricReflexiveAssociation_1SymmetricReflexiveAssociation_ParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Attribute_1+=Attribute_
protected class ClassContent__Attribute_1Assignment_10 extends AssignmentToken  {
	
	public ClassContent__Attribute_1Assignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getAttribute_1Assignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Attribute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Attribute_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttribute_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getAttribute_1Attribute_ParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// StateMachine_1+=StateMachine_
protected class ClassContent__StateMachine_1Assignment_11 extends AssignmentToken  {
	
	public ClassContent__StateMachine_1Assignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getStateMachine_1Assignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachine__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StateMachine_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StateMachine_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateMachine_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getStateMachine_1StateMachine_ParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// InlineAssociation_1+=InlineAssociation_
protected class ClassContent__InlineAssociation_1Assignment_12 extends AssignmentToken  {
	
	public ClassContent__InlineAssociation_1Assignment_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getInlineAssociation_1Assignment_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociation__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InlineAssociation_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InlineAssociation_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineAssociation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getInlineAssociation_1InlineAssociation_ParserRuleCall_12_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ConcreteMethodDeclaration_1+=ConcreteMethodDeclaration_
protected class ClassContent__ConcreteMethodDeclaration_1Assignment_13 extends AssignmentToken  {
	
	public ClassContent__ConcreteMethodDeclaration_1Assignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getConcreteMethodDeclaration_1Assignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConcreteMethodDeclaration_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConcreteMethodDeclaration_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConcreteMethodDeclaration_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getConcreteMethodDeclaration_1ConcreteMethodDeclaration_ParserRuleCall_13_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ConstantDeclaration_1+=ConstantDeclaration_
protected class ClassContent__ConstantDeclaration_1Assignment_14 extends AssignmentToken  {
	
	public ClassContent__ConstantDeclaration_1Assignment_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getConstantDeclaration_1Assignment_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantDeclaration__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstantDeclaration_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstantDeclaration_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantDeclaration_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getConstantDeclaration_1ConstantDeclaration_ParserRuleCall_14_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ";"
protected class ClassContent__SemicolonKeyword_15 extends KeywordToken  {
	
	public ClassContent__SemicolonKeyword_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getClassContent_Access().getSemicolonKeyword_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ExtraCode_1+=ExtraCode_
protected class ClassContent__ExtraCode_1Assignment_16 extends AssignmentToken  {
	
	public ClassContent__ExtraCode_1Assignment_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClassContent_Access().getExtraCode_1Assignment_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtraCode__ExtraCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ExtraCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ExtraCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtraCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getClassContent_Access().getExtraCode_1ExtraCode_ParserRuleCall_16_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule ClassContent_ ****************/


/************ begin Rule AssociationClassContent_ ****************
 *
 * AssociationClassContent_:
 * 	Comment_1+=Comment_ | ClassDefinition_1+=ClassDefinition_ | Position_1+=Position_ | DisplayColor_1+=DisplayColor_ |
 * 	Invariant_1+=Invariant_ | SoftwarePattern_1+=SoftwarePattern_ | Depend_1+=Depend_ |
 * 	SingleAssociationEnd_1+=SingleAssociationEnd_ | StateMachine_1+=StateMachine_ | Attribute_1+=Attribute_ |
 * 	Association_1+=Association_ | InlineAssociation_1+=InlineAssociation_ | ";" | ExtraCode_1+=ExtraCode_;
 *
 **/

// Comment_1+=Comment_ | ClassDefinition_1+=ClassDefinition_ | Position_1+=Position_ | DisplayColor_1+=DisplayColor_ |
// Invariant_1+=Invariant_ | SoftwarePattern_1+=SoftwarePattern_ | Depend_1+=Depend_ |
// SingleAssociationEnd_1+=SingleAssociationEnd_ | StateMachine_1+=StateMachine_ | Attribute_1+=Attribute_ |
// Association_1+=Association_ | InlineAssociation_1+=InlineAssociation_ | ";" | ExtraCode_1+=ExtraCode_
protected class AssociationClassContent__Alternatives extends AlternativesToken {

	public AssociationClassContent__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationClassContent__Comment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssociationClassContent__ClassDefinition_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new AssociationClassContent__Position_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new AssociationClassContent__DisplayColor_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new AssociationClassContent__Invariant_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new AssociationClassContent__SoftwarePattern_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new AssociationClassContent__Depend_1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new AssociationClassContent__SingleAssociationEnd_1Assignment_7(lastRuleCallOrigin, this, 7, inst);
			case 8: return new AssociationClassContent__StateMachine_1Assignment_8(lastRuleCallOrigin, this, 8, inst);
			case 9: return new AssociationClassContent__Attribute_1Assignment_9(lastRuleCallOrigin, this, 9, inst);
			case 10: return new AssociationClassContent__Association_1Assignment_10(lastRuleCallOrigin, this, 10, inst);
			case 11: return new AssociationClassContent__InlineAssociation_1Assignment_11(lastRuleCallOrigin, this, 11, inst);
			case 12: return new AssociationClassContent__SemicolonKeyword_12(lastRuleCallOrigin, this, 12, inst);
			case 13: return new AssociationClassContent__ExtraCode_1Assignment_13(lastRuleCallOrigin, this, 13, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssociationClassContent_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Comment_1+=Comment_
protected class AssociationClassContent__Comment_1Assignment_0 extends AssignmentToken  {
	
	public AssociationClassContent__Comment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Comment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Comment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getComment_1Comment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ClassDefinition_1+=ClassDefinition_
protected class AssociationClassContent__ClassDefinition_1Assignment_1 extends AssignmentToken  {
	
	public AssociationClassContent__ClassDefinition_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getClassDefinition_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ClassDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ClassDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getClassDefinition_1ClassDefinition_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Position_1+=Position_
protected class AssociationClassContent__Position_1Assignment_2 extends AssignmentToken  {
	
	public AssociationClassContent__Position_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getPosition_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Position__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Position_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Position_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPosition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getPosition_1Position_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// DisplayColor_1+=DisplayColor_
protected class AssociationClassContent__DisplayColor_1Assignment_3 extends AssignmentToken  {
	
	public AssociationClassContent__DisplayColor_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getDisplayColor_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DisplayColor__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("DisplayColor_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("DisplayColor_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDisplayColor_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getDisplayColor_1DisplayColor_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Invariant_1+=Invariant_
protected class AssociationClassContent__Invariant_1Assignment_4 extends AssignmentToken  {
	
	public AssociationClassContent__Invariant_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getInvariant_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Invariant__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Invariant_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Invariant_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInvariant_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getInvariant_1Invariant_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// SoftwarePattern_1+=SoftwarePattern_
protected class AssociationClassContent__SoftwarePattern_1Assignment_5 extends AssignmentToken  {
	
	public AssociationClassContent__SoftwarePattern_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getSoftwarePattern_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SoftwarePattern__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SoftwarePattern_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SoftwarePattern_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSoftwarePattern_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getSoftwarePattern_1SoftwarePattern_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Depend_1+=Depend_
protected class AssociationClassContent__Depend_1Assignment_6 extends AssignmentToken  {
	
	public AssociationClassContent__Depend_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getDepend_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Depend__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Depend_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Depend_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDepend_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getDepend_1Depend_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// SingleAssociationEnd_1+=SingleAssociationEnd_
protected class AssociationClassContent__SingleAssociationEnd_1Assignment_7 extends AssignmentToken  {
	
	public AssociationClassContent__SingleAssociationEnd_1Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getSingleAssociationEnd_1Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleAssociationEnd__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SingleAssociationEnd_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SingleAssociationEnd_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSingleAssociationEnd_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getSingleAssociationEnd_1SingleAssociationEnd_ParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// StateMachine_1+=StateMachine_
protected class AssociationClassContent__StateMachine_1Assignment_8 extends AssignmentToken  {
	
	public AssociationClassContent__StateMachine_1Assignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getStateMachine_1Assignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachine__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StateMachine_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StateMachine_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateMachine_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getStateMachine_1StateMachine_ParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Attribute_1+=Attribute_
protected class AssociationClassContent__Attribute_1Assignment_9 extends AssignmentToken  {
	
	public AssociationClassContent__Attribute_1Assignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getAttribute_1Assignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Attribute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Attribute_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAttribute_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getAttribute_1Attribute_ParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Association_1+=Association_
protected class AssociationClassContent__Association_1Assignment_10 extends AssignmentToken  {
	
	public AssociationClassContent__Association_1Assignment_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getAssociation_1Assignment_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Association__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Association_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Association_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getAssociation_1Association_ParserRuleCall_10_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// InlineAssociation_1+=InlineAssociation_
protected class AssociationClassContent__InlineAssociation_1Assignment_11 extends AssignmentToken  {
	
	public AssociationClassContent__InlineAssociation_1Assignment_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getInlineAssociation_1Assignment_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociation__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InlineAssociation_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InlineAssociation_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineAssociation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getInlineAssociation_1InlineAssociation_ParserRuleCall_11_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ";"
protected class AssociationClassContent__SemicolonKeyword_12 extends KeywordToken  {
	
	public AssociationClassContent__SemicolonKeyword_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getSemicolonKeyword_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ExtraCode_1+=ExtraCode_
protected class AssociationClassContent__ExtraCode_1Assignment_13 extends AssignmentToken  {
	
	public AssociationClassContent__ExtraCode_1Assignment_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationClassContent_Access().getExtraCode_1Assignment_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtraCode__ExtraCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ExtraCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ExtraCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtraCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationClassContent_Access().getExtraCode_1ExtraCode_ParserRuleCall_13_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule AssociationClassContent_ ****************/


/************ begin Rule InterfaceBody_ ****************
 *
 * InterfaceBody_:
 * 	InterfaceMemberDeclaration_1+=InterfaceMemberDeclaration_*;
 *
 **/

// InterfaceMemberDeclaration_1+=InterfaceMemberDeclaration_*
protected class InterfaceBody__InterfaceMemberDeclaration_1Assignment extends AssignmentToken  {
	
	public InterfaceBody__InterfaceMemberDeclaration_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceBody_Access().getInterfaceMemberDeclaration_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceMemberDeclaration__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InterfaceMemberDeclaration_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InterfaceMemberDeclaration_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInterfaceMemberDeclaration_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceBody_Access().getInterfaceMemberDeclaration_1InterfaceMemberDeclaration_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InterfaceBody__InterfaceMemberDeclaration_1Assignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule InterfaceBody_ ****************/


/************ begin Rule InterfaceMemberDeclaration_ ****************
 *
 * InterfaceMemberDeclaration_:
 * 	ConstantDeclaration_1+=ConstantDeclaration_ | AbstractMethodDeclaration_1+=AbstractMethodDeclaration_ |
 * 	Position_1+=Position_ | DisplayColor_1+=DisplayColor_ | IsA_1+=IsA_ | ExtraCode_1+=ExtraCode_;
 *
 **/

// ConstantDeclaration_1+=ConstantDeclaration_ | AbstractMethodDeclaration_1+=AbstractMethodDeclaration_ |
// Position_1+=Position_ | DisplayColor_1+=DisplayColor_ | IsA_1+=IsA_ | ExtraCode_1+=ExtraCode_
protected class InterfaceMemberDeclaration__Alternatives extends AlternativesToken {

	public InterfaceMemberDeclaration__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InterfaceMemberDeclaration__ConstantDeclaration_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InterfaceMemberDeclaration__AbstractMethodDeclaration_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InterfaceMemberDeclaration__Position_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new InterfaceMemberDeclaration__DisplayColor_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new InterfaceMemberDeclaration__IsA_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new InterfaceMemberDeclaration__ExtraCode_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInterfaceMemberDeclaration_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstantDeclaration_1+=ConstantDeclaration_
protected class InterfaceMemberDeclaration__ConstantDeclaration_1Assignment_0 extends AssignmentToken  {
	
	public InterfaceMemberDeclaration__ConstantDeclaration_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getConstantDeclaration_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantDeclaration__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstantDeclaration_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstantDeclaration_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantDeclaration_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceMemberDeclaration_Access().getConstantDeclaration_1ConstantDeclaration_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AbstractMethodDeclaration_1+=AbstractMethodDeclaration_
protected class InterfaceMemberDeclaration__AbstractMethodDeclaration_1Assignment_1 extends AssignmentToken  {
	
	public InterfaceMemberDeclaration__AbstractMethodDeclaration_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getAbstractMethodDeclaration_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractMethodDeclaration__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AbstractMethodDeclaration_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AbstractMethodDeclaration_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractMethodDeclaration_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceMemberDeclaration_Access().getAbstractMethodDeclaration_1AbstractMethodDeclaration_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Position_1+=Position_
protected class InterfaceMemberDeclaration__Position_1Assignment_2 extends AssignmentToken  {
	
	public InterfaceMemberDeclaration__Position_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getPosition_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Position__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Position_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Position_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPosition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceMemberDeclaration_Access().getPosition_1Position_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// DisplayColor_1+=DisplayColor_
protected class InterfaceMemberDeclaration__DisplayColor_1Assignment_3 extends AssignmentToken  {
	
	public InterfaceMemberDeclaration__DisplayColor_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getDisplayColor_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DisplayColor__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("DisplayColor_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("DisplayColor_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDisplayColor_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceMemberDeclaration_Access().getDisplayColor_1DisplayColor_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// IsA_1+=IsA_
protected class InterfaceMemberDeclaration__IsA_1Assignment_4 extends AssignmentToken  {
	
	public InterfaceMemberDeclaration__IsA_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getIsA_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsA__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("IsA_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("IsA_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIsA_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceMemberDeclaration_Access().getIsA_1IsA_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ExtraCode_1+=ExtraCode_
protected class InterfaceMemberDeclaration__ExtraCode_1Assignment_5 extends AssignmentToken  {
	
	public InterfaceMemberDeclaration__ExtraCode_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInterfaceMemberDeclaration_Access().getExtraCode_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtraCode__ExtraCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ExtraCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ExtraCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtraCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInterfaceMemberDeclaration_Access().getExtraCode_1ExtraCode_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule InterfaceMemberDeclaration_ ****************/


/************ begin Rule ConstantDeclaration_ ****************
 *
 * ConstantDeclaration_:
 * 	"constant" Anonymous_constantDeclaration_1_1+=Anonymous_constantDeclaration_1_
 * 	Anonymous_constantDeclaration_2_1+=Anonymous_constantDeclaration_2_ ";";
 *
 **/

// "constant" Anonymous_constantDeclaration_1_1+=Anonymous_constantDeclaration_1_
// Anonymous_constantDeclaration_2_1+=Anonymous_constantDeclaration_2_ ";"
protected class ConstantDeclaration__Group extends GroupToken {
	
	public ConstantDeclaration__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantDeclaration_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantDeclaration__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstantDeclaration_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "constant"
protected class ConstantDeclaration__ConstantKeyword_0 extends KeywordToken  {
	
	public ConstantDeclaration__ConstantKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantDeclaration_Access().getConstantKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Anonymous_constantDeclaration_1_1+=Anonymous_constantDeclaration_1_
protected class ConstantDeclaration__Anonymous_constantDeclaration_1_1Assignment_1 extends AssignmentToken  {
	
	public ConstantDeclaration__Anonymous_constantDeclaration_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantDeclaration_Access().getAnonymous_constantDeclaration_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_constantDeclaration_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_constantDeclaration_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_constantDeclaration_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstantDeclaration_Access().getAnonymous_constantDeclaration_1_1Anonymous_constantDeclaration_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstantDeclaration__ConstantKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_constantDeclaration_2_1+=Anonymous_constantDeclaration_2_
protected class ConstantDeclaration__Anonymous_constantDeclaration_2_1Assignment_2 extends AssignmentToken  {
	
	public ConstantDeclaration__Anonymous_constantDeclaration_2_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantDeclaration_Access().getAnonymous_constantDeclaration_2_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_constantDeclaration_2_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_constantDeclaration_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_constantDeclaration_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstantDeclaration_Access().getAnonymous_constantDeclaration_2_1Anonymous_constantDeclaration_2_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstantDeclaration__Anonymous_constantDeclaration_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ConstantDeclaration__SemicolonKeyword_3 extends KeywordToken  {
	
	public ConstantDeclaration__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstantDeclaration_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantDeclaration__Anonymous_constantDeclaration_2_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ConstantDeclaration_ ****************/


/************ begin Rule Anonymous_constantDeclaration_1_ ****************
 *
 * Anonymous_constantDeclaration_1_:
 * 	list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID;
 *
 **/

// list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID
protected class Anonymous_constantDeclaration_1__Alternatives extends AlternativesToken {

	public Anonymous_constantDeclaration_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_constantDeclaration_1__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_constantDeclaration_1__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_constantDeclaration_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// list_1?="[]" name_1=ID
protected class Anonymous_constantDeclaration_1__Group_0 extends GroupToken {
	
	public Anonymous_constantDeclaration_1__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Name_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// list_1?="[]"
protected class Anonymous_constantDeclaration_1__List_1Assignment_0_0 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__List_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getList_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_constantDeclaration_1__Name_1Assignment_0_1 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__Name_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__List_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1IDTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1IDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID list_1?="[]" name_1=ID
protected class Anonymous_constantDeclaration_1__Group_1 extends GroupToken {
	
	public Anonymous_constantDeclaration_1__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Name_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class Anonymous_constantDeclaration_1__Type_1Assignment_1_0 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__Type_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constantDeclaration_1_Access().getType_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getType_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// list_1?="[]"
protected class Anonymous_constantDeclaration_1__List_1Assignment_1_1 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__List_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getList_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Type_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_constantDeclaration_1__Name_1Assignment_1_2 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__Name_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__List_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID? name_1=ID
protected class Anonymous_constantDeclaration_1__Group_2 extends GroupToken {
	
	public Anonymous_constantDeclaration_1__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Name_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID?
protected class Anonymous_constantDeclaration_1__Type_1Assignment_2_0 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__Type_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getType_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constantDeclaration_1_Access().getType_1IDTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getType_1IDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_constantDeclaration_1__Name_1Assignment_2_1 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_1__Name_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_1__Type_1Assignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1IDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constantDeclaration_1_Access().getName_1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Anonymous_constantDeclaration_1_ ****************/


/************ begin Rule Anonymous_constantDeclaration_2_ ****************
 *
 * Anonymous_constantDeclaration_2_:
 * 	"=" value_1=block;
 *
 **/

// "=" value_1=block
protected class Anonymous_constantDeclaration_2__Group extends GroupToken {
	
	public Anonymous_constantDeclaration_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_2__Value_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_constantDeclaration_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "="
protected class Anonymous_constantDeclaration_2__EqualsSignKeyword_0 extends KeywordToken  {
	
	public Anonymous_constantDeclaration_2__EqualsSignKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_2_Access().getEqualsSignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value_1=block
protected class Anonymous_constantDeclaration_2__Value_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_constantDeclaration_2__Value_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constantDeclaration_2_Access().getValue_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constantDeclaration_2__EqualsSignKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constantDeclaration_2_Access().getValue_1BlockTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constantDeclaration_2_Access().getValue_1BlockTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_constantDeclaration_2_ ****************/


/************ begin Rule MoreCode_ ****************
 *
 * MoreCode_:
 * 	Anonymous_moreCode_1_1+=Anonymous_moreCode_1_? "{" code_1=block "}";
 *
 **/

// Anonymous_moreCode_1_1+=Anonymous_moreCode_1_? "{" code_1=block "}"
protected class MoreCode__Group extends GroupToken {
	
	public MoreCode__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMoreCode_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMoreCode_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_moreCode_1_1+=Anonymous_moreCode_1_?
protected class MoreCode__Anonymous_moreCode_1_1Assignment_0 extends AssignmentToken  {
	
	public MoreCode__Anonymous_moreCode_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMoreCode_Access().getAnonymous_moreCode_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_moreCode_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_moreCode_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_moreCode_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_moreCode_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMoreCode_Access().getAnonymous_moreCode_1_1Anonymous_moreCode_1_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "{"
protected class MoreCode__LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public MoreCode__LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMoreCode_Access().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Anonymous_moreCode_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// code_1=block
protected class MoreCode__Code_1Assignment_2 extends AssignmentToken  {
	
	public MoreCode__Code_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMoreCode_Access().getCode_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMoreCode_Access().getCode_1BlockTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMoreCode_Access().getCode_1BlockTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class MoreCode__RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public MoreCode__RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMoreCode_Access().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Code_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule MoreCode_ ****************/


/************ begin Rule Anonymous_moreCode_1_ ****************
 *
 * Anonymous_moreCode_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_moreCode_1__Group extends GroupToken {
	
	public Anonymous_moreCode_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_moreCode_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_moreCode_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_moreCode_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_moreCode_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_moreCode_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_moreCode_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_moreCode_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_moreCode_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_moreCode_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_moreCode_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_moreCode_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_moreCode_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_moreCode_1_ ****************/


/************ begin Rule CodeLangs_ ****************
 *
 * CodeLangs_:
 * 	Anonymous_codeLangs_1_1+=Anonymous_codeLangs_1_*;
 *
 **/

// Anonymous_codeLangs_1_1+=Anonymous_codeLangs_1_*
protected class CodeLangs__Anonymous_codeLangs_1_1Assignment extends AssignmentToken  {
	
	public CodeLangs__Anonymous_codeLangs_1_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCodeLangs_Access().getAnonymous_codeLangs_1_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_codeLangs_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_codeLangs_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_codeLangs_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_codeLangs_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCodeLangs_Access().getAnonymous_codeLangs_1_1Anonymous_codeLangs_1_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule CodeLangs_ ****************/


/************ begin Rule Anonymous_codeLangs_1_ ****************
 *
 * Anonymous_codeLangs_1_:
 * 	"," CodeLang_1+=CodeLang_;
 *
 **/

// "," CodeLang_1+=CodeLang_
protected class Anonymous_codeLangs_1__Group extends GroupToken {
	
	public Anonymous_codeLangs_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_codeLangs_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_codeLangs_1__CodeLang_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_codeLangs_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_codeLangs_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_codeLangs_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_codeLangs_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_codeLangs_1__CodeLang_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_codeLangs_1__CodeLang_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_codeLangs_1_Access().getCodeLang_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_codeLangs_1_Access().getCodeLang_1CodeLang_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_codeLangs_1__CommaKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_codeLangs_1_ ****************/


/************ begin Rule CodeLang_ ****************
 *
 * CodeLang_:
 * 	codeLang_1=("Java" | "RTCpp" | "Cpp" | "Php" | "Ruby");
 *
 **/

// codeLang_1=("Java" | "RTCpp" | "Cpp" | "Php" | "Ruby")
protected class CodeLang__CodeLang_1Assignment extends AssignmentToken  {
	
	public CodeLang__CodeLang_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCodeLang_Access().getCodeLang_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCodeLang_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("codeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("codeLang_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getCodeLang_Access().getCodeLang_1JavaKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCodeLang_Access().getCodeLang_1JavaKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getCodeLang_Access().getCodeLang_1RTCppKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCodeLang_Access().getCodeLang_1RTCppKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getCodeLang_Access().getCodeLang_1CppKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCodeLang_Access().getCodeLang_1CppKeyword_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getCodeLang_Access().getCodeLang_1PhpKeyword_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCodeLang_Access().getCodeLang_1PhpKeyword_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getCodeLang_Access().getCodeLang_1RubyKeyword_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getCodeLang_Access().getCodeLang_1RubyKeyword_0_4();
			return obj;
		}
		return null;
	}

}

/************ end Rule CodeLang_ ****************/


/************ begin Rule MethodBody_ ****************
 *
 * MethodBody_:
 * 	Anonymous_methodBody_1_1+=Anonymous_methodBody_1_* code_1=block Anonymous_methodBody_2_1+=Anonymous_methodBody_2_*;
 *
 **/

// Anonymous_methodBody_1_1+=Anonymous_methodBody_1_* code_1=block Anonymous_methodBody_2_1+=Anonymous_methodBody_2_*
protected class MethodBody__Group extends GroupToken {
	
	public MethodBody__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodBody_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodBody__Anonymous_methodBody_2_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MethodBody__Code_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodBody_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_methodBody_1_1+=Anonymous_methodBody_1_*
protected class MethodBody__Anonymous_methodBody_1_1Assignment_0 extends AssignmentToken  {
	
	public MethodBody__Anonymous_methodBody_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodBody_Access().getAnonymous_methodBody_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_methodBody_1__Precondition_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_methodBody_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_methodBody_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_methodBody_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMethodBody_Access().getAnonymous_methodBody_1_1Anonymous_methodBody_1_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MethodBody__Anonymous_methodBody_1_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// code_1=block
protected class MethodBody__Code_1Assignment_1 extends AssignmentToken  {
	
	public MethodBody__Code_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodBody_Access().getCode_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodBody__Anonymous_methodBody_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodBody_Access().getCode_1BlockTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMethodBody_Access().getCode_1BlockTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_methodBody_2_1+=Anonymous_methodBody_2_*
protected class MethodBody__Anonymous_methodBody_2_1Assignment_2 extends AssignmentToken  {
	
	public MethodBody__Anonymous_methodBody_2_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodBody_Access().getAnonymous_methodBody_2_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_methodBody_2__Postcondition_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_methodBody_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_methodBody_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_methodBody_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMethodBody_Access().getAnonymous_methodBody_2_1Anonymous_methodBody_2_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MethodBody__Anonymous_methodBody_2_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new MethodBody__Code_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule MethodBody_ ****************/


/************ begin Rule Anonymous_methodBody_1_ ****************
 *
 * Anonymous_methodBody_1_:
 * 	Precondition_1+=Precondition_;
 *
 **/

// Precondition_1+=Precondition_
protected class Anonymous_methodBody_1__Precondition_1Assignment extends AssignmentToken  {
	
	public Anonymous_methodBody_1__Precondition_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_methodBody_1_Access().getPrecondition_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Precondition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_methodBody_1_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("Precondition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Precondition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPrecondition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_methodBody_1_Access().getPrecondition_1Precondition_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_methodBody_1_ ****************/


/************ begin Rule Anonymous_methodBody_2_ ****************
 *
 * Anonymous_methodBody_2_:
 * 	Postcondition_1+=Postcondition_;
 *
 **/

// Postcondition_1+=Postcondition_
protected class Anonymous_methodBody_2__Postcondition_1Assignment extends AssignmentToken  {
	
	public Anonymous_methodBody_2__Postcondition_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_methodBody_2_Access().getPostcondition_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postcondition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_methodBody_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("Postcondition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Postcondition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPostcondition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_methodBody_2_Access().getPostcondition_1Postcondition_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_methodBody_2_ ****************/


/************ begin Rule ConcreteMethodDeclaration_ ****************
 *
 * ConcreteMethodDeclaration_:
 * 	type_1=ID MethodDeclarator_1+=MethodDeclarator_
 * 	Anonymous_concreteMethodDeclaration_1_1+=Anonymous_concreteMethodDeclaration_1_? "{" MethodBody_1+=MethodBody_ "}"
 * 	Anonymous_concreteMethodDeclaration_2_1+=Anonymous_concreteMethodDeclaration_2_*;
 *
 **/

// type_1=ID MethodDeclarator_1+=MethodDeclarator_
// Anonymous_concreteMethodDeclaration_1_1+=Anonymous_concreteMethodDeclaration_1_? "{" MethodBody_1+=MethodBody_ "}"
// Anonymous_concreteMethodDeclaration_2_1+=Anonymous_concreteMethodDeclaration_2_*
protected class ConcreteMethodDeclaration__Group extends GroupToken {
	
	public ConcreteMethodDeclaration__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_2_1Assignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConcreteMethodDeclaration__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConcreteMethodDeclaration_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type_1=ID
protected class ConcreteMethodDeclaration__Type_1Assignment_0 extends AssignmentToken  {
	
	public ConcreteMethodDeclaration__Type_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getType_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConcreteMethodDeclaration_Access().getType_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConcreteMethodDeclaration_Access().getType_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// MethodDeclarator_1+=MethodDeclarator_
protected class ConcreteMethodDeclaration__MethodDeclarator_1Assignment_1 extends AssignmentToken  {
	
	public ConcreteMethodDeclaration__MethodDeclarator_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getMethodDeclarator_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("MethodDeclarator_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MethodDeclarator_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodDeclarator_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConcreteMethodDeclaration_Access().getMethodDeclarator_1MethodDeclarator_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__Type_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_concreteMethodDeclaration_1_1+=Anonymous_concreteMethodDeclaration_1_?
protected class ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_1_1Assignment_2 extends AssignmentToken  {
	
	public ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getAnonymous_concreteMethodDeclaration_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_concreteMethodDeclaration_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_concreteMethodDeclaration_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_concreteMethodDeclaration_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_concreteMethodDeclaration_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConcreteMethodDeclaration_Access().getAnonymous_concreteMethodDeclaration_1_1Anonymous_concreteMethodDeclaration_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__MethodDeclarator_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class ConcreteMethodDeclaration__LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ConcreteMethodDeclaration__LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConcreteMethodDeclaration__MethodDeclarator_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// MethodBody_1+=MethodBody_
protected class ConcreteMethodDeclaration__MethodBody_1Assignment_4 extends AssignmentToken  {
	
	public ConcreteMethodDeclaration__MethodBody_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getMethodBody_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodBody__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("MethodBody_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MethodBody_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodBody_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConcreteMethodDeclaration_Access().getMethodBody_1MethodBody_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ConcreteMethodDeclaration__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public ConcreteMethodDeclaration__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__MethodBody_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_concreteMethodDeclaration_2_1+=Anonymous_concreteMethodDeclaration_2_*
protected class ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_2_1Assignment_6 extends AssignmentToken  {
	
	public ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_2_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConcreteMethodDeclaration_Access().getAnonymous_concreteMethodDeclaration_2_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_concreteMethodDeclaration_2__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_concreteMethodDeclaration_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_concreteMethodDeclaration_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_concreteMethodDeclaration_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConcreteMethodDeclaration_Access().getAnonymous_concreteMethodDeclaration_2_1Anonymous_concreteMethodDeclaration_2_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConcreteMethodDeclaration__Anonymous_concreteMethodDeclaration_2_1Assignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ConcreteMethodDeclaration__RightCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConcreteMethodDeclaration_ ****************/


/************ begin Rule Anonymous_concreteMethodDeclaration_1_ ****************
 *
 * Anonymous_concreteMethodDeclaration_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_concreteMethodDeclaration_1__Group extends GroupToken {
	
	public Anonymous_concreteMethodDeclaration_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_concreteMethodDeclaration_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_concreteMethodDeclaration_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_concreteMethodDeclaration_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_concreteMethodDeclaration_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_concreteMethodDeclaration_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_concreteMethodDeclaration_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_concreteMethodDeclaration_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_concreteMethodDeclaration_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_concreteMethodDeclaration_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_concreteMethodDeclaration_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_concreteMethodDeclaration_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_concreteMethodDeclaration_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_concreteMethodDeclaration_1_ ****************/


/************ begin Rule Anonymous_concreteMethodDeclaration_2_ ****************
 *
 * Anonymous_concreteMethodDeclaration_2_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_concreteMethodDeclaration_2__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_concreteMethodDeclaration_2__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_concreteMethodDeclaration_2_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_concreteMethodDeclaration_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_concreteMethodDeclaration_2_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_concreteMethodDeclaration_2_ ****************/


/************ begin Rule AbstractMethodDeclaration_ ****************
 *
 * AbstractMethodDeclaration_:
 * 	type_1=ID MethodDeclarator_1+=MethodDeclarator_ ";";
 *
 **/

// type_1=ID MethodDeclarator_1+=MethodDeclarator_ ";"
protected class AbstractMethodDeclaration__Group extends GroupToken {
	
	public AbstractMethodDeclaration__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbstractMethodDeclaration_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractMethodDeclaration__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbstractMethodDeclaration_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type_1=ID
protected class AbstractMethodDeclaration__Type_1Assignment_0 extends AssignmentToken  {
	
	public AbstractMethodDeclaration__Type_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractMethodDeclaration_Access().getType_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAbstractMethodDeclaration_Access().getType_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAbstractMethodDeclaration_Access().getType_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// MethodDeclarator_1+=MethodDeclarator_
protected class AbstractMethodDeclaration__MethodDeclarator_1Assignment_1 extends AssignmentToken  {
	
	public AbstractMethodDeclaration__MethodDeclarator_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbstractMethodDeclaration_Access().getMethodDeclarator_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("MethodDeclarator_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MethodDeclarator_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodDeclarator_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAbstractMethodDeclaration_Access().getMethodDeclarator_1MethodDeclarator_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AbstractMethodDeclaration__Type_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class AbstractMethodDeclaration__SemicolonKeyword_2 extends KeywordToken  {
	
	public AbstractMethodDeclaration__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbstractMethodDeclaration_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbstractMethodDeclaration__MethodDeclarator_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AbstractMethodDeclaration_ ****************/


/************ begin Rule MethodDeclarator_ ****************
 *
 * MethodDeclarator_:
 * 	methodName_1=ID ParameterList_1+=ParameterList_ | methodName_1=ID "(" ")";
 *
 **/

// methodName_1=ID ParameterList_1+=ParameterList_ | methodName_1=ID "(" ")"
protected class MethodDeclarator__Alternatives extends AlternativesToken {

	public MethodDeclarator__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MethodDeclarator__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodDeclarator_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// methodName_1=ID ParameterList_1+=ParameterList_
protected class MethodDeclarator__Group_0 extends GroupToken {
	
	public MethodDeclarator__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__ParameterList_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// methodName_1=ID
protected class MethodDeclarator__MethodName_1Assignment_0_0 extends AssignmentToken  {
	
	public MethodDeclarator__MethodName_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getMethodName_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("methodName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("methodName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodDeclarator_Access().getMethodName_1IDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMethodDeclarator_Access().getMethodName_1IDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// ParameterList_1+=ParameterList_
protected class MethodDeclarator__ParameterList_1Assignment_0_1 extends AssignmentToken  {
	
	public MethodDeclarator__ParameterList_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getParameterList_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ParameterList_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ParameterList_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterList_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMethodDeclarator_Access().getParameterList_1ParameterList_ParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MethodDeclarator__MethodName_1Assignment_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// methodName_1=ID "(" ")"
protected class MethodDeclarator__Group_1 extends GroupToken {
	
	public MethodDeclarator__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__RightParenthesisKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// methodName_1=ID
protected class MethodDeclarator__MethodName_1Assignment_1_0 extends AssignmentToken  {
	
	public MethodDeclarator__MethodName_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getMethodName_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("methodName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("methodName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodDeclarator_Access().getMethodName_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMethodDeclarator_Access().getMethodName_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class MethodDeclarator__LeftParenthesisKeyword_1_1 extends KeywordToken  {
	
	public MethodDeclarator__LeftParenthesisKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getLeftParenthesisKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__MethodName_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ")"
protected class MethodDeclarator__RightParenthesisKeyword_1_2 extends KeywordToken  {
	
	public MethodDeclarator__RightParenthesisKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodDeclarator_Access().getRightParenthesisKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MethodDeclarator__LeftParenthesisKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule MethodDeclarator_ ****************/


/************ begin Rule ParameterList_ ****************
 *
 * ParameterList_:
 * 	"(" Parameter_1+=Parameter_ Anonymous_parameterList_1_1+=Anonymous_parameterList_1_* ")";
 *
 **/

// "(" Parameter_1+=Parameter_ Anonymous_parameterList_1_1+=Anonymous_parameterList_1_* ")"
protected class ParameterList__Group extends GroupToken {
	
	public ParameterList__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getParameterList_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList__RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameterList_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "("
protected class ParameterList__LeftParenthesisKeyword_0 extends KeywordToken  {
	
	public ParameterList__LeftParenthesisKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterList_Access().getLeftParenthesisKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Parameter_1+=Parameter_
protected class ParameterList__Parameter_1Assignment_1 extends AssignmentToken  {
	
	public ParameterList__Parameter_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterList_Access().getParameter_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter__Anonymous_parameter_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Parameter_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Parameter_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameter_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterList_Access().getParameter_1Parameter_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList__LeftParenthesisKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_parameterList_1_1+=Anonymous_parameterList_1_*
protected class ParameterList__Anonymous_parameterList_1_1Assignment_2 extends AssignmentToken  {
	
	public ParameterList__Anonymous_parameterList_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterList_Access().getAnonymous_parameterList_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameterList_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_parameterList_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_parameterList_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_parameterList_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameterList_Access().getAnonymous_parameterList_1_1Anonymous_parameterList_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ParameterList__Anonymous_parameterList_1_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ParameterList__Parameter_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class ParameterList__RightParenthesisKeyword_3 extends KeywordToken  {
	
	public ParameterList__RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getParameterList_Access().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList__Anonymous_parameterList_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ParameterList__Parameter_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ParameterList_ ****************/


/************ begin Rule Anonymous_parameterList_1_ ****************
 *
 * Anonymous_parameterList_1_:
 * 	"," Parameter_1+=Parameter_;
 *
 **/

// "," Parameter_1+=Parameter_
protected class Anonymous_parameterList_1__Group extends GroupToken {
	
	public Anonymous_parameterList_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_parameterList_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameterList_1__Parameter_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_parameterList_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_parameterList_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_parameterList_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_parameterList_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Parameter_1+=Parameter_
protected class Anonymous_parameterList_1__Parameter_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_parameterList_1__Parameter_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameterList_1_Access().getParameter_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Parameter__Anonymous_parameter_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Parameter_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Parameter_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameter_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_parameterList_1_Access().getParameter_1Parameter_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_parameterList_1__CommaKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_parameterList_1_ ****************/


/************ begin Rule Parameter_ ****************
 *
 * Parameter_:
 * 	Anonymous_parameter_1_1+=Anonymous_parameter_1_;
 *
 **/

// Anonymous_parameter_1_1+=Anonymous_parameter_1_
protected class Parameter__Anonymous_parameter_1_1Assignment extends AssignmentToken  {
	
	public Parameter__Anonymous_parameter_1_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getParameter_Access().getAnonymous_parameter_1_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getParameter_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("Anonymous_parameter_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_parameter_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_parameter_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getParameter_Access().getAnonymous_parameter_1_1Anonymous_parameter_1_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Parameter_ ****************/


/************ begin Rule Anonymous_parameter_1_ ****************
 *
 * Anonymous_parameter_1_:
 * 	list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID;
 *
 **/

// list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID
protected class Anonymous_parameter_1__Alternatives extends AlternativesToken {

	public Anonymous_parameter_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_parameter_1__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_parameter_1__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_parameter_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// list_1?="[]" name_1=ID
protected class Anonymous_parameter_1__Group_0 extends GroupToken {
	
	public Anonymous_parameter_1__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Name_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// list_1?="[]"
protected class Anonymous_parameter_1__List_1Assignment_0_0 extends AssignmentToken  {
	
	public Anonymous_parameter_1__List_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getList_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_parameter_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_parameter_1__Name_1Assignment_0_1 extends AssignmentToken  {
	
	public Anonymous_parameter_1__Name_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getName_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__List_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_parameter_1_Access().getName_1IDTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_parameter_1_Access().getName_1IDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID list_1?="[]" name_1=ID
protected class Anonymous_parameter_1__Group_1 extends GroupToken {
	
	public Anonymous_parameter_1__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Name_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class Anonymous_parameter_1__Type_1Assignment_1_0 extends AssignmentToken  {
	
	public Anonymous_parameter_1__Type_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_parameter_1_Access().getType_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_parameter_1_Access().getType_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// list_1?="[]"
protected class Anonymous_parameter_1__List_1Assignment_1_1 extends AssignmentToken  {
	
	public Anonymous_parameter_1__List_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getList_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Type_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_parameter_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_parameter_1__Name_1Assignment_1_2 extends AssignmentToken  {
	
	public Anonymous_parameter_1__Name_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__List_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_parameter_1_Access().getName_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_parameter_1_Access().getName_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID? name_1=ID
protected class Anonymous_parameter_1__Group_2 extends GroupToken {
	
	public Anonymous_parameter_1__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Name_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID?
protected class Anonymous_parameter_1__Type_1Assignment_2_0 extends AssignmentToken  {
	
	public Anonymous_parameter_1__Type_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getType_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_parameter_1_Access().getType_1IDTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_parameter_1_Access().getType_1IDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_parameter_1__Name_1Assignment_2_1 extends AssignmentToken  {
	
	public Anonymous_parameter_1__Name_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_parameter_1_Access().getName_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_parameter_1__Type_1Assignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_parameter_1_Access().getName_1IDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_parameter_1_Access().getName_1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Anonymous_parameter_1_ ****************/


/************ begin Rule Association_ ****************
 *
 * Association_:
 * 	modifier_1="immutable"? AssociationEnd_1+=AssociationEnd_ arrow_1=("--" | "->" | "<-" | "><")
 * 	AssociationEnd_2+=AssociationEnd_ ";";
 *
 **/

// modifier_1="immutable"? AssociationEnd_1+=AssociationEnd_ arrow_1=("--" | "->" | "<-" | "><")
// AssociationEnd_2+=AssociationEnd_ ";"
protected class Association__Group extends GroupToken {
	
	public Association__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociation_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Association__SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssociation_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// modifier_1="immutable"?
protected class Association__Modifier_1Assignment_0 extends AssignmentToken  {
	
	public Association__Modifier_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociation_Access().getModifier_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modifier_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modifier_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAssociation_Access().getModifier_1ImmutableKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAssociation_Access().getModifier_1ImmutableKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// AssociationEnd_1+=AssociationEnd_
protected class Association__AssociationEnd_1Assignment_1 extends AssignmentToken  {
	
	public Association__AssociationEnd_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociation_Access().getAssociationEnd_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationEnd_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationEnd_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationEnd_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociation_Access().getAssociationEnd_1AssociationEnd_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Association__Modifier_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// arrow_1=("--" | "->" | "<-" | "><")
protected class Association__Arrow_1Assignment_2 extends AssignmentToken  {
	
	public Association__Arrow_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociation_Access().getArrow_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Association__AssociationEnd_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arrow_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arrow_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAssociation_Access().getArrow_1HyphenMinusHyphenMinusKeyword_2_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAssociation_Access().getArrow_1HyphenMinusHyphenMinusKeyword_2_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAssociation_Access().getArrow_1HyphenMinusGreaterThanSignKeyword_2_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAssociation_Access().getArrow_1HyphenMinusGreaterThanSignKeyword_2_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAssociation_Access().getArrow_1LessThanSignHyphenMinusKeyword_2_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAssociation_Access().getArrow_1LessThanSignHyphenMinusKeyword_2_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAssociation_Access().getArrow_1GreaterThanSignLessThanSignKeyword_2_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAssociation_Access().getArrow_1GreaterThanSignLessThanSignKeyword_2_0_3();
			return obj;
		}
		return null;
	}

}

// AssociationEnd_2+=AssociationEnd_
protected class Association__AssociationEnd_2Assignment_3 extends AssignmentToken  {
	
	public Association__AssociationEnd_2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociation_Access().getAssociationEnd_2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationEnd_2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationEnd_2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationEnd_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociation_Access().getAssociationEnd_2AssociationEnd_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Association__Arrow_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class Association__SemicolonKeyword_4 extends KeywordToken  {
	
	public Association__SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociation_Access().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Association__AssociationEnd_2Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Association_ ****************/


/************ begin Rule SymmetricReflexiveAssociation_ ****************
 *
 * SymmetricReflexiveAssociation_:
 * 	Multiplicity_1+=Multiplicity_ "self" roleName_1=ID ";";
 *
 **/

// Multiplicity_1+=Multiplicity_ "self" roleName_1=ID ";"
protected class SymmetricReflexiveAssociation__Group extends GroupToken {
	
	public SymmetricReflexiveAssociation__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSymmetricReflexiveAssociation_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SymmetricReflexiveAssociation__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSymmetricReflexiveAssociation_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Multiplicity_1+=Multiplicity_
protected class SymmetricReflexiveAssociation__Multiplicity_1Assignment_0 extends AssignmentToken  {
	
	public SymmetricReflexiveAssociation__Multiplicity_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSymmetricReflexiveAssociation_Access().getMultiplicity_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSymmetricReflexiveAssociation_Access().getMultiplicity_1Multiplicity_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "self"
protected class SymmetricReflexiveAssociation__SelfKeyword_1 extends KeywordToken  {
	
	public SymmetricReflexiveAssociation__SelfKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSymmetricReflexiveAssociation_Access().getSelfKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SymmetricReflexiveAssociation__Multiplicity_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// roleName_1=ID
protected class SymmetricReflexiveAssociation__RoleName_1Assignment_2 extends AssignmentToken  {
	
	public SymmetricReflexiveAssociation__RoleName_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSymmetricReflexiveAssociation_Access().getRoleName_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SymmetricReflexiveAssociation__SelfKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("roleName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("roleName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSymmetricReflexiveAssociation_Access().getRoleName_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSymmetricReflexiveAssociation_Access().getRoleName_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class SymmetricReflexiveAssociation__SemicolonKeyword_3 extends KeywordToken  {
	
	public SymmetricReflexiveAssociation__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSymmetricReflexiveAssociation_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SymmetricReflexiveAssociation__RoleName_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SymmetricReflexiveAssociation_ ****************/


/************ begin Rule InlineAssociation_ ****************
 *
 * InlineAssociation_:
 * 	modifier_1="immutable"? InlineAssociationEnd_1+=InlineAssociationEnd_ arrow_1=("--" | "->" | "<-" | "><")
 * 	AssociationEnd_1+=AssociationEnd_ ";";
 *
 **/

// modifier_1="immutable"? InlineAssociationEnd_1+=InlineAssociationEnd_ arrow_1=("--" | "->" | "<-" | "><")
// AssociationEnd_1+=AssociationEnd_ ";"
protected class InlineAssociation__Group extends GroupToken {
	
	public InlineAssociation__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInlineAssociation_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociation__SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInlineAssociation_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// modifier_1="immutable"?
protected class InlineAssociation__Modifier_1Assignment_0 extends AssignmentToken  {
	
	public InlineAssociation__Modifier_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociation_Access().getModifier_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modifier_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modifier_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociation_Access().getModifier_1ImmutableKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInlineAssociation_Access().getModifier_1ImmutableKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// InlineAssociationEnd_1+=InlineAssociationEnd_
protected class InlineAssociation__InlineAssociationEnd_1Assignment_1 extends AssignmentToken  {
	
	public InlineAssociation__InlineAssociationEnd_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociation_Access().getInlineAssociationEnd_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InlineAssociationEnd_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InlineAssociationEnd_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineAssociationEnd_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociation_Access().getInlineAssociationEnd_1InlineAssociationEnd_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InlineAssociation__Modifier_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// arrow_1=("--" | "->" | "<-" | "><")
protected class InlineAssociation__Arrow_1Assignment_2 extends AssignmentToken  {
	
	public InlineAssociation__Arrow_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociation_Access().getArrow_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociation__InlineAssociationEnd_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("arrow_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("arrow_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociation_Access().getArrow_1HyphenMinusHyphenMinusKeyword_2_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInlineAssociation_Access().getArrow_1HyphenMinusHyphenMinusKeyword_2_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociation_Access().getArrow_1HyphenMinusGreaterThanSignKeyword_2_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInlineAssociation_Access().getArrow_1HyphenMinusGreaterThanSignKeyword_2_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociation_Access().getArrow_1LessThanSignHyphenMinusKeyword_2_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInlineAssociation_Access().getArrow_1LessThanSignHyphenMinusKeyword_2_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociation_Access().getArrow_1GreaterThanSignLessThanSignKeyword_2_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInlineAssociation_Access().getArrow_1GreaterThanSignLessThanSignKeyword_2_0_3();
			return obj;
		}
		return null;
	}

}

// AssociationEnd_1+=AssociationEnd_
protected class InlineAssociation__AssociationEnd_1Assignment_3 extends AssignmentToken  {
	
	public InlineAssociation__AssociationEnd_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociation_Access().getAssociationEnd_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationEnd_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationEnd_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationEnd_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociation_Access().getAssociationEnd_1AssociationEnd_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InlineAssociation__Arrow_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class InlineAssociation__SemicolonKeyword_4 extends KeywordToken  {
	
	public InlineAssociation__SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInlineAssociation_Access().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociation__AssociationEnd_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule InlineAssociation_ ****************/


/************ begin Rule InlineAssociationEnd_ ****************
 *
 * InlineAssociationEnd_:
 * 	Multiplicity_1+=Multiplicity_ IsSorted_1+=IsSorted_ | Multiplicity_1+=Multiplicity_ roleName_1=ID
 * 	IsSorted_1+=IsSorted_ | Multiplicity_1+=Multiplicity_ roleName_1=ID?;
 *
 **/

// Multiplicity_1+=Multiplicity_ IsSorted_1+=IsSorted_ | Multiplicity_1+=Multiplicity_ roleName_1=ID IsSorted_1+=IsSorted_
// | Multiplicity_1+=Multiplicity_ roleName_1=ID?
protected class InlineAssociationEnd__Alternatives extends AlternativesToken {

	public InlineAssociationEnd__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InlineAssociationEnd__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new InlineAssociationEnd__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInlineAssociationEnd_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Multiplicity_1+=Multiplicity_ IsSorted_1+=IsSorted_
protected class InlineAssociationEnd__Group_0 extends GroupToken {
	
	public InlineAssociationEnd__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__IsSorted_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Multiplicity_1+=Multiplicity_
protected class InlineAssociationEnd__Multiplicity_1Assignment_0_0 extends AssignmentToken  {
	
	public InlineAssociationEnd__Multiplicity_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getMultiplicity_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociationEnd_Access().getMultiplicity_1Multiplicity_ParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// IsSorted_1+=IsSorted_
protected class InlineAssociationEnd__IsSorted_1Assignment_0_1 extends AssignmentToken  {
	
	public InlineAssociationEnd__IsSorted_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getIsSorted_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("IsSorted_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("IsSorted_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIsSorted_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociationEnd_Access().getIsSorted_1IsSorted_ParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InlineAssociationEnd__Multiplicity_1Assignment_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// Multiplicity_1+=Multiplicity_ roleName_1=ID IsSorted_1+=IsSorted_
protected class InlineAssociationEnd__Group_1 extends GroupToken {
	
	public InlineAssociationEnd__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__IsSorted_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Multiplicity_1+=Multiplicity_
protected class InlineAssociationEnd__Multiplicity_1Assignment_1_0 extends AssignmentToken  {
	
	public InlineAssociationEnd__Multiplicity_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getMultiplicity_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociationEnd_Access().getMultiplicity_1Multiplicity_ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// roleName_1=ID
protected class InlineAssociationEnd__RoleName_1Assignment_1_1 extends AssignmentToken  {
	
	public InlineAssociationEnd__RoleName_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getRoleName_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__Multiplicity_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("roleName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("roleName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInlineAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// IsSorted_1+=IsSorted_
protected class InlineAssociationEnd__IsSorted_1Assignment_1_2 extends AssignmentToken  {
	
	public InlineAssociationEnd__IsSorted_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getIsSorted_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("IsSorted_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("IsSorted_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIsSorted_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociationEnd_Access().getIsSorted_1IsSorted_ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InlineAssociationEnd__RoleName_1Assignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// Multiplicity_1+=Multiplicity_ roleName_1=ID?
protected class InlineAssociationEnd__Group_2 extends GroupToken {
	
	public InlineAssociationEnd__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__RoleName_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InlineAssociationEnd__Multiplicity_1Assignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// Multiplicity_1+=Multiplicity_
protected class InlineAssociationEnd__Multiplicity_1Assignment_2_0 extends AssignmentToken  {
	
	public InlineAssociationEnd__Multiplicity_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getMultiplicity_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineAssociationEnd_Access().getMultiplicity_1Multiplicity_ParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// roleName_1=ID?
protected class InlineAssociationEnd__RoleName_1Assignment_2_1 extends AssignmentToken  {
	
	public InlineAssociationEnd__RoleName_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineAssociationEnd_Access().getRoleName_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineAssociationEnd__Multiplicity_1Assignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("roleName_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("roleName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInlineAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInlineAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule InlineAssociationEnd_ ****************/


/************ begin Rule SingleAssociationEnd_ ****************
 *
 * SingleAssociationEnd_:
 * 	Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID) ";";
 *
 **/

// Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID) ";"
protected class SingleAssociationEnd__Group extends GroupToken {
	
	public SingleAssociationEnd__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingleAssociationEnd_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleAssociationEnd__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleAssociationEnd_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Multiplicity_1+=Multiplicity_
protected class SingleAssociationEnd__Multiplicity_1Assignment_0 extends AssignmentToken  {
	
	public SingleAssociationEnd__Multiplicity_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleAssociationEnd_Access().getMultiplicity_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSingleAssociationEnd_Access().getMultiplicity_1Multiplicity_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// type_1=ID roleName_1=ID
protected class SingleAssociationEnd__Group_1 extends GroupToken {
	
	public SingleAssociationEnd__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingleAssociationEnd_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleAssociationEnd__RoleName_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class SingleAssociationEnd__Type_1Assignment_1_0 extends AssignmentToken  {
	
	public SingleAssociationEnd__Type_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleAssociationEnd_Access().getType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleAssociationEnd__Multiplicity_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSingleAssociationEnd_Access().getType_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSingleAssociationEnd_Access().getType_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// roleName_1=ID
protected class SingleAssociationEnd__RoleName_1Assignment_1_1 extends AssignmentToken  {
	
	public SingleAssociationEnd__RoleName_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleAssociationEnd_Access().getRoleName_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleAssociationEnd__Type_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("roleName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("roleName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSingleAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSingleAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class SingleAssociationEnd__SemicolonKeyword_2 extends KeywordToken  {
	
	public SingleAssociationEnd__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSingleAssociationEnd_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleAssociationEnd__Group_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SingleAssociationEnd_ ****************/


/************ begin Rule AssociationEnd_ ****************
 *
 * AssociationEnd_:
 * 	Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID) | Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID)
 * 	IsSorted_1+=IsSorted_;
 *
 **/

// Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID) | Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID)
// IsSorted_1+=IsSorted_
protected class AssociationEnd__Alternatives extends AlternativesToken {

	public AssociationEnd__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AssociationEnd__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssociationEnd_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID)
protected class AssociationEnd__Group_0 extends GroupToken {
	
	public AssociationEnd__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Group_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Multiplicity_1+=Multiplicity_
protected class AssociationEnd__Multiplicity_1Assignment_0_0 extends AssignmentToken  {
	
	public AssociationEnd__Multiplicity_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getMultiplicity_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationEnd_Access().getMultiplicity_1Multiplicity_ParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// type_1=ID roleName_1=ID
protected class AssociationEnd__Group_0_1 extends GroupToken {
	
	public AssociationEnd__Group_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__RoleName_1Assignment_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class AssociationEnd__Type_1Assignment_0_1_0 extends AssignmentToken  {
	
	public AssociationEnd__Type_1Assignment_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getType_1Assignment_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Multiplicity_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationEnd_Access().getType_1IDTerminalRuleCall_0_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationEnd_Access().getType_1IDTerminalRuleCall_0_1_0_0();
			return obj;
		}
		return null;
	}

}

// roleName_1=ID
protected class AssociationEnd__RoleName_1Assignment_0_1_1 extends AssignmentToken  {
	
	public AssociationEnd__RoleName_1Assignment_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getRoleName_1Assignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Type_1Assignment_0_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("roleName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("roleName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_0_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_0_1_1_0();
			return obj;
		}
		return null;
	}

}



// Multiplicity_1+=Multiplicity_ (type_1=ID roleName_1=ID) IsSorted_1+=IsSorted_
protected class AssociationEnd__Group_1 extends GroupToken {
	
	public AssociationEnd__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__IsSorted_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Multiplicity_1+=Multiplicity_
protected class AssociationEnd__Multiplicity_1Assignment_1_0 extends AssignmentToken  {
	
	public AssociationEnd__Multiplicity_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getMultiplicity_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Multiplicity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Multiplicity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationEnd_Access().getMultiplicity_1Multiplicity_ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// type_1=ID roleName_1=ID
protected class AssociationEnd__Group_1_1 extends GroupToken {
	
	public AssociationEnd__Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__RoleName_1Assignment_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class AssociationEnd__Type_1Assignment_1_1_0 extends AssignmentToken  {
	
	public AssociationEnd__Type_1Assignment_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getType_1Assignment_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Multiplicity_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationEnd_Access().getType_1IDTerminalRuleCall_1_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationEnd_Access().getType_1IDTerminalRuleCall_1_1_0_0();
			return obj;
		}
		return null;
	}

}

// roleName_1=ID
protected class AssociationEnd__RoleName_1Assignment_1_1_1 extends AssignmentToken  {
	
	public AssociationEnd__RoleName_1Assignment_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getRoleName_1Assignment_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationEnd__Type_1Assignment_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("roleName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("roleName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_1_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationEnd_Access().getRoleName_1IDTerminalRuleCall_1_1_1_0();
			return obj;
		}
		return null;
	}

}


// IsSorted_1+=IsSorted_
protected class AssociationEnd__IsSorted_1Assignment_1_2 extends AssignmentToken  {
	
	public AssociationEnd__IsSorted_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationEnd_Access().getIsSorted_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("IsSorted_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("IsSorted_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIsSorted_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationEnd_Access().getIsSorted_1IsSorted_ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssociationEnd__Group_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AssociationEnd_ ****************/


/************ begin Rule Multiplicity_ ****************
 *
 * Multiplicity_:
 * 	bound_1="*" | lowerBound_1=ID ".." upperBound_1=ID | bound_int=INT;
 *
 **/

// bound_1="*" | lowerBound_1=ID ".." upperBound_1=ID | bound_int=INT
protected class Multiplicity__Alternatives extends AlternativesToken {

	public Multiplicity__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__Bound_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplicity__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Multiplicity__Bound_intAssignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicity_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// bound_1="*"
protected class Multiplicity__Bound_1Assignment_0 extends AssignmentToken  {
	
	public Multiplicity__Bound_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getBound_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bound_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bound_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicity_Access().getBound_1AsteriskKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMultiplicity_Access().getBound_1AsteriskKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// lowerBound_1=ID ".." upperBound_1=ID
protected class Multiplicity__Group_1 extends GroupToken {
	
	public Multiplicity__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__UpperBound_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// lowerBound_1=ID
protected class Multiplicity__LowerBound_1Assignment_1_0 extends AssignmentToken  {
	
	public Multiplicity__LowerBound_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getLowerBound_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lowerBound_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lowerBound_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicity_Access().getLowerBound_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultiplicity_Access().getLowerBound_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// ".."
protected class Multiplicity__FullStopFullStopKeyword_1_1 extends KeywordToken  {
	
	public Multiplicity__FullStopFullStopKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getFullStopFullStopKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__LowerBound_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// upperBound_1=ID
protected class Multiplicity__UpperBound_1Assignment_1_2 extends AssignmentToken  {
	
	public Multiplicity__UpperBound_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getUpperBound_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplicity__FullStopFullStopKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("upperBound_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("upperBound_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicity_Access().getUpperBound_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultiplicity_Access().getUpperBound_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// bound_int=INT
protected class Multiplicity__Bound_intAssignment_2 extends AssignmentToken  {
	
	public Multiplicity__Bound_intAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicity_Access().getBound_intAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("bound_int",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("bound_int");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultiplicity_Access().getBound_intINTTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultiplicity_Access().getBound_intINTTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Multiplicity_ ****************/


/************ begin Rule IsSorted_ ****************
 *
 * IsSorted_:
 * 	"sorted" "{" priority_1=ID "}";
 *
 **/

// "sorted" "{" priority_1=ID "}"
protected class IsSorted__Group extends GroupToken {
	
	public IsSorted__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIsSorted_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIsSorted_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "sorted"
protected class IsSorted__SortedKeyword_0 extends KeywordToken  {
	
	public IsSorted__SortedKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIsSorted_Access().getSortedKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class IsSorted__LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public IsSorted__LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIsSorted_Access().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__SortedKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// priority_1=ID
protected class IsSorted__Priority_1Assignment_2 extends AssignmentToken  {
	
	public IsSorted__Priority_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIsSorted_Access().getPriority_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("priority_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("priority_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIsSorted_Access().getPriority_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIsSorted_Access().getPriority_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class IsSorted__RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public IsSorted__RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIsSorted_Access().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsSorted__Priority_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule IsSorted_ ****************/


/************ begin Rule Attribute_ ****************
 *
 * Attribute_:
 * 	SimpleAttribute_1+=SimpleAttribute_ | AutouniqueAttribute_1+=AutouniqueAttribute_ |
 * 	DerivedAttribute_1+=DerivedAttribute_ | ComplexAttribute_1+=ComplexAttribute_;
 *
 **/

// SimpleAttribute_1+=SimpleAttribute_ | AutouniqueAttribute_1+=AutouniqueAttribute_ |
// DerivedAttribute_1+=DerivedAttribute_ | ComplexAttribute_1+=ComplexAttribute_
protected class Attribute__Alternatives extends AlternativesToken {

	public Attribute__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAttribute_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Attribute__SimpleAttribute_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Attribute__AutouniqueAttribute_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Attribute__DerivedAttribute_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Attribute__ComplexAttribute_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAttribute_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleAttribute_1+=SimpleAttribute_
protected class Attribute__SimpleAttribute_1Assignment_0 extends AssignmentToken  {
	
	public Attribute__SimpleAttribute_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttribute_Access().getSimpleAttribute_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttribute__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SimpleAttribute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SimpleAttribute_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleAttribute_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttribute_Access().getSimpleAttribute_1SimpleAttribute_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AutouniqueAttribute_1+=AutouniqueAttribute_
protected class Attribute__AutouniqueAttribute_1Assignment_1 extends AssignmentToken  {
	
	public Attribute__AutouniqueAttribute_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttribute_Access().getAutouniqueAttribute_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutouniqueAttribute__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AutouniqueAttribute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AutouniqueAttribute_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutouniqueAttribute_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttribute_Access().getAutouniqueAttribute_1AutouniqueAttribute_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// DerivedAttribute_1+=DerivedAttribute_
protected class Attribute__DerivedAttribute_1Assignment_2 extends AssignmentToken  {
	
	public Attribute__DerivedAttribute_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttribute_Access().getDerivedAttribute_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DerivedAttribute__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("DerivedAttribute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("DerivedAttribute_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDerivedAttribute_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttribute_Access().getDerivedAttribute_1DerivedAttribute_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ComplexAttribute_1+=ComplexAttribute_
protected class Attribute__ComplexAttribute_1Assignment_3 extends AssignmentToken  {
	
	public Attribute__ComplexAttribute_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAttribute_Access().getComplexAttribute_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComplexAttribute__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ComplexAttribute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ComplexAttribute_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComplexAttribute_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAttribute_Access().getComplexAttribute_1ComplexAttribute_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Attribute_ ****************/


/************ begin Rule SimpleAttribute_ ****************
 *
 * SimpleAttribute_:
 * 	name_1=nameID ";";
 *
 **/

// name_1=nameID ";"
protected class SimpleAttribute__Group extends GroupToken {
	
	public SimpleAttribute__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAttribute_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttribute__SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleAttribute_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=nameID
protected class SimpleAttribute__Name_1Assignment_0 extends AssignmentToken  {
	
	public SimpleAttribute__Name_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttribute_Access().getName_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAttribute_Access().getName_1NameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleAttribute_Access().getName_1NameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class SimpleAttribute__SemicolonKeyword_1 extends KeywordToken  {
	
	public SimpleAttribute__SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttribute_Access().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttribute__Name_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule SimpleAttribute_ ****************/


/************ begin Rule AutouniqueAttribute_ ****************
 *
 * AutouniqueAttribute_:
 * 	autounique_1?="autounique" name_1=ID ";";
 *
 **/

// autounique_1?="autounique" name_1=ID ";"
protected class AutouniqueAttribute__Group extends GroupToken {
	
	public AutouniqueAttribute__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAutouniqueAttribute_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutouniqueAttribute__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAutouniqueAttribute_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// autounique_1?="autounique"
protected class AutouniqueAttribute__Autounique_1Assignment_0 extends AssignmentToken  {
	
	public AutouniqueAttribute__Autounique_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutouniqueAttribute_Access().getAutounique_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("autounique_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("autounique_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAutouniqueAttribute_Access().getAutounique_1AutouniqueKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class AutouniqueAttribute__Name_1Assignment_1 extends AssignmentToken  {
	
	public AutouniqueAttribute__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutouniqueAttribute_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutouniqueAttribute__Autounique_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAutouniqueAttribute_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAutouniqueAttribute_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class AutouniqueAttribute__SemicolonKeyword_2 extends KeywordToken  {
	
	public AutouniqueAttribute__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAutouniqueAttribute_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutouniqueAttribute__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AutouniqueAttribute_ ****************/


/************ begin Rule DerivedAttribute_ ****************
 *
 * DerivedAttribute_:
 * 	modifier_1=("immutable" | "settable" | "internal" | "defaulted" | "const")?
 * 	Anonymous_derivedAttribute_1_1+=Anonymous_derivedAttribute_1_ "="
 * 	Anonymous_derivedAttribute_2_1+=Anonymous_derivedAttribute_2_? "{" code_1=block "}"
 * 	Anonymous_derivedAttribute_3_1+=Anonymous_derivedAttribute_3_*;
 *
 **/

// modifier_1=("immutable" | "settable" | "internal" | "defaulted" | "const")?
// Anonymous_derivedAttribute_1_1+=Anonymous_derivedAttribute_1_ "="
// Anonymous_derivedAttribute_2_1+=Anonymous_derivedAttribute_2_? "{" code_1=block "}"
// Anonymous_derivedAttribute_3_1+=Anonymous_derivedAttribute_3_*
protected class DerivedAttribute__Group extends GroupToken {
	
	public DerivedAttribute__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DerivedAttribute__Anonymous_derivedAttribute_3_1Assignment_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DerivedAttribute__RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDerivedAttribute_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// modifier_1=("immutable" | "settable" | "internal" | "defaulted" | "const")?
protected class DerivedAttribute__Modifier_1Assignment_0 extends AssignmentToken  {
	
	public DerivedAttribute__Modifier_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getModifier_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modifier_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modifier_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDerivedAttribute_Access().getModifier_1ImmutableKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDerivedAttribute_Access().getModifier_1ImmutableKeyword_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDerivedAttribute_Access().getModifier_1SettableKeyword_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDerivedAttribute_Access().getModifier_1SettableKeyword_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDerivedAttribute_Access().getModifier_1InternalKeyword_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDerivedAttribute_Access().getModifier_1InternalKeyword_0_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDerivedAttribute_Access().getModifier_1DefaultedKeyword_0_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDerivedAttribute_Access().getModifier_1DefaultedKeyword_0_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getDerivedAttribute_Access().getModifier_1ConstKeyword_0_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getDerivedAttribute_Access().getModifier_1ConstKeyword_0_0_4();
			return obj;
		}
		return null;
	}

}

// Anonymous_derivedAttribute_1_1+=Anonymous_derivedAttribute_1_
protected class DerivedAttribute__Anonymous_derivedAttribute_1_1Assignment_1 extends AssignmentToken  {
	
	public DerivedAttribute__Anonymous_derivedAttribute_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getAnonymous_derivedAttribute_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_derivedAttribute_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_derivedAttribute_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_derivedAttribute_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDerivedAttribute_Access().getAnonymous_derivedAttribute_1_1Anonymous_derivedAttribute_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DerivedAttribute__Modifier_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "="
protected class DerivedAttribute__EqualsSignKeyword_2 extends KeywordToken  {
	
	public DerivedAttribute__EqualsSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getEqualsSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DerivedAttribute__Anonymous_derivedAttribute_1_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_derivedAttribute_2_1+=Anonymous_derivedAttribute_2_?
protected class DerivedAttribute__Anonymous_derivedAttribute_2_1Assignment_3 extends AssignmentToken  {
	
	public DerivedAttribute__Anonymous_derivedAttribute_2_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getAnonymous_derivedAttribute_2_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_derivedAttribute_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_derivedAttribute_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_derivedAttribute_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDerivedAttribute_Access().getAnonymous_derivedAttribute_2_1Anonymous_derivedAttribute_2_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DerivedAttribute__EqualsSignKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class DerivedAttribute__LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public DerivedAttribute__LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DerivedAttribute__Anonymous_derivedAttribute_2_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DerivedAttribute__EqualsSignKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class DerivedAttribute__Code_1Assignment_5 extends AssignmentToken  {
	
	public DerivedAttribute__Code_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getCode_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DerivedAttribute__LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDerivedAttribute_Access().getCode_1BlockTerminalRuleCall_5_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDerivedAttribute_Access().getCode_1BlockTerminalRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class DerivedAttribute__RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public DerivedAttribute__RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DerivedAttribute__Code_1Assignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_derivedAttribute_3_1+=Anonymous_derivedAttribute_3_*
protected class DerivedAttribute__Anonymous_derivedAttribute_3_1Assignment_7 extends AssignmentToken  {
	
	public DerivedAttribute__Anonymous_derivedAttribute_3_1Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDerivedAttribute_Access().getAnonymous_derivedAttribute_3_1Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_3__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_derivedAttribute_3_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_derivedAttribute_3_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_derivedAttribute_3_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDerivedAttribute_Access().getAnonymous_derivedAttribute_3_1Anonymous_derivedAttribute_3_ParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DerivedAttribute__Anonymous_derivedAttribute_3_1Assignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new DerivedAttribute__RightCurlyBracketKeyword_6(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule DerivedAttribute_ ****************/


/************ begin Rule Anonymous_derivedAttribute_1_ ****************
 *
 * Anonymous_derivedAttribute_1_:
 * 	list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID;
 *
 **/

// list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID
protected class Anonymous_derivedAttribute_1__Alternatives extends AlternativesToken {

	public Anonymous_derivedAttribute_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_derivedAttribute_1__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_derivedAttribute_1__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_derivedAttribute_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// list_1?="[]" name_1=ID
protected class Anonymous_derivedAttribute_1__Group_0 extends GroupToken {
	
	public Anonymous_derivedAttribute_1__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Name_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// list_1?="[]"
protected class Anonymous_derivedAttribute_1__List_1Assignment_0_0 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__List_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getList_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_derivedAttribute_1__Name_1Assignment_0_1 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__Name_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__List_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1IDTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1IDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID list_1?="[]" name_1=ID
protected class Anonymous_derivedAttribute_1__Group_1 extends GroupToken {
	
	public Anonymous_derivedAttribute_1__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Name_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class Anonymous_derivedAttribute_1__Type_1Assignment_1_0 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__Type_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_derivedAttribute_1_Access().getType_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getType_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// list_1?="[]"
protected class Anonymous_derivedAttribute_1__List_1Assignment_1_1 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__List_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getList_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Type_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_derivedAttribute_1__Name_1Assignment_1_2 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__Name_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__List_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID? name_1=ID
protected class Anonymous_derivedAttribute_1__Group_2 extends GroupToken {
	
	public Anonymous_derivedAttribute_1__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Name_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID?
protected class Anonymous_derivedAttribute_1__Type_1Assignment_2_0 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__Type_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getType_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_derivedAttribute_1_Access().getType_1IDTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getType_1IDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_derivedAttribute_1__Name_1Assignment_2_1 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_1__Name_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_1__Type_1Assignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1IDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_derivedAttribute_1_Access().getName_1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Anonymous_derivedAttribute_1_ ****************/


/************ begin Rule Anonymous_derivedAttribute_2_ ****************
 *
 * Anonymous_derivedAttribute_2_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_derivedAttribute_2__Group extends GroupToken {
	
	public Anonymous_derivedAttribute_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_2__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_derivedAttribute_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_derivedAttribute_2__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_2__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_2_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_derivedAttribute_2_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_derivedAttribute_2__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_2__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_2_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_derivedAttribute_2_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_derivedAttribute_2__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_derivedAttribute_2_ ****************/


/************ begin Rule Anonymous_derivedAttribute_3_ ****************
 *
 * Anonymous_derivedAttribute_3_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_derivedAttribute_3__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_derivedAttribute_3__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_derivedAttribute_3_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_derivedAttribute_3_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_derivedAttribute_3_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_derivedAttribute_3_ ****************/


/************ begin Rule ComplexAttribute_ ****************
 *
 * ComplexAttribute_:
 * 	unique_1?="unique"? lazy_1?="lazy"? modifier_1=("immutable" | "settable" | "internal" | "defaulted" | "const")?
 * 	Anonymous_complexAttribute_1_1+=Anonymous_complexAttribute_1_
 * 	Anonymous_complexAttribute_2_1+=Anonymous_complexAttribute_2_? ";";
 *
 **/

// unique_1?="unique"? lazy_1?="lazy"? modifier_1=("immutable" | "settable" | "internal" | "defaulted" | "const")?
// Anonymous_complexAttribute_1_1+=Anonymous_complexAttribute_1_
// Anonymous_complexAttribute_2_1+=Anonymous_complexAttribute_2_? ";"
protected class ComplexAttribute__Group extends GroupToken {
	
	public ComplexAttribute__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComplexAttribute__SemicolonKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getComplexAttribute_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// unique_1?="unique"?
protected class ComplexAttribute__Unique_1Assignment_0 extends AssignmentToken  {
	
	public ComplexAttribute__Unique_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getUnique_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("unique_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("unique_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getUnique_1UniqueKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// lazy_1?="lazy"?
protected class ComplexAttribute__Lazy_1Assignment_1 extends AssignmentToken  {
	
	public ComplexAttribute__Lazy_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getLazy_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComplexAttribute__Unique_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("lazy_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lazy_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getLazy_1LazyKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// modifier_1=("immutable" | "settable" | "internal" | "defaulted" | "const")?
protected class ComplexAttribute__Modifier_1Assignment_2 extends AssignmentToken  {
	
	public ComplexAttribute__Modifier_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getModifier_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComplexAttribute__Lazy_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComplexAttribute__Unique_1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("modifier_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("modifier_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getComplexAttribute_Access().getModifier_1ImmutableKeyword_2_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getModifier_1ImmutableKeyword_2_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getComplexAttribute_Access().getModifier_1SettableKeyword_2_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getModifier_1SettableKeyword_2_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getComplexAttribute_Access().getModifier_1InternalKeyword_2_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getModifier_1InternalKeyword_2_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getComplexAttribute_Access().getModifier_1DefaultedKeyword_2_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getModifier_1DefaultedKeyword_2_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getComplexAttribute_Access().getModifier_1ConstKeyword_2_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getComplexAttribute_Access().getModifier_1ConstKeyword_2_0_4();
			return obj;
		}
		return null;
	}

}

// Anonymous_complexAttribute_1_1+=Anonymous_complexAttribute_1_
protected class ComplexAttribute__Anonymous_complexAttribute_1_1Assignment_3 extends AssignmentToken  {
	
	public ComplexAttribute__Anonymous_complexAttribute_1_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getAnonymous_complexAttribute_1_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_complexAttribute_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_complexAttribute_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_complexAttribute_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComplexAttribute_Access().getAnonymous_complexAttribute_1_1Anonymous_complexAttribute_1_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComplexAttribute__Modifier_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ComplexAttribute__Lazy_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ComplexAttribute__Unique_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 3, consumed);
		}	
	}	
}

// Anonymous_complexAttribute_2_1+=Anonymous_complexAttribute_2_?
protected class ComplexAttribute__Anonymous_complexAttribute_2_1Assignment_4 extends AssignmentToken  {
	
	public ComplexAttribute__Anonymous_complexAttribute_2_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getAnonymous_complexAttribute_2_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_complexAttribute_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_complexAttribute_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_complexAttribute_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getComplexAttribute_Access().getAnonymous_complexAttribute_2_1Anonymous_complexAttribute_2_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ComplexAttribute__Anonymous_complexAttribute_1_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class ComplexAttribute__SemicolonKeyword_5 extends KeywordToken  {
	
	public ComplexAttribute__SemicolonKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getComplexAttribute_Access().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ComplexAttribute__Anonymous_complexAttribute_2_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ComplexAttribute__Anonymous_complexAttribute_1_1Assignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule ComplexAttribute_ ****************/


/************ begin Rule Anonymous_complexAttribute_1_ ****************
 *
 * Anonymous_complexAttribute_1_:
 * 	list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID;
 *
 **/

// list_1?="[]" name_1=ID | type_1=ID list_1?="[]" name_1=ID | type_1=ID? name_1=ID
protected class Anonymous_complexAttribute_1__Alternatives extends AlternativesToken {

	public Anonymous_complexAttribute_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_complexAttribute_1__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_complexAttribute_1__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_complexAttribute_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// list_1?="[]" name_1=ID
protected class Anonymous_complexAttribute_1__Group_0 extends GroupToken {
	
	public Anonymous_complexAttribute_1__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Name_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// list_1?="[]"
protected class Anonymous_complexAttribute_1__List_1Assignment_0_0 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__List_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getList_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_0_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_complexAttribute_1__Name_1Assignment_0_1 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__Name_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__List_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1IDTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1IDTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID list_1?="[]" name_1=ID
protected class Anonymous_complexAttribute_1__Group_1 extends GroupToken {
	
	public Anonymous_complexAttribute_1__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Name_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID
protected class Anonymous_complexAttribute_1__Type_1Assignment_1_0 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__Type_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_complexAttribute_1_Access().getType_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getType_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// list_1?="[]"
protected class Anonymous_complexAttribute_1__List_1Assignment_1_1 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__List_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getList_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Type_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("list_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("list_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getList_1LeftSquareBracketRightSquareBracketKeyword_1_1_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_complexAttribute_1__Name_1Assignment_1_2 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__Name_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__List_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// type_1=ID? name_1=ID
protected class Anonymous_complexAttribute_1__Group_2 extends GroupToken {
	
	public Anonymous_complexAttribute_1__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Name_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// type_1=ID?
protected class Anonymous_complexAttribute_1__Type_1Assignment_2_0 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__Type_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getType_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_complexAttribute_1_Access().getType_1IDTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getType_1IDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class Anonymous_complexAttribute_1__Name_1Assignment_2_1 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_1__Name_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_1__Type_1Assignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1IDTerminalRuleCall_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_complexAttribute_1_Access().getName_1IDTerminalRuleCall_2_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Anonymous_complexAttribute_1_ ****************/


/************ begin Rule Anonymous_complexAttribute_2_ ****************
 *
 * Anonymous_complexAttribute_2_:
 * 	"=" value_1=block;
 *
 **/

// "=" value_1=block
protected class Anonymous_complexAttribute_2__Group extends GroupToken {
	
	public Anonymous_complexAttribute_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_2__Value_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_complexAttribute_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "="
protected class Anonymous_complexAttribute_2__EqualsSignKeyword_0 extends KeywordToken  {
	
	public Anonymous_complexAttribute_2__EqualsSignKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_2_Access().getEqualsSignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// value_1=block
protected class Anonymous_complexAttribute_2__Value_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_complexAttribute_2__Value_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_complexAttribute_2_Access().getValue_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_complexAttribute_2__EqualsSignKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_complexAttribute_2_Access().getValue_1BlockTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_complexAttribute_2_Access().getValue_1BlockTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_complexAttribute_2_ ****************/



/************ begin Rule Key_ ****************
 *
 * Key_:
 * 	"key" "{" keyId_1=ID Anonymous_key_1_1+=Anonymous_key_1_* "}";
 *
 **/

// "key" "{" keyId_1=ID Anonymous_key_1_1+=Anonymous_key_1_* "}"
protected class Key__Group extends GroupToken {
	
	public Key__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getKey_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Key__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKey_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "key"
protected class Key__KeyKeyword_0 extends KeywordToken  {
	
	public Key__KeyKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKey_Access().getKeyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class Key__LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public Key__LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKey_Access().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Key__KeyKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// keyId_1=ID
protected class Key__KeyId_1Assignment_2 extends AssignmentToken  {
	
	public Key__KeyId_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKey_Access().getKeyId_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Key__LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keyId_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keyId_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getKey_Access().getKeyId_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getKey_Access().getKeyId_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_key_1_1+=Anonymous_key_1_*
protected class Key__Anonymous_key_1_1Assignment_3 extends AssignmentToken  {
	
	public Key__Anonymous_key_1_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKey_Access().getAnonymous_key_1_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_key_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_key_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_key_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_key_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getKey_Access().getAnonymous_key_1_1Anonymous_key_1_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Key__Anonymous_key_1_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Key__KeyId_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Key__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Key__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKey_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Key__Anonymous_key_1_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Key__KeyId_1Assignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule Key_ ****************/


/************ begin Rule Anonymous_key_1_ ****************
 *
 * Anonymous_key_1_:
 * 	"," keyId_1=ID;
 *
 **/

// "," keyId_1=ID
protected class Anonymous_key_1__Group extends GroupToken {
	
	public Anonymous_key_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_key_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_key_1__KeyId_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_key_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_key_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_key_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_key_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// keyId_1=ID
protected class Anonymous_key_1__KeyId_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_key_1__KeyId_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_key_1_Access().getKeyId_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_key_1__CommaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keyId_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keyId_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_key_1_Access().getKeyId_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_key_1_Access().getKeyId_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_key_1_ ****************/


/************ begin Rule Depend_ ****************
 *
 * Depend_:
 * 	"depend" depend_1=ID ";";
 *
 **/

// "depend" depend_1=ID ";"
protected class Depend__Group extends GroupToken {
	
	public Depend__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDepend_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Depend__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDepend_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "depend"
protected class Depend__DependKeyword_0 extends KeywordToken  {
	
	public Depend__DependKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDepend_Access().getDependKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// depend_1=ID
protected class Depend__Depend_1Assignment_1 extends AssignmentToken  {
	
	public Depend__Depend_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDepend_Access().getDepend_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Depend__DependKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("depend_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("depend_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDepend_Access().getDepend_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDepend_Access().getDepend_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Depend__SemicolonKeyword_2 extends KeywordToken  {
	
	public Depend__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDepend_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Depend__Depend_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Depend_ ****************/


/************ begin Rule ExtraCode_ ****************
 *
 * ExtraCode_:
 * 	extraCode_1=block;
 *
 **/

// extraCode_1=block
protected class ExtraCode__ExtraCode_1Assignment extends AssignmentToken  {
	
	public ExtraCode__ExtraCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtraCode_Access().getExtraCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExtraCode_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("extraCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extraCode_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExtraCode_Access().getExtraCode_1BlockTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExtraCode_Access().getExtraCode_1BlockTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule ExtraCode_ ****************/


/************ begin Rule SoftwarePattern_ ****************
 *
 * SoftwarePattern_:
 * 	IsA_1+=IsA_ | Singleton_1+=Singleton_ | Immutable_1+=Immutable_ | KeyDefinition_1+=KeyDefinition_ |
 * 	CodeInjection_1+=CodeInjection_;
 *
 **/

// IsA_1+=IsA_ | Singleton_1+=Singleton_ | Immutable_1+=Immutable_ | KeyDefinition_1+=KeyDefinition_ |
// CodeInjection_1+=CodeInjection_
protected class SoftwarePattern__Alternatives extends AlternativesToken {

	public SoftwarePattern__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSoftwarePattern_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SoftwarePattern__IsA_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SoftwarePattern__Singleton_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SoftwarePattern__Immutable_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SoftwarePattern__KeyDefinition_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new SoftwarePattern__CodeInjection_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSoftwarePattern_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IsA_1+=IsA_
protected class SoftwarePattern__IsA_1Assignment_0 extends AssignmentToken  {
	
	public SoftwarePattern__IsA_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSoftwarePattern_Access().getIsA_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsA__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("IsA_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("IsA_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIsA_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSoftwarePattern_Access().getIsA_1IsA_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Singleton_1+=Singleton_
protected class SoftwarePattern__Singleton_1Assignment_1 extends AssignmentToken  {
	
	public SoftwarePattern__Singleton_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSoftwarePattern_Access().getSingleton_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Singleton__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Singleton_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Singleton_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSingleton_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSoftwarePattern_Access().getSingleton_1Singleton_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Immutable_1+=Immutable_
protected class SoftwarePattern__Immutable_1Assignment_2 extends AssignmentToken  {
	
	public SoftwarePattern__Immutable_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSoftwarePattern_Access().getImmutable_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Immutable__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Immutable_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Immutable_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getImmutable_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSoftwarePattern_Access().getImmutable_1Immutable_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// KeyDefinition_1+=KeyDefinition_
protected class SoftwarePattern__KeyDefinition_1Assignment_3 extends AssignmentToken  {
	
	public SoftwarePattern__KeyDefinition_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSoftwarePattern_Access().getKeyDefinition_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeyDefinition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("KeyDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("KeyDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeyDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSoftwarePattern_Access().getKeyDefinition_1KeyDefinition_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeInjection_1+=CodeInjection_
protected class SoftwarePattern__CodeInjection_1Assignment_4 extends AssignmentToken  {
	
	public SoftwarePattern__CodeInjection_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSoftwarePattern_Access().getCodeInjection_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeInjection__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeInjection_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeInjection_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeInjection_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSoftwarePattern_Access().getCodeInjection_1CodeInjection_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule SoftwarePattern_ ****************/


/************ begin Rule IsA_ ****************
 *
 * IsA_:
 * 	SingleIsA_1+=SingleIsA_ | MultipleIsA_1+=MultipleIsA_;
 *
 **/

// SingleIsA_1+=SingleIsA_ | MultipleIsA_1+=MultipleIsA_
protected class IsA__Alternatives extends AlternativesToken {

	public IsA__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getIsA_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IsA__SingleIsA_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new IsA__MultipleIsA_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIsA_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SingleIsA_1+=SingleIsA_
protected class IsA__SingleIsA_1Assignment_0 extends AssignmentToken  {
	
	public IsA__SingleIsA_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIsA_Access().getSingleIsA_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleIsA__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SingleIsA_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SingleIsA_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSingleIsA_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIsA_Access().getSingleIsA_1SingleIsA_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// MultipleIsA_1+=MultipleIsA_
protected class IsA__MultipleIsA_1Assignment_1 extends AssignmentToken  {
	
	public IsA__MultipleIsA_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIsA_Access().getMultipleIsA_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultipleIsA__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("MultipleIsA_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MultipleIsA_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultipleIsA_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIsA_Access().getMultipleIsA_1MultipleIsA_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule IsA_ ****************/


/************ begin Rule SingleIsA_ ****************
 *
 * SingleIsA_:
 * 	"isA" extendsName_1=ID Anonymous_singleIsA_1_1+=Anonymous_singleIsA_1_* ";";
 *
 **/

// "isA" extendsName_1=ID Anonymous_singleIsA_1_1+=Anonymous_singleIsA_1_* ";"
protected class SingleIsA__Group extends GroupToken {
	
	public SingleIsA__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingleIsA_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleIsA__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleIsA_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "isA"
protected class SingleIsA__IsAKeyword_0 extends KeywordToken  {
	
	public SingleIsA__IsAKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSingleIsA_Access().getIsAKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// extendsName_1=ID
protected class SingleIsA__ExtendsName_1Assignment_1 extends AssignmentToken  {
	
	public SingleIsA__ExtendsName_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleIsA_Access().getExtendsName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleIsA__IsAKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extendsName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extendsName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSingleIsA_Access().getExtendsName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSingleIsA_Access().getExtendsName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_singleIsA_1_1+=Anonymous_singleIsA_1_*
protected class SingleIsA__Anonymous_singleIsA_1_1Assignment_2 extends AssignmentToken  {
	
	public SingleIsA__Anonymous_singleIsA_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleIsA_Access().getAnonymous_singleIsA_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_singleIsA_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_singleIsA_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_singleIsA_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_singleIsA_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSingleIsA_Access().getAnonymous_singleIsA_1_1Anonymous_singleIsA_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SingleIsA__Anonymous_singleIsA_1_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SingleIsA__ExtendsName_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class SingleIsA__SemicolonKeyword_3 extends KeywordToken  {
	
	public SingleIsA__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSingleIsA_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SingleIsA__Anonymous_singleIsA_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SingleIsA__ExtendsName_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule SingleIsA_ ****************/


/************ begin Rule Anonymous_singleIsA_1_ ****************
 *
 * Anonymous_singleIsA_1_:
 * 	"," "isA" extendsName_1=ID;
 *
 **/

// "," "isA" extendsName_1=ID
protected class Anonymous_singleIsA_1__Group extends GroupToken {
	
	public Anonymous_singleIsA_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_singleIsA_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_singleIsA_1__ExtendsName_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_singleIsA_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_singleIsA_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_singleIsA_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_singleIsA_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "isA"
protected class Anonymous_singleIsA_1__IsAKeyword_1 extends KeywordToken  {
	
	public Anonymous_singleIsA_1__IsAKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_singleIsA_1_Access().getIsAKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_singleIsA_1__CommaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// extendsName_1=ID
protected class Anonymous_singleIsA_1__ExtendsName_1Assignment_2 extends AssignmentToken  {
	
	public Anonymous_singleIsA_1__ExtendsName_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_singleIsA_1_Access().getExtendsName_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_singleIsA_1__IsAKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extendsName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extendsName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_singleIsA_1_Access().getExtendsName_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_singleIsA_1_Access().getExtendsName_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_singleIsA_1_ ****************/


/************ begin Rule MultipleIsA_ ****************
 *
 * MultipleIsA_:
 * 	"isA" extendsName_1=ID Anonymous_multipleIsA_1_1+=Anonymous_multipleIsA_1_* ";";
 *
 **/

// "isA" extendsName_1=ID Anonymous_multipleIsA_1_1+=Anonymous_multipleIsA_1_* ";"
protected class MultipleIsA__Group extends GroupToken {
	
	public MultipleIsA__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultipleIsA_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultipleIsA__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultipleIsA_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "isA"
protected class MultipleIsA__IsAKeyword_0 extends KeywordToken  {
	
	public MultipleIsA__IsAKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultipleIsA_Access().getIsAKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// extendsName_1=ID
protected class MultipleIsA__ExtendsName_1Assignment_1 extends AssignmentToken  {
	
	public MultipleIsA__ExtendsName_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultipleIsA_Access().getExtendsName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultipleIsA__IsAKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extendsName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extendsName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMultipleIsA_Access().getExtendsName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMultipleIsA_Access().getExtendsName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_multipleIsA_1_1+=Anonymous_multipleIsA_1_*
protected class MultipleIsA__Anonymous_multipleIsA_1_1Assignment_2 extends AssignmentToken  {
	
	public MultipleIsA__Anonymous_multipleIsA_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultipleIsA_Access().getAnonymous_multipleIsA_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_multipleIsA_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_multipleIsA_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_multipleIsA_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_multipleIsA_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultipleIsA_Access().getAnonymous_multipleIsA_1_1Anonymous_multipleIsA_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new MultipleIsA__Anonymous_multipleIsA_1_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new MultipleIsA__ExtendsName_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class MultipleIsA__SemicolonKeyword_3 extends KeywordToken  {
	
	public MultipleIsA__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMultipleIsA_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MultipleIsA__Anonymous_multipleIsA_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new MultipleIsA__ExtendsName_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule MultipleIsA_ ****************/


/************ begin Rule Anonymous_multipleIsA_1_ ****************
 *
 * Anonymous_multipleIsA_1_:
 * 	"," extendsName_1=ID;
 *
 **/

// "," extendsName_1=ID
protected class Anonymous_multipleIsA_1__Group extends GroupToken {
	
	public Anonymous_multipleIsA_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_multipleIsA_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_multipleIsA_1__ExtendsName_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_multipleIsA_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_multipleIsA_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_multipleIsA_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_multipleIsA_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// extendsName_1=ID
protected class Anonymous_multipleIsA_1__ExtendsName_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_multipleIsA_1__ExtendsName_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_multipleIsA_1_Access().getExtendsName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_multipleIsA_1__CommaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("extendsName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("extendsName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_multipleIsA_1_Access().getExtendsName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_multipleIsA_1_Access().getExtendsName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_multipleIsA_1_ ****************/


/************ begin Rule Singleton_ ****************
 *
 * Singleton_:
 * 	singleton_1?="singleton" ";";
 *
 **/

// singleton_1?="singleton" ";"
protected class Singleton__Group extends GroupToken {
	
	public Singleton__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSingleton_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Singleton__SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSingleton_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// singleton_1?="singleton"
protected class Singleton__Singleton_1Assignment_0 extends AssignmentToken  {
	
	public Singleton__Singleton_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSingleton_Access().getSingleton_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("singleton_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("singleton_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSingleton_Access().getSingleton_1SingletonKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Singleton__SemicolonKeyword_1 extends KeywordToken  {
	
	public Singleton__SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSingleton_Access().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Singleton__Singleton_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Singleton_ ****************/


/************ begin Rule Immutable_ ****************
 *
 * Immutable_:
 * 	immutable_1?="immutable" ";";
 *
 **/

// immutable_1?="immutable" ";"
protected class Immutable__Group extends GroupToken {
	
	public Immutable__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getImmutable_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Immutable__SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getImmutable_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// immutable_1?="immutable"
protected class Immutable__Immutable_1Assignment_0 extends AssignmentToken  {
	
	public Immutable__Immutable_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getImmutable_Access().getImmutable_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("immutable_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("immutable_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getImmutable_Access().getImmutable_1ImmutableKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Immutable__SemicolonKeyword_1 extends KeywordToken  {
	
	public Immutable__SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getImmutable_Access().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Immutable__Immutable_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Immutable_ ****************/


/************ begin Rule KeyDefinition_ ****************
 *
 * KeyDefinition_:
 * 	DefaultKey_1+=DefaultKey_ | Key_1+=Key_;
 *
 **/

// DefaultKey_1+=DefaultKey_ | Key_1+=Key_
protected class KeyDefinition__Alternatives extends AlternativesToken {

	public KeyDefinition__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getKeyDefinition_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeyDefinition__DefaultKey_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new KeyDefinition__Key_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKeyDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// DefaultKey_1+=DefaultKey_
protected class KeyDefinition__DefaultKey_1Assignment_0 extends AssignmentToken  {
	
	public KeyDefinition__DefaultKey_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeyDefinition_Access().getDefaultKey_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("DefaultKey_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("DefaultKey_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getKeyDefinition_Access().getDefaultKey_1DefaultKey_ParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getKeyDefinition_Access().getDefaultKey_1DefaultKey_ParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// Key_1+=Key_
protected class KeyDefinition__Key_1Assignment_1 extends AssignmentToken  {
	
	public KeyDefinition__Key_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeyDefinition_Access().getKey_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Key__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Key_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Key_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKey_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getKeyDefinition_Access().getKey_1Key_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule KeyDefinition_ ****************/


/************ begin Rule CodeInjection_ ****************
 *
 * CodeInjection_:
 * 	BeforeCode_1+=BeforeCode_ | AfterCode_1+=AfterCode_;
 *
 **/

// BeforeCode_1+=BeforeCode_ | AfterCode_1+=AfterCode_
protected class CodeInjection__Alternatives extends AlternativesToken {

	public CodeInjection__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCodeInjection_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeInjection__BeforeCode_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CodeInjection__AfterCode_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCodeInjection_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BeforeCode_1+=BeforeCode_
protected class CodeInjection__BeforeCode_1Assignment_0 extends AssignmentToken  {
	
	public CodeInjection__BeforeCode_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCodeInjection_Access().getBeforeCode_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BeforeCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("BeforeCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("BeforeCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBeforeCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCodeInjection_Access().getBeforeCode_1BeforeCode_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AfterCode_1+=AfterCode_
protected class CodeInjection__AfterCode_1Assignment_1 extends AssignmentToken  {
	
	public CodeInjection__AfterCode_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCodeInjection_Access().getAfterCode_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AfterCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AfterCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAfterCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCodeInjection_Access().getAfterCode_1AfterCode_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule CodeInjection_ ****************/


/************ begin Rule BeforeCode_ ****************
 *
 * BeforeCode_:
 * 	"before" operationName_1=ID Anonymous_beforeCode_1_1+=Anonymous_beforeCode_1_? "{" code_1=block "}"
 * 	Anonymous_beforeCode_2_1+=Anonymous_beforeCode_2_*;
 *
 **/

// "before" operationName_1=ID Anonymous_beforeCode_1_1+=Anonymous_beforeCode_1_? "{" code_1=block "}"
// Anonymous_beforeCode_2_1+=Anonymous_beforeCode_2_*
protected class BeforeCode__Group extends GroupToken {
	
	public BeforeCode__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BeforeCode__Anonymous_beforeCode_2_1Assignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BeforeCode__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBeforeCode_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "before"
protected class BeforeCode__BeforeKeyword_0 extends KeywordToken  {
	
	public BeforeCode__BeforeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getBeforeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// operationName_1=ID
protected class BeforeCode__OperationName_1Assignment_1 extends AssignmentToken  {
	
	public BeforeCode__OperationName_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getOperationName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BeforeCode__BeforeKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operationName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operationName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBeforeCode_Access().getOperationName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBeforeCode_Access().getOperationName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_beforeCode_1_1+=Anonymous_beforeCode_1_?
protected class BeforeCode__Anonymous_beforeCode_1_1Assignment_2 extends AssignmentToken  {
	
	public BeforeCode__Anonymous_beforeCode_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getAnonymous_beforeCode_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_beforeCode_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_beforeCode_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_beforeCode_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_beforeCode_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBeforeCode_Access().getAnonymous_beforeCode_1_1Anonymous_beforeCode_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeforeCode__OperationName_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class BeforeCode__LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public BeforeCode__LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BeforeCode__Anonymous_beforeCode_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BeforeCode__OperationName_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class BeforeCode__Code_1Assignment_4 extends AssignmentToken  {
	
	public BeforeCode__Code_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getCode_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BeforeCode__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBeforeCode_Access().getCode_1BlockTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBeforeCode_Access().getCode_1BlockTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class BeforeCode__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public BeforeCode__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BeforeCode__Code_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_beforeCode_2_1+=Anonymous_beforeCode_2_*
protected class BeforeCode__Anonymous_beforeCode_2_1Assignment_6 extends AssignmentToken  {
	
	public BeforeCode__Anonymous_beforeCode_2_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBeforeCode_Access().getAnonymous_beforeCode_2_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_beforeCode_2__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_beforeCode_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_beforeCode_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_beforeCode_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBeforeCode_Access().getAnonymous_beforeCode_2_1Anonymous_beforeCode_2_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BeforeCode__Anonymous_beforeCode_2_1Assignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new BeforeCode__RightCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule BeforeCode_ ****************/


/************ begin Rule Anonymous_beforeCode_1_ ****************
 *
 * Anonymous_beforeCode_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_beforeCode_1__Group extends GroupToken {
	
	public Anonymous_beforeCode_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_beforeCode_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_beforeCode_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_beforeCode_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_beforeCode_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_beforeCode_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_beforeCode_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_beforeCode_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_beforeCode_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_beforeCode_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_beforeCode_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_beforeCode_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_beforeCode_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_beforeCode_1_ ****************/


/************ begin Rule Anonymous_beforeCode_2_ ****************
 *
 * Anonymous_beforeCode_2_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_beforeCode_2__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_beforeCode_2__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_beforeCode_2_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_beforeCode_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_beforeCode_2_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_beforeCode_2_ ****************/


/************ begin Rule AfterCode_ ****************
 *
 * AfterCode_:
 * 	"after" operationName_1=ID Anonymous_afterCode_1_1+=Anonymous_afterCode_1_? "{" code_1=block "}"
 * 	Anonymous_afterCode_2_1+=Anonymous_afterCode_2_*;
 *
 **/

// "after" operationName_1=ID Anonymous_afterCode_1_1+=Anonymous_afterCode_1_? "{" code_1=block "}"
// Anonymous_afterCode_2_1+=Anonymous_afterCode_2_*
protected class AfterCode__Group extends GroupToken {
	
	public AfterCode__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterCode__Anonymous_afterCode_2_1Assignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterCode__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterCode_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "after"
protected class AfterCode__AfterKeyword_0 extends KeywordToken  {
	
	public AfterCode__AfterKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getAfterKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// operationName_1=ID
protected class AfterCode__OperationName_1Assignment_1 extends AssignmentToken  {
	
	public AfterCode__OperationName_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getOperationName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterCode__AfterKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operationName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operationName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterCode_Access().getOperationName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAfterCode_Access().getOperationName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_afterCode_1_1+=Anonymous_afterCode_1_?
protected class AfterCode__Anonymous_afterCode_1_1Assignment_2 extends AssignmentToken  {
	
	public AfterCode__Anonymous_afterCode_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getAnonymous_afterCode_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_afterCode_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_afterCode_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_afterCode_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_afterCode_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAfterCode_Access().getAnonymous_afterCode_1_1Anonymous_afterCode_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AfterCode__OperationName_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class AfterCode__LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public AfterCode__LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterCode__Anonymous_afterCode_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AfterCode__OperationName_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class AfterCode__Code_1Assignment_4 extends AssignmentToken  {
	
	public AfterCode__Code_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getCode_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterCode__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterCode_Access().getCode_1BlockTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAfterCode_Access().getCode_1BlockTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class AfterCode__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public AfterCode__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterCode__Code_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_afterCode_2_1+=Anonymous_afterCode_2_*
protected class AfterCode__Anonymous_afterCode_2_1Assignment_6 extends AssignmentToken  {
	
	public AfterCode__Anonymous_afterCode_2_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterCode_Access().getAnonymous_afterCode_2_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_afterCode_2__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_afterCode_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_afterCode_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_afterCode_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAfterCode_Access().getAnonymous_afterCode_2_1Anonymous_afterCode_2_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AfterCode__Anonymous_afterCode_2_1Assignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new AfterCode__RightCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule AfterCode_ ****************/


/************ begin Rule Anonymous_afterCode_1_ ****************
 *
 * Anonymous_afterCode_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_afterCode_1__Group extends GroupToken {
	
	public Anonymous_afterCode_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_afterCode_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_afterCode_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_afterCode_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_afterCode_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_afterCode_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_afterCode_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_afterCode_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_afterCode_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_afterCode_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_afterCode_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_afterCode_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_afterCode_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_afterCode_1_ ****************/


/************ begin Rule Anonymous_afterCode_2_ ****************
 *
 * Anonymous_afterCode_2_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_afterCode_2__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_afterCode_2__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_afterCode_2_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_afterCode_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_afterCode_2_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_afterCode_2_ ****************/


/************ begin Rule StateMachineDefinition_ ****************
 *
 * StateMachineDefinition_:
 * 	"statemachine" queued_1?="queued"? name_1=ID "{" State_1+=State_* "}";
 *
 **/

// "statemachine" queued_1?="queued"? name_1=ID "{" State_1+=State_* "}"
protected class StateMachineDefinition__Group extends GroupToken {
	
	public StateMachineDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachineDefinition__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStateMachineDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "statemachine"
protected class StateMachineDefinition__StatemachineKeyword_0 extends KeywordToken  {
	
	public StateMachineDefinition__StatemachineKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getStatemachineKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// queued_1?="queued"?
protected class StateMachineDefinition__Queued_1Assignment_1 extends AssignmentToken  {
	
	public StateMachineDefinition__Queued_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getQueued_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachineDefinition__StatemachineKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("queued_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("queued_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStateMachineDefinition_Access().getQueued_1QueuedKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class StateMachineDefinition__Name_1Assignment_2 extends AssignmentToken  {
	
	public StateMachineDefinition__Name_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getName_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachineDefinition__Queued_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateMachineDefinition__StatemachineKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStateMachineDefinition_Access().getName_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStateMachineDefinition_Access().getName_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class StateMachineDefinition__LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public StateMachineDefinition__LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachineDefinition__Name_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// State_1+=State_*
protected class StateMachineDefinition__State_1Assignment_4 extends AssignmentToken  {
	
	public StateMachineDefinition__State_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getState_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("State_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("State_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getState_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateMachineDefinition_Access().getState_1State_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StateMachineDefinition__State_1Assignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StateMachineDefinition__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class StateMachineDefinition__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public StateMachineDefinition__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateMachineDefinition_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachineDefinition__State_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateMachineDefinition__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule StateMachineDefinition_ ****************/


/************ begin Rule StateMachine_ ****************
 *
 * StateMachine_:
 * 	Enum_1+=Enum_ | InlineStateMachine_1+=InlineStateMachine_ | ReferencedStateMachine_1+=ReferencedStateMachine_ |
 * 	ActiveDefinition_1+=ActiveDefinition_;
 *
 **/

// Enum_1+=Enum_ | InlineStateMachine_1+=InlineStateMachine_ | ReferencedStateMachine_1+=ReferencedStateMachine_ |
// ActiveDefinition_1+=ActiveDefinition_
protected class StateMachine__Alternatives extends AlternativesToken {

	public StateMachine__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateMachine_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateMachine__Enum_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateMachine__InlineStateMachine_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StateMachine__ReferencedStateMachine_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new StateMachine__ActiveDefinition_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStateMachine_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Enum_1+=Enum_
protected class StateMachine__Enum_1Assignment_0 extends AssignmentToken  {
	
	public StateMachine__Enum_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachine_Access().getEnum_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Enum_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Enum_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnum_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateMachine_Access().getEnum_1Enum_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// InlineStateMachine_1+=InlineStateMachine_
protected class StateMachine__InlineStateMachine_1Assignment_1 extends AssignmentToken  {
	
	public StateMachine__InlineStateMachine_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachine_Access().getInlineStateMachine_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineStateMachine__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("InlineStateMachine_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("InlineStateMachine_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInlineStateMachine_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateMachine_Access().getInlineStateMachine_1InlineStateMachine_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ReferencedStateMachine_1+=ReferencedStateMachine_
protected class StateMachine__ReferencedStateMachine_1Assignment_2 extends AssignmentToken  {
	
	public StateMachine__ReferencedStateMachine_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachine_Access().getReferencedStateMachine_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ReferencedStateMachine_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ReferencedStateMachine_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getReferencedStateMachine_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateMachine_Access().getReferencedStateMachine_1ReferencedStateMachine_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ActiveDefinition_1+=ActiveDefinition_
protected class StateMachine__ActiveDefinition_1Assignment_3 extends AssignmentToken  {
	
	public StateMachine__ActiveDefinition_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateMachine_Access().getActiveDefinition_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActiveDefinition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ActiveDefinition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ActiveDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActiveDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateMachine_Access().getActiveDefinition_1ActiveDefinition_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule StateMachine_ ****************/


/************ begin Rule ActiveDefinition_ ****************
 *
 * ActiveDefinition_:
 * 	active_1?="active" name_1=ID? "{" code_1=block "}";
 *
 **/

// active_1?="active" name_1=ID? "{" code_1=block "}"
protected class ActiveDefinition__Group extends GroupToken {
	
	public ActiveDefinition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActiveDefinition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActiveDefinition__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getActiveDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// active_1?="active"
protected class ActiveDefinition__Active_1Assignment_0 extends AssignmentToken  {
	
	public ActiveDefinition__Active_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActiveDefinition_Access().getActive_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("active_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("active_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getActiveDefinition_Access().getActive_1ActiveKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID?
protected class ActiveDefinition__Name_1Assignment_1 extends AssignmentToken  {
	
	public ActiveDefinition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActiveDefinition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActiveDefinition__Active_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getActiveDefinition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getActiveDefinition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ActiveDefinition__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public ActiveDefinition__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActiveDefinition_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActiveDefinition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ActiveDefinition__Active_1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class ActiveDefinition__Code_1Assignment_3 extends AssignmentToken  {
	
	public ActiveDefinition__Code_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActiveDefinition_Access().getCode_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActiveDefinition__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getActiveDefinition_Access().getCode_1BlockTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getActiveDefinition_Access().getCode_1BlockTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class ActiveDefinition__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ActiveDefinition__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActiveDefinition_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ActiveDefinition__Code_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ActiveDefinition_ ****************/


/************ begin Rule InlineStateMachine_ ****************
 *
 * InlineStateMachine_:
 * 	queued_1?="queued"? name_1=ID "{" Anonymous_inlineStateMachine_1_1+=Anonymous_inlineStateMachine_1_* "}";
 *
 **/

// queued_1?="queued"? name_1=ID "{" Anonymous_inlineStateMachine_1_1+=Anonymous_inlineStateMachine_1_* "}"
protected class InlineStateMachine__Group extends GroupToken {
	
	public InlineStateMachine__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInlineStateMachine_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineStateMachine__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInlineStateMachine_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// queued_1?="queued"?
protected class InlineStateMachine__Queued_1Assignment_0 extends AssignmentToken  {
	
	public InlineStateMachine__Queued_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineStateMachine_Access().getQueued_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("queued_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("queued_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getInlineStateMachine_Access().getQueued_1QueuedKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// name_1=ID
protected class InlineStateMachine__Name_1Assignment_1 extends AssignmentToken  {
	
	public InlineStateMachine__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineStateMachine_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineStateMachine__Queued_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInlineStateMachine_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getInlineStateMachine_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class InlineStateMachine__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public InlineStateMachine__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInlineStateMachine_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineStateMachine__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_inlineStateMachine_1_1+=Anonymous_inlineStateMachine_1_*
protected class InlineStateMachine__Anonymous_inlineStateMachine_1_1Assignment_3 extends AssignmentToken  {
	
	public InlineStateMachine__Anonymous_inlineStateMachine_1_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInlineStateMachine_Access().getAnonymous_inlineStateMachine_1_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_inlineStateMachine_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_inlineStateMachine_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_inlineStateMachine_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_inlineStateMachine_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInlineStateMachine_Access().getAnonymous_inlineStateMachine_1_1Anonymous_inlineStateMachine_1_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new InlineStateMachine__Anonymous_inlineStateMachine_1_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new InlineStateMachine__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class InlineStateMachine__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public InlineStateMachine__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInlineStateMachine_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new InlineStateMachine__Anonymous_inlineStateMachine_1_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new InlineStateMachine__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule InlineStateMachine_ ****************/


/************ begin Rule Anonymous_inlineStateMachine_1_ ****************
 *
 * Anonymous_inlineStateMachine_1_:
 * 	Comment_1+=Comment_ | State_1+=State_ | Trace_1+=Trace_ | "||";
 *
 **/

// Comment_1+=Comment_ | State_1+=State_ | Trace_1+=Trace_ | "||"
protected class Anonymous_inlineStateMachine_1__Alternatives extends AlternativesToken {

	public Anonymous_inlineStateMachine_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_inlineStateMachine_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_inlineStateMachine_1__Comment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_inlineStateMachine_1__State_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_inlineStateMachine_1__Trace_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Anonymous_inlineStateMachine_1__VerticalLineVerticalLineKeyword_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_inlineStateMachine_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Comment_1+=Comment_
protected class Anonymous_inlineStateMachine_1__Comment_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_inlineStateMachine_1__Comment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_inlineStateMachine_1_Access().getComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Comment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Comment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_inlineStateMachine_1_Access().getComment_1Comment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// State_1+=State_
protected class Anonymous_inlineStateMachine_1__State_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_inlineStateMachine_1__State_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_inlineStateMachine_1_Access().getState_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("State_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("State_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getState_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_inlineStateMachine_1_Access().getState_1State_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Trace_1+=Trace_
protected class Anonymous_inlineStateMachine_1__Trace_1Assignment_2 extends AssignmentToken  {
	
	public Anonymous_inlineStateMachine_1__Trace_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_inlineStateMachine_1_Access().getTrace_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trace__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Trace_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Trace_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrace_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_inlineStateMachine_1_Access().getTrace_1Trace_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "||"
protected class Anonymous_inlineStateMachine_1__VerticalLineVerticalLineKeyword_3 extends KeywordToken  {
	
	public Anonymous_inlineStateMachine_1__VerticalLineVerticalLineKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_inlineStateMachine_1_Access().getVerticalLineVerticalLineKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}


/************ end Rule Anonymous_inlineStateMachine_1_ ****************/


/************ begin Rule ReferencedStateMachine_ ****************
 *
 * ReferencedStateMachine_:
 * 	name_1=ID "as" definitionName_1=ID ";" | name_1=ID "as" definitionName_1=ID "{"
 * 	ExtendedStateMachine_1+=ExtendedStateMachine_ "}";
 *
 **/

// name_1=ID "as" definitionName_1=ID ";" | name_1=ID "as" definitionName_1=ID "{"
// ExtendedStateMachine_1+=ExtendedStateMachine_ "}"
protected class ReferencedStateMachine__Alternatives extends AlternativesToken {

	public ReferencedStateMachine__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ReferencedStateMachine__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReferencedStateMachine_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=ID "as" definitionName_1=ID ";"
protected class ReferencedStateMachine__Group_0 extends GroupToken {
	
	public ReferencedStateMachine__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__SemicolonKeyword_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=ID
protected class ReferencedStateMachine__Name_1Assignment_0_0 extends AssignmentToken  {
	
	public ReferencedStateMachine__Name_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getName_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReferencedStateMachine_Access().getName_1IDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReferencedStateMachine_Access().getName_1IDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class ReferencedStateMachine__AsKeyword_0_1 extends KeywordToken  {
	
	public ReferencedStateMachine__AsKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getAsKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__Name_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// definitionName_1=ID
protected class ReferencedStateMachine__DefinitionName_1Assignment_0_2 extends AssignmentToken  {
	
	public ReferencedStateMachine__DefinitionName_1Assignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getDefinitionName_1Assignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__AsKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitionName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitionName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReferencedStateMachine_Access().getDefinitionName_1IDTerminalRuleCall_0_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReferencedStateMachine_Access().getDefinitionName_1IDTerminalRuleCall_0_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ReferencedStateMachine__SemicolonKeyword_0_3 extends KeywordToken  {
	
	public ReferencedStateMachine__SemicolonKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getSemicolonKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__DefinitionName_1Assignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name_1=ID "as" definitionName_1=ID "{" ExtendedStateMachine_1+=ExtendedStateMachine_ "}"
protected class ReferencedStateMachine__Group_1 extends GroupToken {
	
	public ReferencedStateMachine__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__RightCurlyBracketKeyword_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=ID
protected class ReferencedStateMachine__Name_1Assignment_1_0 extends AssignmentToken  {
	
	public ReferencedStateMachine__Name_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getName_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReferencedStateMachine_Access().getName_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReferencedStateMachine_Access().getName_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class ReferencedStateMachine__AsKeyword_1_1 extends KeywordToken  {
	
	public ReferencedStateMachine__AsKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getAsKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__Name_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// definitionName_1=ID
protected class ReferencedStateMachine__DefinitionName_1Assignment_1_2 extends AssignmentToken  {
	
	public ReferencedStateMachine__DefinitionName_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getDefinitionName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__AsKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("definitionName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("definitionName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getReferencedStateMachine_Access().getDefinitionName_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getReferencedStateMachine_Access().getDefinitionName_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ReferencedStateMachine__LeftCurlyBracketKeyword_1_3 extends KeywordToken  {
	
	public ReferencedStateMachine__LeftCurlyBracketKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getLeftCurlyBracketKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__DefinitionName_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ExtendedStateMachine_1+=ExtendedStateMachine_
protected class ReferencedStateMachine__ExtendedStateMachine_1Assignment_1_4 extends AssignmentToken  {
	
	public ReferencedStateMachine__ExtendedStateMachine_1Assignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getExtendedStateMachine_1Assignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExtendedStateMachine__Anonymous_extendedStateMachine_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ExtendedStateMachine_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ExtendedStateMachine_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExtendedStateMachine_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReferencedStateMachine_Access().getExtendedStateMachine_1ExtendedStateMachine_ParserRuleCall_1_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ReferencedStateMachine__LeftCurlyBracketKeyword_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ReferencedStateMachine__RightCurlyBracketKeyword_1_5 extends KeywordToken  {
	
	public ReferencedStateMachine__RightCurlyBracketKeyword_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getReferencedStateMachine_Access().getRightCurlyBracketKeyword_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ReferencedStateMachine__ExtendedStateMachine_1Assignment_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule ReferencedStateMachine_ ****************/


/************ begin Rule ExtendedStateMachine_ ****************
 *
 * ExtendedStateMachine_:
 * 	Anonymous_extendedStateMachine_1_1+=Anonymous_extendedStateMachine_1_*;
 *
 **/

// Anonymous_extendedStateMachine_1_1+=Anonymous_extendedStateMachine_1_*
protected class ExtendedStateMachine__Anonymous_extendedStateMachine_1_1Assignment extends AssignmentToken  {
	
	public ExtendedStateMachine__Anonymous_extendedStateMachine_1_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExtendedStateMachine_Access().getAnonymous_extendedStateMachine_1_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_extendedStateMachine_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_extendedStateMachine_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_extendedStateMachine_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_extendedStateMachine_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExtendedStateMachine_Access().getAnonymous_extendedStateMachine_1_1Anonymous_extendedStateMachine_1_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ExtendedStateMachine__Anonymous_extendedStateMachine_1_1Assignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule ExtendedStateMachine_ ****************/


/************ begin Rule Anonymous_extendedStateMachine_1_ ****************
 *
 * Anonymous_extendedStateMachine_1_:
 * 	Comment_1+=Comment_ | changeType_1=("+" | "-" | "*")? State_1+=State_;
 *
 **/

// Comment_1+=Comment_ | changeType_1=("+" | "-" | "*")? State_1+=State_
protected class Anonymous_extendedStateMachine_1__Alternatives extends AlternativesToken {

	public Anonymous_extendedStateMachine_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_extendedStateMachine_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_extendedStateMachine_1__Comment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_extendedStateMachine_1__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_extendedStateMachine_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Comment_1+=Comment_
protected class Anonymous_extendedStateMachine_1__Comment_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_extendedStateMachine_1__Comment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_extendedStateMachine_1_Access().getComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Comment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Comment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_extendedStateMachine_1_Access().getComment_1Comment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// changeType_1=("+" | "-" | "*")? State_1+=State_
protected class Anonymous_extendedStateMachine_1__Group_1 extends GroupToken {
	
	public Anonymous_extendedStateMachine_1__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_extendedStateMachine_1_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_extendedStateMachine_1__State_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// changeType_1=("+" | "-" | "*")?
protected class Anonymous_extendedStateMachine_1__ChangeType_1Assignment_1_0 extends AssignmentToken  {
	
	public Anonymous_extendedStateMachine_1__ChangeType_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("changeType_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("changeType_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1PlusSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1PlusSignKeyword_1_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1HyphenMinusKeyword_1_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1HyphenMinusKeyword_1_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1AsteriskKeyword_1_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_extendedStateMachine_1_Access().getChangeType_1AsteriskKeyword_1_0_0_2();
			return obj;
		}
		return null;
	}

}

// State_1+=State_
protected class Anonymous_extendedStateMachine_1__State_1Assignment_1_1 extends AssignmentToken  {
	
	public Anonymous_extendedStateMachine_1__State_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_extendedStateMachine_1_Access().getState_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("State_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("State_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getState_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_extendedStateMachine_1_Access().getState_1State_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_extendedStateMachine_1__ChangeType_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}



/************ end Rule Anonymous_extendedStateMachine_1_ ****************/


/************ begin Rule Enum_ ****************
 *
 * Enum_:
 * 	name_1=ID "{" "}" | name_1=ID "{" stateName_1=ID Anonymous_enum_1_1+=Anonymous_enum_1_* "}";
 *
 **/

// name_1=ID "{" "}" | name_1=ID "{" stateName_1=ID Anonymous_enum_1_1+=Anonymous_enum_1_* "}"
protected class Enum__Alternatives extends AlternativesToken {

	public Enum__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEnum_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Enum__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEnum_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=ID "{" "}"
protected class Enum__Group_0 extends GroupToken {
	
	public Enum__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnum_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__RightCurlyBracketKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=ID
protected class Enum__Name_1Assignment_0_0 extends AssignmentToken  {
	
	public Enum__Name_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnum_Access().getName_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnum_Access().getName_1IDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnum_Access().getName_1IDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Enum__LeftCurlyBracketKeyword_0_1 extends KeywordToken  {
	
	public Enum__LeftCurlyBracketKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnum_Access().getLeftCurlyBracketKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__Name_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "}"
protected class Enum__RightCurlyBracketKeyword_0_2 extends KeywordToken  {
	
	public Enum__RightCurlyBracketKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnum_Access().getRightCurlyBracketKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__LeftCurlyBracketKeyword_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// name_1=ID "{" stateName_1=ID Anonymous_enum_1_1+=Anonymous_enum_1_* "}"
protected class Enum__Group_1 extends GroupToken {
	
	public Enum__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEnum_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__RightCurlyBracketKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=ID
protected class Enum__Name_1Assignment_1_0 extends AssignmentToken  {
	
	public Enum__Name_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnum_Access().getName_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnum_Access().getName_1IDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnum_Access().getName_1IDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class Enum__LeftCurlyBracketKeyword_1_1 extends KeywordToken  {
	
	public Enum__LeftCurlyBracketKeyword_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnum_Access().getLeftCurlyBracketKeyword_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__Name_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// stateName_1=ID
protected class Enum__StateName_1Assignment_1_2 extends AssignmentToken  {
	
	public Enum__StateName_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnum_Access().getStateName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__LeftCurlyBracketKeyword_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEnum_Access().getStateName_1IDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEnum_Access().getStateName_1IDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_enum_1_1+=Anonymous_enum_1_*
protected class Enum__Anonymous_enum_1_1Assignment_1_3 extends AssignmentToken  {
	
	public Enum__Anonymous_enum_1_1Assignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEnum_Access().getAnonymous_enum_1_1Assignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_enum_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_enum_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_enum_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_enum_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEnum_Access().getAnonymous_enum_1_1Anonymous_enum_1_ParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Enum__Anonymous_enum_1_1Assignment_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Enum__StateName_1Assignment_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Enum__RightCurlyBracketKeyword_1_4 extends KeywordToken  {
	
	public Enum__RightCurlyBracketKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEnum_Access().getRightCurlyBracketKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Enum__Anonymous_enum_1_1Assignment_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Enum__StateName_1Assignment_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule Enum_ ****************/


/************ begin Rule Anonymous_enum_1_ ****************
 *
 * Anonymous_enum_1_:
 * 	"," stateName_1=ID;
 *
 **/

// "," stateName_1=ID
protected class Anonymous_enum_1__Group extends GroupToken {
	
	public Anonymous_enum_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_enum_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_enum_1__StateName_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_enum_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_enum_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_enum_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_enum_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// stateName_1=ID
protected class Anonymous_enum_1__StateName_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_enum_1__StateName_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_enum_1_Access().getStateName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_enum_1__CommaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_enum_1_Access().getStateName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_enum_1_Access().getStateName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_enum_1_ ****************/


/************ begin Rule State_ ****************
 *
 * State_:
 * 	stateName_1=ID "{" StateInternal_1+=StateInternal_* "}" | final_1?="final" stateName_1=ID "{"
 * 	Anonymous_state_1_1+=Anonymous_state_1_* "}";
 *
 **/

// stateName_1=ID "{" StateInternal_1+=StateInternal_* "}" | final_1?="final" stateName_1=ID "{"
// Anonymous_state_1_1+=Anonymous_state_1_* "}"
protected class State__Alternatives extends AlternativesToken {

	public State__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getState_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new State__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getState_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// stateName_1=ID "{" StateInternal_1+=StateInternal_* "}"
protected class State__Group_0 extends GroupToken {
	
	public State__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getState_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__RightCurlyBracketKeyword_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// stateName_1=ID
protected class State__StateName_1Assignment_0_0 extends AssignmentToken  {
	
	public State__StateName_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getState_Access().getStateName_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getState_Access().getStateName_1IDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getState_Access().getStateName_1IDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class State__LeftCurlyBracketKeyword_0_1 extends KeywordToken  {
	
	public State__LeftCurlyBracketKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getState_Access().getLeftCurlyBracketKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__StateName_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// StateInternal_1+=StateInternal_*
protected class State__StateInternal_1Assignment_0_2 extends AssignmentToken  {
	
	public State__StateInternal_1Assignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getState_Access().getStateInternal_1Assignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateInternal__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StateInternal_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StateInternal_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateInternal_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getState_Access().getStateInternal_1StateInternal_ParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State__StateInternal_1Assignment_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new State__LeftCurlyBracketKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class State__RightCurlyBracketKeyword_0_3 extends KeywordToken  {
	
	public State__RightCurlyBracketKeyword_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getState_Access().getRightCurlyBracketKeyword_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__StateInternal_1Assignment_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new State__LeftCurlyBracketKeyword_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// final_1?="final" stateName_1=ID "{" Anonymous_state_1_1+=Anonymous_state_1_* "}"
protected class State__Group_1 extends GroupToken {
	
	public State__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getState_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__RightCurlyBracketKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// final_1?="final"
protected class State__Final_1Assignment_1_0 extends AssignmentToken  {
	
	public State__Final_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getState_Access().getFinal_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("final_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("final_1");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getState_Access().getFinal_1FinalKeyword_1_0_0();
			return obj;
		}
		return null;
	}

}

// stateName_1=ID
protected class State__StateName_1Assignment_1_1 extends AssignmentToken  {
	
	public State__StateName_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getState_Access().getStateName_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Final_1Assignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getState_Access().getStateName_1IDTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getState_Access().getStateName_1IDTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class State__LeftCurlyBracketKeyword_1_2 extends KeywordToken  {
	
	public State__LeftCurlyBracketKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getState_Access().getLeftCurlyBracketKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__StateName_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_state_1_1+=Anonymous_state_1_*
protected class State__Anonymous_state_1_1Assignment_1_3 extends AssignmentToken  {
	
	public State__Anonymous_state_1_1Assignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getState_Access().getAnonymous_state_1_1Assignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_state_1__StateInternal_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_state_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_state_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_state_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getState_Access().getAnonymous_state_1_1Anonymous_state_1_ParserRuleCall_1_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State__Anonymous_state_1_1Assignment_1_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new State__LeftCurlyBracketKeyword_1_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class State__RightCurlyBracketKeyword_1_4 extends KeywordToken  {
	
	public State__RightCurlyBracketKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getState_Access().getRightCurlyBracketKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Anonymous_state_1_1Assignment_1_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new State__LeftCurlyBracketKeyword_1_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule State_ ****************/


/************ begin Rule Anonymous_state_1_ ****************
 *
 * Anonymous_state_1_:
 * 	StateInternal_1+=StateInternal_;
 *
 **/

// StateInternal_1+=StateInternal_
protected class Anonymous_state_1__StateInternal_1Assignment extends AssignmentToken  {
	
	public Anonymous_state_1__StateInternal_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_state_1_Access().getStateInternal_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateInternal__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_state_1_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("StateInternal_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StateInternal_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateInternal_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_state_1_Access().getStateInternal_1StateInternal_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_state_1_ ****************/


/************ begin Rule StateInternal_ ****************
 *
 * StateInternal_:
 * 	Comment_1+=Comment_ | changeType_1=("+" | "-" | "*")? StateEntity_1+=StateEntity_;
 *
 **/

// Comment_1+=Comment_ | changeType_1=("+" | "-" | "*")? StateEntity_1+=StateEntity_
protected class StateInternal__Alternatives extends AlternativesToken {

	public StateInternal__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateInternal_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateInternal__Comment_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateInternal__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStateInternal_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Comment_1+=Comment_
protected class StateInternal__Comment_1Assignment_0 extends AssignmentToken  {
	
	public StateInternal__Comment_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateInternal_Access().getComment_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Comment__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Comment_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Comment_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getComment_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateInternal_Access().getComment_1Comment_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// changeType_1=("+" | "-" | "*")? StateEntity_1+=StateEntity_
protected class StateInternal__Group_1 extends GroupToken {
	
	public StateInternal__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStateInternal_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateInternal__StateEntity_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// changeType_1=("+" | "-" | "*")?
protected class StateInternal__ChangeType_1Assignment_1_0 extends AssignmentToken  {
	
	public StateInternal__ChangeType_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateInternal_Access().getChangeType_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("changeType_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("changeType_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getStateInternal_Access().getChangeType_1PlusSignKeyword_1_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStateInternal_Access().getChangeType_1PlusSignKeyword_1_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getStateInternal_Access().getChangeType_1HyphenMinusKeyword_1_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStateInternal_Access().getChangeType_1HyphenMinusKeyword_1_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getStateInternal_Access().getChangeType_1AsteriskKeyword_1_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getStateInternal_Access().getChangeType_1AsteriskKeyword_1_0_0_2();
			return obj;
		}
		return null;
	}

}

// StateEntity_1+=StateEntity_
protected class StateInternal__StateEntity_1Assignment_1_1 extends AssignmentToken  {
	
	public StateInternal__StateEntity_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateInternal_Access().getStateEntity_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateEntity__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StateEntity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StateEntity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateEntity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateInternal_Access().getStateEntity_1StateEntity_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StateInternal__ChangeType_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}



/************ end Rule StateInternal_ ****************/


/************ begin Rule StateEntity_ ****************
 *
 * StateEntity_:
 * 	"||" | EntryOrExitAction_1+=EntryOrExitAction_ | AutoTransition_1+=AutoTransition_ | Transition_1+=Transition_ |
 * 	Activity_1+=Activity_ | State_1+=State_ | Trace_1+=Trace_;
 *
 **/

// "||" | EntryOrExitAction_1+=EntryOrExitAction_ | AutoTransition_1+=AutoTransition_ | Transition_1+=Transition_ |
// Activity_1+=Activity_ | State_1+=State_ | Trace_1+=Trace_
protected class StateEntity__Alternatives extends AlternativesToken {

	public StateEntity__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StateEntity__VerticalLineVerticalLineKeyword_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StateEntity__EntryOrExitAction_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StateEntity__AutoTransition_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new StateEntity__Transition_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new StateEntity__Activity_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new StateEntity__State_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new StateEntity__Trace_1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStateEntity_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "||"
protected class StateEntity__VerticalLineVerticalLineKeyword_0 extends KeywordToken  {
	
	public StateEntity__VerticalLineVerticalLineKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getVerticalLineVerticalLineKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// EntryOrExitAction_1+=EntryOrExitAction_
protected class StateEntity__EntryOrExitAction_1Assignment_1 extends AssignmentToken  {
	
	public StateEntity__EntryOrExitAction_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getEntryOrExitAction_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryOrExitAction__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EntryOrExitAction_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EntryOrExitAction_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEntryOrExitAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateEntity_Access().getEntryOrExitAction_1EntryOrExitAction_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AutoTransition_1+=AutoTransition_
protected class StateEntity__AutoTransition_1Assignment_2 extends AssignmentToken  {
	
	public StateEntity__AutoTransition_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getAutoTransition_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AutoTransition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AutoTransition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutoTransition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateEntity_Access().getAutoTransition_1AutoTransition_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Transition_1+=Transition_
protected class StateEntity__Transition_1Assignment_3 extends AssignmentToken  {
	
	public StateEntity__Transition_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getTransition_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Transition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Transition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateEntity_Access().getTransition_1Transition_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Activity_1+=Activity_
protected class StateEntity__Activity_1Assignment_4 extends AssignmentToken  {
	
	public StateEntity__Activity_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getActivity_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Activity__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Activity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Activity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActivity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateEntity_Access().getActivity_1Activity_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// State_1+=State_
protected class StateEntity__State_1Assignment_5 extends AssignmentToken  {
	
	public StateEntity__State_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getState_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new State__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("State_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("State_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getState_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateEntity_Access().getState_1State_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Trace_1+=Trace_
protected class StateEntity__Trace_1Assignment_6 extends AssignmentToken  {
	
	public StateEntity__Trace_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStateEntity_Access().getTrace_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trace__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Trace_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Trace_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTrace_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStateEntity_Access().getTrace_1Trace_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule StateEntity_ ****************/


/************ begin Rule AutoTransition_ ****************
 *
 * AutoTransition_:
 * 	AutoTransitionBlock_1+=AutoTransitionBlock_ | Activity_1+=Activity_ AutoTransitionBlock_1+=AutoTransitionBlock_;
 *
 **/

// AutoTransitionBlock_1+=AutoTransitionBlock_ | Activity_1+=Activity_ AutoTransitionBlock_1+=AutoTransitionBlock_
protected class AutoTransition__Alternatives extends AlternativesToken {

	public AutoTransition__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAutoTransition_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransition__AutoTransitionBlock_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AutoTransition__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAutoTransition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AutoTransitionBlock_1+=AutoTransitionBlock_
protected class AutoTransition__AutoTransitionBlock_1Assignment_0 extends AssignmentToken  {
	
	public AutoTransition__AutoTransitionBlock_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransition_Access().getAutoTransitionBlock_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AutoTransitionBlock_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AutoTransitionBlock_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutoTransitionBlock_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransition_Access().getAutoTransitionBlock_1AutoTransitionBlock_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Activity_1+=Activity_ AutoTransitionBlock_1+=AutoTransitionBlock_
protected class AutoTransition__Group_1 extends GroupToken {
	
	public AutoTransition__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAutoTransition_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransition__AutoTransitionBlock_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Activity_1+=Activity_
protected class AutoTransition__Activity_1Assignment_1_0 extends AssignmentToken  {
	
	public AutoTransition__Activity_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransition_Access().getActivity_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Activity__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Activity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Activity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getActivity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransition_Access().getActivity_1Activity_ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AutoTransitionBlock_1+=AutoTransitionBlock_
protected class AutoTransition__AutoTransitionBlock_1Assignment_1_1 extends AssignmentToken  {
	
	public AutoTransition__AutoTransitionBlock_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransition_Access().getAutoTransitionBlock_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AutoTransitionBlock_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AutoTransitionBlock_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutoTransitionBlock_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransition_Access().getAutoTransitionBlock_1AutoTransitionBlock_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AutoTransition__Activity_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule AutoTransition_ ****************/


/************ begin Rule AutoTransitionBlock_ ****************
 *
 * AutoTransitionBlock_:
 * 	Guard_1+=Guard_? "->" Action_1+=Action_? stateName_1=ID ";" | Guard_1+=Guard_? Action_1+=Action_? "->" stateName_1=ID
 * 	";";
 *
 **/

// Guard_1+=Guard_? "->" Action_1+=Action_? stateName_1=ID ";" | Guard_1+=Guard_? Action_1+=Action_? "->" stateName_1=ID
// ";"
protected class AutoTransitionBlock__Alternatives extends AlternativesToken {

	public AutoTransitionBlock__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AutoTransitionBlock__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAutoTransitionBlock_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Guard_1+=Guard_? "->" Action_1+=Action_? stateName_1=ID ";"
protected class AutoTransitionBlock__Group_0 extends GroupToken {
	
	public AutoTransitionBlock__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__SemicolonKeyword_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Guard_1+=Guard_?
protected class AutoTransitionBlock__Guard_1Assignment_0_0 extends AssignmentToken  {
	
	public AutoTransitionBlock__Guard_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getGuard_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Guard_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Guard_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuard_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransitionBlock_Access().getGuard_1Guard_ParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "->"
protected class AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_0_1 extends KeywordToken  {
	
	public AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getHyphenMinusGreaterThanSignKeyword_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__Guard_1Assignment_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// Action_1+=Action_?
protected class AutoTransitionBlock__Action_1Assignment_0_2 extends AssignmentToken  {
	
	public AutoTransitionBlock__Action_1Assignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getAction_1Assignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Action_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Action_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransitionBlock_Access().getAction_1Action_ParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// stateName_1=ID
protected class AutoTransitionBlock__StateName_1Assignment_0_3 extends AssignmentToken  {
	
	public AutoTransitionBlock__StateName_1Assignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getStateName_1Assignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__Action_1Assignment_0_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_0_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAutoTransitionBlock_Access().getStateName_1IDTerminalRuleCall_0_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAutoTransitionBlock_Access().getStateName_1IDTerminalRuleCall_0_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class AutoTransitionBlock__SemicolonKeyword_0_4 extends KeywordToken  {
	
	public AutoTransitionBlock__SemicolonKeyword_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getSemicolonKeyword_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__StateName_1Assignment_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Guard_1+=Guard_? Action_1+=Action_? "->" stateName_1=ID ";"
protected class AutoTransitionBlock__Group_1 extends GroupToken {
	
	public AutoTransitionBlock__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__SemicolonKeyword_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Guard_1+=Guard_?
protected class AutoTransitionBlock__Guard_1Assignment_1_0 extends AssignmentToken  {
	
	public AutoTransitionBlock__Guard_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getGuard_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Guard_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Guard_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuard_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransitionBlock_Access().getGuard_1Guard_ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Action_1+=Action_?
protected class AutoTransitionBlock__Action_1Assignment_1_1 extends AssignmentToken  {
	
	public AutoTransitionBlock__Action_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getAction_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Action_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Action_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAutoTransitionBlock_Access().getAction_1Action_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AutoTransitionBlock__Guard_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "->"
protected class AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_1_2 extends KeywordToken  {
	
	public AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getHyphenMinusGreaterThanSignKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__Action_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AutoTransitionBlock__Guard_1Assignment_1_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

}

// stateName_1=ID
protected class AutoTransitionBlock__StateName_1Assignment_1_3 extends AssignmentToken  {
	
	public AutoTransitionBlock__StateName_1Assignment_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getStateName_1Assignment_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__HyphenMinusGreaterThanSignKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAutoTransitionBlock_Access().getStateName_1IDTerminalRuleCall_1_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAutoTransitionBlock_Access().getStateName_1IDTerminalRuleCall_1_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class AutoTransitionBlock__SemicolonKeyword_1_4 extends KeywordToken  {
	
	public AutoTransitionBlock__SemicolonKeyword_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAutoTransitionBlock_Access().getSemicolonKeyword_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AutoTransitionBlock__StateName_1Assignment_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule AutoTransitionBlock_ ****************/


/************ begin Rule Transition_ ****************
 *
 * Transition_:
 * 	Guard_1+=Guard_? EventDefinition_1+=EventDefinition_? "->" Action_1+=Action_? stateName_1=ID ";" | Guard_1+=Guard_?
 * 	EventDefinition_1+=EventDefinition_? Action_1+=Action_? "->" stateName_1=ID ";" | EventDefinition_1+=EventDefinition_?
 * 	Guard_1+=Guard_? "->" Action_1+=Action_? stateName_1=ID ";" | EventDefinition_1+=EventDefinition_? Guard_1+=Guard_?
 * 	Action_1+=Action_? "->" stateName_1=ID ";";
 *
 **/

// Guard_1+=Guard_? EventDefinition_1+=EventDefinition_? "->" Action_1+=Action_? stateName_1=ID ";" | Guard_1+=Guard_?
// EventDefinition_1+=EventDefinition_? Action_1+=Action_? "->" stateName_1=ID ";" | EventDefinition_1+=EventDefinition_?
// Guard_1+=Guard_? "->" Action_1+=Action_? stateName_1=ID ";" | EventDefinition_1+=EventDefinition_? Guard_1+=Guard_?
// Action_1+=Action_? "->" stateName_1=ID ";"
protected class Transition__Alternatives extends AlternativesToken {

	public Transition__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTransition_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Transition__Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Transition__Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTransition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Guard_1+=Guard_? EventDefinition_1+=EventDefinition_? "->" Action_1+=Action_? stateName_1=ID ";"
protected class Transition__Group_0 extends GroupToken {
	
	public Transition__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransition_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__SemicolonKeyword_0_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Guard_1+=Guard_?
protected class Transition__Guard_1Assignment_0_0 extends AssignmentToken  {
	
	public Transition__Guard_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getGuard_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Guard_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Guard_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuard_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getGuard_1Guard_ParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// EventDefinition_1+=EventDefinition_?
protected class Transition__EventDefinition_1Assignment_0_1 extends AssignmentToken  {
	
	public Transition__EventDefinition_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getEventDefinition_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDefinition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EventDefinition_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EventDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getEventDefinition_1EventDefinition_ParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__Guard_1Assignment_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "->"
protected class Transition__HyphenMinusGreaterThanSignKeyword_0_2 extends KeywordToken  {
	
	public Transition__HyphenMinusGreaterThanSignKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getHyphenMinusGreaterThanSignKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__EventDefinition_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__Guard_1Assignment_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

}

// Action_1+=Action_?
protected class Transition__Action_1Assignment_0_3 extends AssignmentToken  {
	
	public Transition__Action_1Assignment_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getAction_1Assignment_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Action_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Action_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getAction_1Action_ParserRuleCall_0_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__HyphenMinusGreaterThanSignKeyword_0_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// stateName_1=ID
protected class Transition__StateName_1Assignment_0_4 extends AssignmentToken  {
	
	public Transition__StateName_1Assignment_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getStateName_1Assignment_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Action_1Assignment_0_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__HyphenMinusGreaterThanSignKeyword_0_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_0_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_0_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Transition__SemicolonKeyword_0_5 extends KeywordToken  {
	
	public Transition__SemicolonKeyword_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getSemicolonKeyword_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__StateName_1Assignment_0_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// Guard_1+=Guard_? EventDefinition_1+=EventDefinition_? Action_1+=Action_? "->" stateName_1=ID ";"
protected class Transition__Group_1 extends GroupToken {
	
	public Transition__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransition_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__SemicolonKeyword_1_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Guard_1+=Guard_?
protected class Transition__Guard_1Assignment_1_0 extends AssignmentToken  {
	
	public Transition__Guard_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getGuard_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Guard_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Guard_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuard_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getGuard_1Guard_ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// EventDefinition_1+=EventDefinition_?
protected class Transition__EventDefinition_1Assignment_1_1 extends AssignmentToken  {
	
	public Transition__EventDefinition_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getEventDefinition_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDefinition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EventDefinition_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EventDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getEventDefinition_1EventDefinition_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__Guard_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// Action_1+=Action_?
protected class Transition__Action_1Assignment_1_2 extends AssignmentToken  {
	
	public Transition__Action_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getAction_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Action_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Action_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getAction_1Action_ParserRuleCall_1_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__EventDefinition_1Assignment_1_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Transition__Guard_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}

// "->"
protected class Transition__HyphenMinusGreaterThanSignKeyword_1_3 extends KeywordToken  {
	
	public Transition__HyphenMinusGreaterThanSignKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getHyphenMinusGreaterThanSignKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Action_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__EventDefinition_1Assignment_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Transition__Guard_1Assignment_1_0(lastRuleCallOrigin, this, 2, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 3, inst);
		}	
	}

}

// stateName_1=ID
protected class Transition__StateName_1Assignment_1_4 extends AssignmentToken  {
	
	public Transition__StateName_1Assignment_1_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getStateName_1Assignment_1_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__HyphenMinusGreaterThanSignKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_1_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_1_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Transition__SemicolonKeyword_1_5 extends KeywordToken  {
	
	public Transition__SemicolonKeyword_1_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getSemicolonKeyword_1_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__StateName_1Assignment_1_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// EventDefinition_1+=EventDefinition_? Guard_1+=Guard_? "->" Action_1+=Action_? stateName_1=ID ";"
protected class Transition__Group_2 extends GroupToken {
	
	public Transition__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransition_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__SemicolonKeyword_2_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EventDefinition_1+=EventDefinition_?
protected class Transition__EventDefinition_1Assignment_2_0 extends AssignmentToken  {
	
	public Transition__EventDefinition_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getEventDefinition_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDefinition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EventDefinition_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EventDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getEventDefinition_1EventDefinition_ParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Guard_1+=Guard_?
protected class Transition__Guard_1Assignment_2_1 extends AssignmentToken  {
	
	public Transition__Guard_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getGuard_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Guard_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Guard_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuard_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getGuard_1Guard_ParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__EventDefinition_1Assignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// "->"
protected class Transition__HyphenMinusGreaterThanSignKeyword_2_2 extends KeywordToken  {
	
	public Transition__HyphenMinusGreaterThanSignKeyword_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getHyphenMinusGreaterThanSignKeyword_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Guard_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__EventDefinition_1Assignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 2, inst);
		}	
	}

}

// Action_1+=Action_?
protected class Transition__Action_1Assignment_2_3 extends AssignmentToken  {
	
	public Transition__Action_1Assignment_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getAction_1Assignment_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Action_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Action_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getAction_1Action_ParserRuleCall_2_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__HyphenMinusGreaterThanSignKeyword_2_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// stateName_1=ID
protected class Transition__StateName_1Assignment_2_4 extends AssignmentToken  {
	
	public Transition__StateName_1Assignment_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getStateName_1Assignment_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Action_1Assignment_2_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__HyphenMinusGreaterThanSignKeyword_2_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_2_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_2_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Transition__SemicolonKeyword_2_5 extends KeywordToken  {
	
	public Transition__SemicolonKeyword_2_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getSemicolonKeyword_2_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__StateName_1Assignment_2_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// EventDefinition_1+=EventDefinition_? Guard_1+=Guard_? Action_1+=Action_? "->" stateName_1=ID ";"
protected class Transition__Group_3 extends GroupToken {
	
	public Transition__Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransition_Access().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__SemicolonKeyword_3_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EventDefinition_1+=EventDefinition_?
protected class Transition__EventDefinition_1Assignment_3_0 extends AssignmentToken  {
	
	public Transition__EventDefinition_1Assignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getEventDefinition_1Assignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDefinition__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EventDefinition_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EventDefinition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventDefinition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getEventDefinition_1EventDefinition_ParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Guard_1+=Guard_?
protected class Transition__Guard_1Assignment_3_1 extends AssignmentToken  {
	
	public Transition__Guard_1Assignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getGuard_1Assignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Guard_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Guard_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuard_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getGuard_1Guard_ParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__EventDefinition_1Assignment_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// Action_1+=Action_?
protected class Transition__Action_1Assignment_3_2 extends AssignmentToken  {
	
	public Transition__Action_1Assignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getAction_1Assignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Action_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Action_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAction_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransition_Access().getAction_1Action_ParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Transition__Guard_1Assignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Transition__EventDefinition_1Assignment_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}

// "->"
protected class Transition__HyphenMinusGreaterThanSignKeyword_3_3 extends KeywordToken  {
	
	public Transition__HyphenMinusGreaterThanSignKeyword_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getHyphenMinusGreaterThanSignKeyword_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__Action_1Assignment_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Transition__Guard_1Assignment_3_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Transition__EventDefinition_1Assignment_3_0(lastRuleCallOrigin, this, 2, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 3, inst);
		}	
	}

}

// stateName_1=ID
protected class Transition__StateName_1Assignment_3_4 extends AssignmentToken  {
	
	public Transition__StateName_1Assignment_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransition_Access().getStateName_1Assignment_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__HyphenMinusGreaterThanSignKeyword_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("stateName_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("stateName_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_3_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTransition_Access().getStateName_1IDTerminalRuleCall_3_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Transition__SemicolonKeyword_3_5 extends KeywordToken  {
	
	public Transition__SemicolonKeyword_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransition_Access().getSemicolonKeyword_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Transition__StateName_1Assignment_3_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule Transition_ ****************/


/************ begin Rule EventDefinition_ ****************
 *
 * EventDefinition_:
 * 	AfterEveryEvent_1+=AfterEveryEvent_ | AfterEvent_1+=AfterEvent_ | event_1=nameID
 * 	Anonymous_eventDefinition_1_1+=Anonymous_eventDefinition_1_?;
 *
 **/

// AfterEveryEvent_1+=AfterEveryEvent_ | AfterEvent_1+=AfterEvent_ | event_1=nameID
// Anonymous_eventDefinition_1_1+=Anonymous_eventDefinition_1_?
protected class EventDefinition__Alternatives extends AlternativesToken {

	public EventDefinition__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEventDefinition_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDefinition__AfterEveryEvent_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDefinition__AfterEvent_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EventDefinition__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEventDefinition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AfterEveryEvent_1+=AfterEveryEvent_
protected class EventDefinition__AfterEveryEvent_1Assignment_0 extends AssignmentToken  {
	
	public EventDefinition__AfterEveryEvent_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDefinition_Access().getAfterEveryEvent_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEveryEvent__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AfterEveryEvent_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AfterEveryEvent_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAfterEveryEvent_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDefinition_Access().getAfterEveryEvent_1AfterEveryEvent_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// AfterEvent_1+=AfterEvent_
protected class EventDefinition__AfterEvent_1Assignment_1 extends AssignmentToken  {
	
	public EventDefinition__AfterEvent_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDefinition_Access().getAfterEvent_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEvent__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AfterEvent_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AfterEvent_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAfterEvent_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDefinition_Access().getAfterEvent_1AfterEvent_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// event_1=nameID Anonymous_eventDefinition_1_1+=Anonymous_eventDefinition_1_?
protected class EventDefinition__Group_2 extends GroupToken {
	
	public EventDefinition__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEventDefinition_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventDefinition__Anonymous_eventDefinition_1_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventDefinition__Event_1Assignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// event_1=nameID
protected class EventDefinition__Event_1Assignment_2_0 extends AssignmentToken  {
	
	public EventDefinition__Event_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDefinition_Access().getEvent_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("event_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("event_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEventDefinition_Access().getEvent_1NameIDTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEventDefinition_Access().getEvent_1NameIDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_eventDefinition_1_1+=Anonymous_eventDefinition_1_?
protected class EventDefinition__Anonymous_eventDefinition_1_1Assignment_2_1 extends AssignmentToken  {
	
	public EventDefinition__Anonymous_eventDefinition_1_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEventDefinition_Access().getAnonymous_eventDefinition_1_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_eventDefinition_1__ParameterList_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_eventDefinition_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_eventDefinition_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_eventDefinition_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEventDefinition_Access().getAnonymous_eventDefinition_1_1Anonymous_eventDefinition_1_ParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EventDefinition__Event_1Assignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule EventDefinition_ ****************/


/************ begin Rule Anonymous_eventDefinition_1_ ****************
 *
 * Anonymous_eventDefinition_1_:
 * 	ParameterList_1+=ParameterList_;
 *
 **/

// ParameterList_1+=ParameterList_
protected class Anonymous_eventDefinition_1__ParameterList_1Assignment extends AssignmentToken  {
	
	public Anonymous_eventDefinition_1__ParameterList_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_eventDefinition_1_Access().getParameterList_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ParameterList__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_eventDefinition_1_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("ParameterList_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ParameterList_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterList_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_eventDefinition_1_Access().getParameterList_1ParameterList_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_eventDefinition_1_ ****************/


/************ begin Rule AfterEveryEvent_ ****************
 *
 * AfterEveryEvent_:
 * 	"afterEvery" "(" timer_1=ID ")";
 *
 **/

// "afterEvery" "(" timer_1=ID ")"
protected class AfterEveryEvent__Group extends GroupToken {
	
	public AfterEveryEvent__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterEveryEvent_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEveryEvent__RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterEveryEvent_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "afterEvery"
protected class AfterEveryEvent__AfterEveryKeyword_0 extends KeywordToken  {
	
	public AfterEveryEvent__AfterEveryKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterEveryEvent_Access().getAfterEveryKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class AfterEveryEvent__LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public AfterEveryEvent__LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterEveryEvent_Access().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEveryEvent__AfterEveryKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// timer_1=ID
protected class AfterEveryEvent__Timer_1Assignment_2 extends AssignmentToken  {
	
	public AfterEveryEvent__Timer_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterEveryEvent_Access().getTimer_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEveryEvent__LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("timer_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("timer_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterEveryEvent_Access().getTimer_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAfterEveryEvent_Access().getTimer_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class AfterEveryEvent__RightParenthesisKeyword_3 extends KeywordToken  {
	
	public AfterEveryEvent__RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterEveryEvent_Access().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEveryEvent__Timer_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AfterEveryEvent_ ****************/


/************ begin Rule AfterEvent_ ****************
 *
 * AfterEvent_:
 * 	"after" "(" timer_1=ID ")";
 *
 **/

// "after" "(" timer_1=ID ")"
protected class AfterEvent__Group extends GroupToken {
	
	public AfterEvent__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAfterEvent_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEvent__RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAfterEvent_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "after"
protected class AfterEvent__AfterKeyword_0 extends KeywordToken  {
	
	public AfterEvent__AfterKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterEvent_Access().getAfterKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class AfterEvent__LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public AfterEvent__LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterEvent_Access().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEvent__AfterKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// timer_1=ID
protected class AfterEvent__Timer_1Assignment_2 extends AssignmentToken  {
	
	public AfterEvent__Timer_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAfterEvent_Access().getTimer_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEvent__LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("timer_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("timer_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAfterEvent_Access().getTimer_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAfterEvent_Access().getTimer_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class AfterEvent__RightParenthesisKeyword_3 extends KeywordToken  {
	
	public AfterEvent__RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAfterEvent_Access().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AfterEvent__Timer_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AfterEvent_ ****************/


/************ begin Rule Action_ ****************
 *
 * Action_:
 * 	"/" Anonymous_action_1_1+=Anonymous_action_1_? "{" code_1=block "}" Anonymous_action_2_1+=Anonymous_action_2_*;
 *
 **/

// "/" Anonymous_action_1_1+=Anonymous_action_1_? "{" code_1=block "}" Anonymous_action_2_1+=Anonymous_action_2_*
protected class Action__Group extends GroupToken {
	
	public Action__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAction_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Anonymous_action_2_1Assignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Action__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAction_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "/"
protected class Action__SolidusKeyword_0 extends KeywordToken  {
	
	public Action__SolidusKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAction_Access().getSolidusKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Anonymous_action_1_1+=Anonymous_action_1_?
protected class Action__Anonymous_action_1_1Assignment_1 extends AssignmentToken  {
	
	public Action__Anonymous_action_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAction_Access().getAnonymous_action_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_action_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_action_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_action_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_action_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAction_Access().getAnonymous_action_1_1Anonymous_action_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action__SolidusKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Action__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Action__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAction_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Anonymous_action_1_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Action__SolidusKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class Action__Code_1Assignment_3 extends AssignmentToken  {
	
	public Action__Code_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAction_Access().getCode_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAction_Access().getCode_1BlockTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAction_Access().getCode_1BlockTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class Action__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Action__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAction_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Action__Code_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_action_2_1+=Anonymous_action_2_*
protected class Action__Anonymous_action_2_1Assignment_5 extends AssignmentToken  {
	
	public Action__Anonymous_action_2_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAction_Access().getAnonymous_action_2_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_action_2__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_action_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_action_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_action_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAction_Access().getAnonymous_action_2_1Anonymous_action_2_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Action__Anonymous_action_2_1Assignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Action__RightCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Action_ ****************/


/************ begin Rule Anonymous_action_1_ ****************
 *
 * Anonymous_action_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_action_1__Group extends GroupToken {
	
	public Anonymous_action_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_action_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_action_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_action_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_action_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_action_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_action_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_action_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_action_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_action_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_action_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_action_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_action_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_action_1_ ****************/


/************ begin Rule Anonymous_action_2_ ****************
 *
 * Anonymous_action_2_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_action_2__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_action_2__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_action_2_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_action_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_action_2_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_action_2_ ****************/


/************ begin Rule EntryOrExitAction_ ****************
 *
 * EntryOrExitAction_:
 * 	type_1=("entry" | "exit") "/" Anonymous_entryOrExitAction_1_1+=Anonymous_entryOrExitAction_1_? "{" code_1=block "}"
 * 	Anonymous_entryOrExitAction_2_1+=Anonymous_entryOrExitAction_2_*;
 *
 **/

// type_1=("entry" | "exit") "/" Anonymous_entryOrExitAction_1_1+=Anonymous_entryOrExitAction_1_? "{" code_1=block "}"
// Anonymous_entryOrExitAction_2_1+=Anonymous_entryOrExitAction_2_*
protected class EntryOrExitAction__Group extends GroupToken {
	
	public EntryOrExitAction__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryOrExitAction__Anonymous_entryOrExitAction_2_1Assignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EntryOrExitAction__RightCurlyBracketKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEntryOrExitAction_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// type_1=("entry" | "exit")
protected class EntryOrExitAction__Type_1Assignment_0 extends AssignmentToken  {
	
	public EntryOrExitAction__Type_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getType_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getEntryOrExitAction_Access().getType_1EntryKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEntryOrExitAction_Access().getType_1EntryKeyword_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getEntryOrExitAction_Access().getType_1ExitKeyword_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEntryOrExitAction_Access().getType_1ExitKeyword_0_0_1();
			return obj;
		}
		return null;
	}

}

// "/"
protected class EntryOrExitAction__SolidusKeyword_1 extends KeywordToken  {
	
	public EntryOrExitAction__SolidusKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getSolidusKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryOrExitAction__Type_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_entryOrExitAction_1_1+=Anonymous_entryOrExitAction_1_?
protected class EntryOrExitAction__Anonymous_entryOrExitAction_1_1Assignment_2 extends AssignmentToken  {
	
	public EntryOrExitAction__Anonymous_entryOrExitAction_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getAnonymous_entryOrExitAction_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_entryOrExitAction_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_entryOrExitAction_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_entryOrExitAction_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_entryOrExitAction_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntryOrExitAction_Access().getAnonymous_entryOrExitAction_1_1Anonymous_entryOrExitAction_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EntryOrExitAction__SolidusKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class EntryOrExitAction__LeftCurlyBracketKeyword_3 extends KeywordToken  {
	
	public EntryOrExitAction__LeftCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getLeftCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryOrExitAction__Anonymous_entryOrExitAction_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EntryOrExitAction__SolidusKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class EntryOrExitAction__Code_1Assignment_4 extends AssignmentToken  {
	
	public EntryOrExitAction__Code_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getCode_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryOrExitAction__LeftCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEntryOrExitAction_Access().getCode_1BlockTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEntryOrExitAction_Access().getCode_1BlockTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class EntryOrExitAction__RightCurlyBracketKeyword_5 extends KeywordToken  {
	
	public EntryOrExitAction__RightCurlyBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getRightCurlyBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EntryOrExitAction__Code_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_entryOrExitAction_2_1+=Anonymous_entryOrExitAction_2_*
protected class EntryOrExitAction__Anonymous_entryOrExitAction_2_1Assignment_6 extends AssignmentToken  {
	
	public EntryOrExitAction__Anonymous_entryOrExitAction_2_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEntryOrExitAction_Access().getAnonymous_entryOrExitAction_2_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_entryOrExitAction_2__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_entryOrExitAction_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_entryOrExitAction_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_entryOrExitAction_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEntryOrExitAction_Access().getAnonymous_entryOrExitAction_2_1Anonymous_entryOrExitAction_2_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EntryOrExitAction__Anonymous_entryOrExitAction_2_1Assignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EntryOrExitAction__RightCurlyBracketKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule EntryOrExitAction_ ****************/


/************ begin Rule Anonymous_entryOrExitAction_1_ ****************
 *
 * Anonymous_entryOrExitAction_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_entryOrExitAction_1__Group extends GroupToken {
	
	public Anonymous_entryOrExitAction_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_entryOrExitAction_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_entryOrExitAction_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_entryOrExitAction_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_entryOrExitAction_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_entryOrExitAction_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_entryOrExitAction_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_entryOrExitAction_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_entryOrExitAction_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_entryOrExitAction_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_entryOrExitAction_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_entryOrExitAction_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_entryOrExitAction_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_entryOrExitAction_1_ ****************/


/************ begin Rule Anonymous_entryOrExitAction_2_ ****************
 *
 * Anonymous_entryOrExitAction_2_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_entryOrExitAction_2__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_entryOrExitAction_2__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_entryOrExitAction_2_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_entryOrExitAction_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_entryOrExitAction_2_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_entryOrExitAction_2_ ****************/


/************ begin Rule Activity_ ****************
 *
 * Activity_:
 * 	"do" Anonymous_activity_1_1+=Anonymous_activity_1_? "{" code_1=block "}"
 * 	Anonymous_activity_2_1+=Anonymous_activity_2_*;
 *
 **/

// "do" Anonymous_activity_1_1+=Anonymous_activity_1_? "{" code_1=block "}" Anonymous_activity_2_1+=Anonymous_activity_2_*
protected class Activity__Group extends GroupToken {
	
	public Activity__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getActivity_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Activity__Anonymous_activity_2_1Assignment_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Activity__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getActivity_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "do"
protected class Activity__DoKeyword_0 extends KeywordToken  {
	
	public Activity__DoKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActivity_Access().getDoKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Anonymous_activity_1_1+=Anonymous_activity_1_?
protected class Activity__Anonymous_activity_1_1Assignment_1 extends AssignmentToken  {
	
	public Activity__Anonymous_activity_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActivity_Access().getAnonymous_activity_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_activity_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_activity_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_activity_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_activity_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActivity_Access().getAnonymous_activity_1_1Anonymous_activity_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Activity__DoKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Activity__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Activity__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActivity_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Activity__Anonymous_activity_1_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Activity__DoKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// code_1=block
protected class Activity__Code_1Assignment_3 extends AssignmentToken  {
	
	public Activity__Code_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActivity_Access().getCode_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Activity__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getActivity_Access().getCode_1BlockTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getActivity_Access().getCode_1BlockTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class Activity__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public Activity__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getActivity_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Activity__Code_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_activity_2_1+=Anonymous_activity_2_*
protected class Activity__Anonymous_activity_2_1Assignment_5 extends AssignmentToken  {
	
	public Activity__Anonymous_activity_2_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getActivity_Access().getAnonymous_activity_2_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_activity_2__MoreCode_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_activity_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_activity_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_activity_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getActivity_Access().getAnonymous_activity_2_1Anonymous_activity_2_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Activity__Anonymous_activity_2_1Assignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Activity__RightCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Activity_ ****************/


/************ begin Rule Anonymous_activity_1_ ****************
 *
 * Anonymous_activity_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_activity_1__Group extends GroupToken {
	
	public Anonymous_activity_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_activity_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_activity_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_activity_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_activity_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_activity_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_activity_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_activity_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_activity_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_activity_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_activity_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_activity_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_activity_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_activity_1_ ****************/


/************ begin Rule Anonymous_activity_2_ ****************
 *
 * Anonymous_activity_2_:
 * 	MoreCode_1+=MoreCode_;
 *
 **/

// MoreCode_1+=MoreCode_
protected class Anonymous_activity_2__MoreCode_1Assignment extends AssignmentToken  {
	
	public Anonymous_activity_2__MoreCode_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_activity_2_Access().getMoreCode_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreCode__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_activity_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreCode_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreCode_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreCode_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_activity_2_Access().getMoreCode_1MoreCode_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_activity_2_ ****************/


/************ begin Rule MoreGuards_ ****************
 *
 * MoreGuards_:
 * 	Anonymous_moreGuards_1_1+=Anonymous_moreGuards_1_? "[" code_1=block "]";
 *
 **/

// Anonymous_moreGuards_1_1+=Anonymous_moreGuards_1_? "[" code_1=block "]"
protected class MoreGuards__Group extends GroupToken {
	
	public MoreGuards__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMoreGuards_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreGuards__RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMoreGuards_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_moreGuards_1_1+=Anonymous_moreGuards_1_?
protected class MoreGuards__Anonymous_moreGuards_1_1Assignment_0 extends AssignmentToken  {
	
	public MoreGuards__Anonymous_moreGuards_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMoreGuards_Access().getAnonymous_moreGuards_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_moreGuards_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_moreGuards_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_moreGuards_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_moreGuards_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMoreGuards_Access().getAnonymous_moreGuards_1_1Anonymous_moreGuards_1_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "["
protected class MoreGuards__LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public MoreGuards__LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMoreGuards_Access().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreGuards__Anonymous_moreGuards_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// code_1=block
protected class MoreGuards__Code_1Assignment_2 extends AssignmentToken  {
	
	public MoreGuards__Code_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMoreGuards_Access().getCode_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreGuards__LeftSquareBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMoreGuards_Access().getCode_1BlockTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getMoreGuards_Access().getCode_1BlockTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class MoreGuards__RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public MoreGuards__RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMoreGuards_Access().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreGuards__Code_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule MoreGuards_ ****************/


/************ begin Rule Anonymous_moreGuards_1_ ****************
 *
 * Anonymous_moreGuards_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_moreGuards_1__Group extends GroupToken {
	
	public Anonymous_moreGuards_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_moreGuards_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_moreGuards_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_moreGuards_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_moreGuards_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_moreGuards_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_moreGuards_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_moreGuards_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_moreGuards_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_moreGuards_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_moreGuards_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_moreGuards_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_moreGuards_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_moreGuards_1_ ****************/


/************ begin Rule Guard_ ****************
 *
 * Guard_:
 * 	Anonymous_guard_1_1+=Anonymous_guard_1_? "[" code_1=block "]" Anonymous_guard_2_1+=Anonymous_guard_2_*;
 *
 **/

// Anonymous_guard_1_1+=Anonymous_guard_1_? "[" code_1=block "]" Anonymous_guard_2_1+=Anonymous_guard_2_*
protected class Guard__Group extends GroupToken {
	
	public Guard__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGuard_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Anonymous_guard_2_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Guard__RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGuard_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_guard_1_1+=Anonymous_guard_1_?
protected class Guard__Anonymous_guard_1_1Assignment_0 extends AssignmentToken  {
	
	public Guard__Anonymous_guard_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGuard_Access().getAnonymous_guard_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_guard_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_guard_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_guard_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_guard_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGuard_Access().getAnonymous_guard_1_1Anonymous_guard_1_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// "["
protected class Guard__LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public Guard__LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGuard_Access().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Anonymous_guard_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// code_1=block
protected class Guard__Code_1Assignment_2 extends AssignmentToken  {
	
	public Guard__Code_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGuard_Access().getCode_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__LeftSquareBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("code_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("code_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGuard_Access().getCode_1BlockTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGuard_Access().getCode_1BlockTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class Guard__RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public Guard__RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGuard_Access().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Guard__Code_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// Anonymous_guard_2_1+=Anonymous_guard_2_*
protected class Guard__Anonymous_guard_2_1Assignment_4 extends AssignmentToken  {
	
	public Guard__Anonymous_guard_2_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGuard_Access().getAnonymous_guard_2_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_guard_2__MoreGuards_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_guard_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_guard_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_guard_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGuard_Access().getAnonymous_guard_2_1Anonymous_guard_2_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Guard__Anonymous_guard_2_1Assignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Guard__RightSquareBracketKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Guard_ ****************/


/************ begin Rule Anonymous_guard_1_ ****************
 *
 * Anonymous_guard_1_:
 * 	CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_;
 *
 **/

// CodeLang_1+=CodeLang_ CodeLangs_1+=CodeLangs_
protected class Anonymous_guard_1__Group extends GroupToken {
	
	public Anonymous_guard_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_guard_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_guard_1__CodeLangs_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_guard_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CodeLang_1+=CodeLang_
protected class Anonymous_guard_1__CodeLang_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_guard_1__CodeLang_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_guard_1_Access().getCodeLang_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLang__CodeLang_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLang_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLang_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLang_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_guard_1_Access().getCodeLang_1CodeLang_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// CodeLangs_1+=CodeLangs_
protected class Anonymous_guard_1__CodeLangs_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_guard_1__CodeLangs_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_guard_1_Access().getCodeLangs_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CodeLangs__Anonymous_codeLangs_1_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("CodeLangs_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("CodeLangs_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCodeLangs_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_guard_1_Access().getCodeLangs_1CodeLangs_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_guard_1__CodeLang_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_guard_1_ ****************/


/************ begin Rule Anonymous_guard_2_ ****************
 *
 * Anonymous_guard_2_:
 * 	MoreGuards_1+=MoreGuards_;
 *
 **/

// MoreGuards_1+=MoreGuards_
protected class Anonymous_guard_2__MoreGuards_1Assignment extends AssignmentToken  {
	
	public Anonymous_guard_2__MoreGuards_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_guard_2_Access().getMoreGuards_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreGuards__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_guard_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("MoreGuards_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreGuards_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreGuards_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_guard_2_Access().getMoreGuards_1MoreGuards_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_guard_2_ ****************/


/************ begin Rule TraceType_ ****************
 *
 * TraceType_:
 * 	"tracer" tracerType_1=ID Anonymous_traceType_1_1+=Anonymous_traceType_1_?
 * 	Anonymous_traceType_2_1+=Anonymous_traceType_2_* ";";
 *
 **/

// "tracer" tracerType_1=ID Anonymous_traceType_1_1+=Anonymous_traceType_1_?
// Anonymous_traceType_2_1+=Anonymous_traceType_2_* ";"
protected class TraceType__Group extends GroupToken {
	
	public TraceType__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceType_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceType__SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceType_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "tracer"
protected class TraceType__TracerKeyword_0 extends KeywordToken  {
	
	public TraceType__TracerKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceType_Access().getTracerKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tracerType_1=ID
protected class TraceType__TracerType_1Assignment_1 extends AssignmentToken  {
	
	public TraceType__TracerType_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceType_Access().getTracerType_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceType__TracerKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tracerType_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tracerType_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceType_Access().getTracerType_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceType_Access().getTracerType_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_traceType_1_1+=Anonymous_traceType_1_?
protected class TraceType__Anonymous_traceType_1_1Assignment_2 extends AssignmentToken  {
	
	public TraceType__Anonymous_traceType_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceType_Access().getAnonymous_traceType_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceType_1__Verbisty_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_traceType_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_traceType_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_traceType_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceType_Access().getAnonymous_traceType_1_1Anonymous_traceType_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceType__TracerType_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_traceType_2_1+=Anonymous_traceType_2_*
protected class TraceType__Anonymous_traceType_2_1Assignment_3 extends AssignmentToken  {
	
	public TraceType__Anonymous_traceType_2_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceType_Access().getAnonymous_traceType_2_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceType_2__TracerArgument_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_traceType_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_traceType_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_traceType_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceType_Access().getAnonymous_traceType_2_1Anonymous_traceType_2_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceType__Anonymous_traceType_2_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TraceType__Anonymous_traceType_1_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new TraceType__TracerType_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class TraceType__SemicolonKeyword_4 extends KeywordToken  {
	
	public TraceType__SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceType_Access().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceType__Anonymous_traceType_2_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceType__Anonymous_traceType_1_1Assignment_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TraceType__TracerType_1Assignment_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}


/************ end Rule TraceType_ ****************/


/************ begin Rule Anonymous_traceType_1_ ****************
 *
 * Anonymous_traceType_1_:
 * 	verbisty_1="verbose";
 *
 **/

// verbisty_1="verbose"
protected class Anonymous_traceType_1__Verbisty_1Assignment extends AssignmentToken  {
	
	public Anonymous_traceType_1__Verbisty_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceType_1_Access().getVerbisty_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_traceType_1_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("verbisty_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("verbisty_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_traceType_1_Access().getVerbisty_1VerboseKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_traceType_1_Access().getVerbisty_1VerboseKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Anonymous_traceType_1_ ****************/


/************ begin Rule Anonymous_traceType_2_ ****************
 *
 * Anonymous_traceType_2_:
 * 	tracerArgument_1=ID;
 *
 **/

// tracerArgument_1=ID
protected class Anonymous_traceType_2__TracerArgument_1Assignment extends AssignmentToken  {
	
	public Anonymous_traceType_2__TracerArgument_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceType_2_Access().getTracerArgument_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_traceType_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("tracerArgument_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tracerArgument_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_traceType_2_Access().getTracerArgument_1IDTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_traceType_2_Access().getTracerArgument_1IDTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Anonymous_traceType_2_ ****************/


/************ begin Rule Trace_ ****************
 *
 * Trace_:
 * 	TraceDirective_1+=TraceDirective_ | TraceCase_1+=TraceCase_;
 *
 **/

// TraceDirective_1+=TraceDirective_ | TraceCase_1+=TraceCase_
protected class Trace__Alternatives extends AlternativesToken {

	public Trace__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTrace_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Trace__TraceDirective_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Trace__TraceCase_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTrace_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TraceDirective_1+=TraceDirective_
protected class Trace__TraceDirective_1Assignment_0 extends AssignmentToken  {
	
	public Trace__TraceDirective_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrace_Access().getTraceDirective_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDirective__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceDirective_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceDirective_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceDirective_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTrace_Access().getTraceDirective_1TraceDirective_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceCase_1+=TraceCase_
protected class Trace__TraceCase_1Assignment_1 extends AssignmentToken  {
	
	public Trace__TraceCase_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTrace_Access().getTraceCase_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCase__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceCase_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceCase_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceCase_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTrace_Access().getTraceCase_1TraceCase_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Trace_ ****************/


/************ begin Rule TraceDirective_ ****************
 *
 * TraceDirective_:
 * 	"trace" TraceItem_1+=TraceItem_ Anonymous_traceDirective_1_1+=Anonymous_traceDirective_1_* ";";
 *
 **/

// "trace" TraceItem_1+=TraceItem_ Anonymous_traceDirective_1_1+=Anonymous_traceDirective_1_* ";"
protected class TraceDirective__Group extends GroupToken {
	
	public TraceDirective__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceDirective_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDirective__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceDirective_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "trace"
protected class TraceDirective__TraceKeyword_0 extends KeywordToken  {
	
	public TraceDirective__TraceKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceDirective_Access().getTraceKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TraceItem_1+=TraceItem_
protected class TraceDirective__TraceItem_1Assignment_1 extends AssignmentToken  {
	
	public TraceDirective__TraceItem_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceDirective_Access().getTraceItem_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceItem__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceItem_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceItem_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceItem_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceDirective_Access().getTraceItem_1TraceItem_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceDirective__TraceKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_traceDirective_1_1+=Anonymous_traceDirective_1_*
protected class TraceDirective__Anonymous_traceDirective_1_1Assignment_2 extends AssignmentToken  {
	
	public TraceDirective__Anonymous_traceDirective_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceDirective_Access().getAnonymous_traceDirective_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceDirective_1__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_traceDirective_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_traceDirective_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_traceDirective_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceDirective_Access().getAnonymous_traceDirective_1_1Anonymous_traceDirective_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceDirective__Anonymous_traceDirective_1_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TraceDirective__TraceItem_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class TraceDirective__SemicolonKeyword_3 extends KeywordToken  {
	
	public TraceDirective__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceDirective_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDirective__Anonymous_traceDirective_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceDirective__TraceItem_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TraceDirective_ ****************/


/************ begin Rule Anonymous_traceDirective_1_ ****************
 *
 * Anonymous_traceDirective_1_:
 * 	ExecuteClause_1+=ExecuteClause_ | TraceWhen_1+=TraceWhen_ | TraceFor_1+=TraceFor_ | TracePeriod_1+=TracePeriod_ |
 * 	TraceDuring_1+=TraceDuring_ | TraceCaseActivation_1+=TraceCaseActivation_ | TraceRecord_1+=TraceRecord_ |
 * 	TraceLevel_1+=TraceLevel_;
 *
 **/

// ExecuteClause_1+=ExecuteClause_ | TraceWhen_1+=TraceWhen_ | TraceFor_1+=TraceFor_ | TracePeriod_1+=TracePeriod_ |
// TraceDuring_1+=TraceDuring_ | TraceCaseActivation_1+=TraceCaseActivation_ | TraceRecord_1+=TraceRecord_ |
// TraceLevel_1+=TraceLevel_
protected class Anonymous_traceDirective_1__Alternatives extends AlternativesToken {

	public Anonymous_traceDirective_1__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceDirective_1__ExecuteClause_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Anonymous_traceDirective_1__TraceWhen_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Anonymous_traceDirective_1__TraceFor_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Anonymous_traceDirective_1__TracePeriod_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Anonymous_traceDirective_1__TraceDuring_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Anonymous_traceDirective_1__TraceCaseActivation_1Assignment_5(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Anonymous_traceDirective_1__TraceRecord_1Assignment_6(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Anonymous_traceDirective_1__TraceLevel_1Assignment_7(lastRuleCallOrigin, this, 7, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_traceDirective_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ExecuteClause_1+=ExecuteClause_
protected class Anonymous_traceDirective_1__ExecuteClause_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__ExecuteClause_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getExecuteClause_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExecuteClause__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ExecuteClause_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ExecuteClause_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExecuteClause_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getExecuteClause_1ExecuteClause_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceWhen_1+=TraceWhen_
protected class Anonymous_traceDirective_1__TraceWhen_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TraceWhen_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTraceWhen_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceWhen__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceWhen_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceWhen_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceWhen_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTraceWhen_1TraceWhen_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceFor_1+=TraceFor_
protected class Anonymous_traceDirective_1__TraceFor_1Assignment_2 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TraceFor_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTraceFor_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceFor__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceFor_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceFor_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceFor_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTraceFor_1TraceFor_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TracePeriod_1+=TracePeriod_
protected class Anonymous_traceDirective_1__TracePeriod_1Assignment_3 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TracePeriod_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTracePeriod_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TracePeriod__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TracePeriod_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TracePeriod_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTracePeriod_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTracePeriod_1TracePeriod_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceDuring_1+=TraceDuring_
protected class Anonymous_traceDirective_1__TraceDuring_1Assignment_4 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TraceDuring_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTraceDuring_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDuring__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceDuring_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceDuring_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceDuring_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTraceDuring_1TraceDuring_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceCaseActivation_1+=TraceCaseActivation_
protected class Anonymous_traceDirective_1__TraceCaseActivation_1Assignment_5 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TraceCaseActivation_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTraceCaseActivation_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseActivation__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceCaseActivation_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceCaseActivation_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceCaseActivation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTraceCaseActivation_1TraceCaseActivation_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceRecord_1+=TraceRecord_
protected class Anonymous_traceDirective_1__TraceRecord_1Assignment_6 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TraceRecord_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTraceRecord_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceRecord__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceRecord_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceRecord_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceRecord_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTraceRecord_1TraceRecord_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceLevel_1+=TraceLevel_
protected class Anonymous_traceDirective_1__TraceLevel_1Assignment_7 extends AssignmentToken  {
	
	public Anonymous_traceDirective_1__TraceLevel_1Assignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceDirective_1_Access().getTraceLevel_1Assignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceLevel__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceLevel_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceLevel_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceLevel_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceDirective_1_Access().getTraceLevel_1TraceLevel_ParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Anonymous_traceDirective_1_ ****************/


/************ begin Rule TraceItem_ ****************
 *
 * TraceItem_:
 * 	TraceEntity_1+=TraceEntity_ | PreOrPostCondition_1+=PreOrPostCondition_;
 *
 **/

// TraceEntity_1+=TraceEntity_ | PreOrPostCondition_1+=PreOrPostCondition_
protected class TraceItem__Alternatives extends AlternativesToken {

	public TraceItem__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTraceItem_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceItem__TraceEntity_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceItem__PreOrPostCondition_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceItem_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TraceEntity_1+=TraceEntity_
protected class TraceItem__TraceEntity_1Assignment_0 extends AssignmentToken  {
	
	public TraceItem__TraceEntity_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceItem_Access().getTraceEntity_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceEntity__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceEntity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceEntity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceEntity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceItem_Access().getTraceEntity_1TraceEntity_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// PreOrPostCondition_1+=PreOrPostCondition_
protected class TraceItem__PreOrPostCondition_1Assignment_1 extends AssignmentToken  {
	
	public TraceItem__PreOrPostCondition_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceItem_Access().getPreOrPostCondition_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PreOrPostCondition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("PreOrPostCondition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("PreOrPostCondition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPreOrPostCondition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceItem_Access().getPreOrPostCondition_1PreOrPostCondition_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule TraceItem_ ****************/


/************ begin Rule TraceEntity_ ****************
 *
 * TraceEntity_:
 * 	TraceOptions_1+=TraceOptions_ trace_entity_1=ID Anonymous_traceEntity_1_1+=Anonymous_traceEntity_1_*;
 *
 **/

// TraceOptions_1+=TraceOptions_ trace_entity_1=ID Anonymous_traceEntity_1_1+=Anonymous_traceEntity_1_*
protected class TraceEntity__Group extends GroupToken {
	
	public TraceEntity__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceEntity_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceEntity__Anonymous_traceEntity_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceEntity__Trace_entity_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceEntity_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TraceOptions_1+=TraceOptions_
protected class TraceEntity__TraceOptions_1Assignment_0 extends AssignmentToken  {
	
	public TraceEntity__TraceOptions_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceEntity_Access().getTraceOptions_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceOptions__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceOptions_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceOptions_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceOptions_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceEntity_Access().getTraceOptions_1TraceOptions_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// trace_entity_1=ID
protected class TraceEntity__Trace_entity_1Assignment_1 extends AssignmentToken  {
	
	public TraceEntity__Trace_entity_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceEntity_Access().getTrace_entity_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceEntity__TraceOptions_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_entity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_entity_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceEntity_Access().getTrace_entity_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceEntity_Access().getTrace_entity_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_traceEntity_1_1+=Anonymous_traceEntity_1_*
protected class TraceEntity__Anonymous_traceEntity_1_1Assignment_2 extends AssignmentToken  {
	
	public TraceEntity__Anonymous_traceEntity_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceEntity_Access().getAnonymous_traceEntity_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceEntity_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_traceEntity_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_traceEntity_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_traceEntity_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceEntity_Access().getAnonymous_traceEntity_1_1Anonymous_traceEntity_1_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceEntity__Anonymous_traceEntity_1_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TraceEntity__Trace_entity_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TraceEntity_ ****************/


/************ begin Rule Anonymous_traceEntity_1_ ****************
 *
 * Anonymous_traceEntity_1_:
 * 	"," trace_entity_1=ID;
 *
 **/

// "," trace_entity_1=ID
protected class Anonymous_traceEntity_1__Group extends GroupToken {
	
	public Anonymous_traceEntity_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_traceEntity_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceEntity_1__Trace_entity_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_traceEntity_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_traceEntity_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_traceEntity_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_traceEntity_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// trace_entity_1=ID
protected class Anonymous_traceEntity_1__Trace_entity_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_traceEntity_1__Trace_entity_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceEntity_1_Access().getTrace_entity_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceEntity_1__CommaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_entity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_entity_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_traceEntity_1_Access().getTrace_entity_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_traceEntity_1_Access().getTrace_entity_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_traceEntity_1_ ****************/


/************ begin Rule TraceOptions_ ****************
 *
 * TraceOptions_:
 * 	TraceOption_1+=TraceOption_ Anonymous_traceOptions_1_1+=Anonymous_traceOptions_1_*;
 *
 **/

// TraceOption_1+=TraceOption_ Anonymous_traceOptions_1_1+=Anonymous_traceOptions_1_*
protected class TraceOptions__Group extends GroupToken {
	
	public TraceOptions__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceOptions_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceOptions__Anonymous_traceOptions_1_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceOptions__TraceOption_1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceOptions_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TraceOption_1+=TraceOption_
protected class TraceOptions__TraceOption_1Assignment_0 extends AssignmentToken  {
	
	public TraceOptions__TraceOption_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceOptions_Access().getTraceOption_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceOption__Option_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceOption_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceOption_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceOption_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceOptions_Access().getTraceOption_1TraceOption_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Anonymous_traceOptions_1_1+=Anonymous_traceOptions_1_*
protected class TraceOptions__Anonymous_traceOptions_1_1Assignment_1 extends AssignmentToken  {
	
	public TraceOptions__Anonymous_traceOptions_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceOptions_Access().getAnonymous_traceOptions_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceOptions_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_traceOptions_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_traceOptions_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_traceOptions_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceOptions_Access().getAnonymous_traceOptions_1_1Anonymous_traceOptions_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceOptions__Anonymous_traceOptions_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TraceOptions__TraceOption_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TraceOptions_ ****************/


/************ begin Rule Anonymous_traceOptions_1_ ****************
 *
 * Anonymous_traceOptions_1_:
 * 	"," TraceOption_1+=TraceOption_;
 *
 **/

// "," TraceOption_1+=TraceOption_
protected class Anonymous_traceOptions_1__Group extends GroupToken {
	
	public Anonymous_traceOptions_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_traceOptions_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_traceOptions_1__TraceOption_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_traceOptions_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_traceOptions_1__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_traceOptions_1__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_traceOptions_1_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TraceOption_1+=TraceOption_
protected class Anonymous_traceOptions_1__TraceOption_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_traceOptions_1__TraceOption_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_traceOptions_1_Access().getTraceOption_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceOption__Option_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceOption_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceOption_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceOption_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_traceOptions_1_Access().getTraceOption_1TraceOption_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_traceOptions_1__CommaKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_traceOptions_1_ ****************/


/************ begin Rule TraceOption_ ****************
 *
 * TraceOption_:
 * 	option_1=("set" | "get" | "in" | "out" | "entry" | "exit" | "cardinality" | "transition");
 *
 **/

// option_1=("set" | "get" | "in" | "out" | "entry" | "exit" | "cardinality" | "transition")
protected class TraceOption__Option_1Assignment extends AssignmentToken  {
	
	public TraceOption__Option_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceOption_Access().getOption_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceOption_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("option_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("option_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1SetKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1SetKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1GetKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1GetKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1InKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1InKeyword_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1OutKeyword_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1OutKeyword_0_3();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1EntryKeyword_0_4(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1EntryKeyword_0_4();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1ExitKeyword_0_5(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1ExitKeyword_0_5();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1CardinalityKeyword_0_6(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1CardinalityKeyword_0_6();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceOption_Access().getOption_1TransitionKeyword_0_7(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceOption_Access().getOption_1TransitionKeyword_0_7();
			return obj;
		}
		return null;
	}

}

/************ end Rule TraceOption_ ****************/


/************ begin Rule PreOrPostCondition_ ****************
 *
 * PreOrPostCondition_:
 * 	Anonymous_PreOrPostCondition_1_1+=Anonymous_PreOrPostCondition_1_? TraceCondition_1+=TraceCondition_;
 *
 **/

// Anonymous_PreOrPostCondition_1_1+=Anonymous_PreOrPostCondition_1_? TraceCondition_1+=TraceCondition_
protected class PreOrPostCondition__Group extends GroupToken {
	
	public PreOrPostCondition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPreOrPostCondition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new PreOrPostCondition__TraceCondition_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPreOrPostCondition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_PreOrPostCondition_1_1+=Anonymous_PreOrPostCondition_1_?
protected class PreOrPostCondition__Anonymous_PreOrPostCondition_1_1Assignment_0 extends AssignmentToken  {
	
	public PreOrPostCondition__Anonymous_PreOrPostCondition_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreOrPostCondition_Access().getAnonymous_PreOrPostCondition_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_PreOrPostCondition_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_PreOrPostCondition_1_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPreOrPostCondition_Access().getAnonymous_PreOrPostCondition_1_1Anonymous_PreOrPostCondition_1_ParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getPreOrPostCondition_Access().getAnonymous_PreOrPostCondition_1_1Anonymous_PreOrPostCondition_1_ParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// TraceCondition_1+=TraceCondition_
protected class PreOrPostCondition__TraceCondition_1Assignment_1 extends AssignmentToken  {
	
	public PreOrPostCondition__TraceCondition_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPreOrPostCondition_Access().getTraceCondition_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCondition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceCondition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceCondition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceCondition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPreOrPostCondition_Access().getTraceCondition_1TraceCondition_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new PreOrPostCondition__Anonymous_PreOrPostCondition_1_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}


/************ end Rule PreOrPostCondition_ ****************/



/************ begin Rule ExecuteClause_ ****************
 *
 * ExecuteClause_:
 * 	"execute" "{" trace_execute_1=block "}";
 *
 **/

// "execute" "{" trace_execute_1=block "}"
protected class ExecuteClause__Group extends GroupToken {
	
	public ExecuteClause__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getExecuteClause_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExecuteClause__RightCurlyBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExecuteClause_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "execute"
protected class ExecuteClause__ExecuteKeyword_0 extends KeywordToken  {
	
	public ExecuteClause__ExecuteKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExecuteClause_Access().getExecuteKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "{"
protected class ExecuteClause__LeftCurlyBracketKeyword_1 extends KeywordToken  {
	
	public ExecuteClause__LeftCurlyBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExecuteClause_Access().getLeftCurlyBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExecuteClause__ExecuteKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// trace_execute_1=block
protected class ExecuteClause__Trace_execute_1Assignment_2 extends AssignmentToken  {
	
	public ExecuteClause__Trace_execute_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExecuteClause_Access().getTrace_execute_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExecuteClause__LeftCurlyBracketKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_execute_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_execute_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getExecuteClause_Access().getTrace_execute_1BlockTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getExecuteClause_Access().getTrace_execute_1BlockTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "}"
protected class ExecuteClause__RightCurlyBracketKeyword_3 extends KeywordToken  {
	
	public ExecuteClause__RightCurlyBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getExecuteClause_Access().getRightCurlyBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ExecuteClause__Trace_execute_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ExecuteClause_ ****************/


/************ begin Rule TraceWhen_ ****************
 *
 * TraceWhen_:
 * 	conditionType_1=("where" | "until" | "after" | "giving")? "[" ConstraintToken_1+=ConstraintToken_ "]";
 *
 **/

// conditionType_1=("where" | "until" | "after" | "giving")? "[" ConstraintToken_1+=ConstraintToken_ "]"
protected class TraceWhen__Group extends GroupToken {
	
	public TraceWhen__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceWhen_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceWhen__RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceWhen_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// conditionType_1=("where" | "until" | "after" | "giving")?
protected class TraceWhen__ConditionType_1Assignment_0 extends AssignmentToken  {
	
	public TraceWhen__ConditionType_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceWhen_Access().getConditionType_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("conditionType_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("conditionType_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceWhen_Access().getConditionType_1WhereKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceWhen_Access().getConditionType_1WhereKeyword_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceWhen_Access().getConditionType_1UntilKeyword_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceWhen_Access().getConditionType_1UntilKeyword_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceWhen_Access().getConditionType_1AfterKeyword_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceWhen_Access().getConditionType_1AfterKeyword_0_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getTraceWhen_Access().getConditionType_1GivingKeyword_0_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getTraceWhen_Access().getConditionType_1GivingKeyword_0_0_3();
			return obj;
		}
		return null;
	}

}

// "["
protected class TraceWhen__LeftSquareBracketKeyword_1 extends KeywordToken  {
	
	public TraceWhen__LeftSquareBracketKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceWhen_Access().getLeftSquareBracketKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceWhen__ConditionType_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// ConstraintToken_1+=ConstraintToken_
protected class TraceWhen__ConstraintToken_1Assignment_2 extends AssignmentToken  {
	
	public TraceWhen__ConstraintToken_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceWhen_Access().getConstraintToken_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintToken__Constraint_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstraintToken_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintToken_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintToken_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceWhen_Access().getConstraintToken_1ConstraintToken_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceWhen__LeftSquareBracketKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class TraceWhen__RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public TraceWhen__RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceWhen_Access().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceWhen__ConstraintToken_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule TraceWhen_ ****************/


/************ begin Rule TraceFor_ ****************
 *
 * TraceFor_:
 * 	"for" trace_for_1=ID;
 *
 **/

// "for" trace_for_1=ID
protected class TraceFor__Group extends GroupToken {
	
	public TraceFor__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceFor_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceFor__Trace_for_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceFor_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "for"
protected class TraceFor__ForKeyword_0 extends KeywordToken  {
	
	public TraceFor__ForKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceFor_Access().getForKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// trace_for_1=ID
protected class TraceFor__Trace_for_1Assignment_1 extends AssignmentToken  {
	
	public TraceFor__Trace_for_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceFor_Access().getTrace_for_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceFor__ForKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_for_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_for_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceFor_Access().getTrace_for_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceFor_Access().getTrace_for_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TraceFor_ ****************/


/************ begin Rule TraceLevel_ ****************
 *
 * TraceLevel_:
 * 	"level" trace_level_1=ID;
 *
 **/

// "level" trace_level_1=ID
protected class TraceLevel__Group extends GroupToken {
	
	public TraceLevel__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceLevel_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceLevel__Trace_level_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceLevel_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "level"
protected class TraceLevel__LevelKeyword_0 extends KeywordToken  {
	
	public TraceLevel__LevelKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceLevel_Access().getLevelKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// trace_level_1=ID
protected class TraceLevel__Trace_level_1Assignment_1 extends AssignmentToken  {
	
	public TraceLevel__Trace_level_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceLevel_Access().getTrace_level_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceLevel__LevelKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_level_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_level_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceLevel_Access().getTrace_level_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceLevel_Access().getTrace_level_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TraceLevel_ ****************/


/************ begin Rule TracePeriod_ ****************
 *
 * TracePeriod_:
 * 	"period" trace_period_1=ID;
 *
 **/

// "period" trace_period_1=ID
protected class TracePeriod__Group extends GroupToken {
	
	public TracePeriod__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTracePeriod_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TracePeriod__Trace_period_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTracePeriod_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "period"
protected class TracePeriod__PeriodKeyword_0 extends KeywordToken  {
	
	public TracePeriod__PeriodKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTracePeriod_Access().getPeriodKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// trace_period_1=ID
protected class TracePeriod__Trace_period_1Assignment_1 extends AssignmentToken  {
	
	public TracePeriod__Trace_period_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTracePeriod_Access().getTrace_period_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TracePeriod__PeriodKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_period_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_period_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTracePeriod_Access().getTrace_period_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTracePeriod_Access().getTrace_period_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TracePeriod_ ****************/


/************ begin Rule TraceDuring_ ****************
 *
 * TraceDuring_:
 * 	"during" trace_duration_1=ID;
 *
 **/

// "during" trace_duration_1=ID
protected class TraceDuring__Group extends GroupToken {
	
	public TraceDuring__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceDuring_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDuring__Trace_duration_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceDuring_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "during"
protected class TraceDuring__DuringKeyword_0 extends KeywordToken  {
	
	public TraceDuring__DuringKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceDuring_Access().getDuringKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// trace_duration_1=ID
protected class TraceDuring__Trace_duration_1Assignment_1 extends AssignmentToken  {
	
	public TraceDuring__Trace_duration_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceDuring_Access().getTrace_duration_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDuring__DuringKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_duration_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_duration_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceDuring_Access().getTrace_duration_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceDuring_Access().getTrace_duration_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule TraceDuring_ ****************/


/************ begin Rule TraceRecord_ ****************
 *
 * TraceRecord_:
 * 	"record" RecordEntity_1+=RecordEntity_;
 *
 **/

// "record" RecordEntity_1+=RecordEntity_
protected class TraceRecord__Group extends GroupToken {
	
	public TraceRecord__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceRecord_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceRecord__RecordEntity_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceRecord_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "record"
protected class TraceRecord__RecordKeyword_0 extends KeywordToken  {
	
	public TraceRecord__RecordKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceRecord_Access().getRecordKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// RecordEntity_1+=RecordEntity_
protected class TraceRecord__RecordEntity_1Assignment_1 extends AssignmentToken  {
	
	public TraceRecord__RecordEntity_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceRecord_Access().getRecordEntity_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecordEntity__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("RecordEntity_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("RecordEntity_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRecordEntity_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceRecord_Access().getRecordEntity_1RecordEntity_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceRecord__RecordKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TraceRecord_ ****************/


/************ begin Rule RecordEntity_ ****************
 *
 * RecordEntity_:
 * 	Anonymous_recordEntity_1_1+=Anonymous_recordEntity_1_? trace_record_1=ID
 * 	Anonymous_recordEntity_2_1+=Anonymous_recordEntity_2_*;
 *
 **/

// Anonymous_recordEntity_1_1+=Anonymous_recordEntity_1_? trace_record_1=ID
// Anonymous_recordEntity_2_1+=Anonymous_recordEntity_2_*
protected class RecordEntity__Group extends GroupToken {
	
	public RecordEntity__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRecordEntity_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecordEntity__Anonymous_recordEntity_2_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new RecordEntity__Trace_record_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRecordEntity_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_recordEntity_1_1+=Anonymous_recordEntity_1_?
protected class RecordEntity__Anonymous_recordEntity_1_1Assignment_0 extends AssignmentToken  {
	
	public RecordEntity__Anonymous_recordEntity_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRecordEntity_Access().getAnonymous_recordEntity_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_recordEntity_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_recordEntity_1_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRecordEntity_Access().getAnonymous_recordEntity_1_1Anonymous_recordEntity_1_ParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRecordEntity_Access().getAnonymous_recordEntity_1_1Anonymous_recordEntity_1_ParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// trace_record_1=ID
protected class RecordEntity__Trace_record_1Assignment_1 extends AssignmentToken  {
	
	public RecordEntity__Trace_record_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRecordEntity_Access().getTrace_record_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RecordEntity__Anonymous_recordEntity_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_record_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_record_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRecordEntity_Access().getTrace_record_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRecordEntity_Access().getTrace_record_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_recordEntity_2_1+=Anonymous_recordEntity_2_*
protected class RecordEntity__Anonymous_recordEntity_2_1Assignment_2 extends AssignmentToken  {
	
	public RecordEntity__Anonymous_recordEntity_2_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRecordEntity_Access().getAnonymous_recordEntity_2_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_recordEntity_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_recordEntity_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_recordEntity_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_recordEntity_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRecordEntity_Access().getAnonymous_recordEntity_2_1Anonymous_recordEntity_2_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new RecordEntity__Anonymous_recordEntity_2_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new RecordEntity__Trace_record_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule RecordEntity_ ****************/



/************ begin Rule Anonymous_recordEntity_2_ ****************
 *
 * Anonymous_recordEntity_2_:
 * 	"," trace_record_1=ID;
 *
 **/

// "," trace_record_1=ID
protected class Anonymous_recordEntity_2__Group extends GroupToken {
	
	public Anonymous_recordEntity_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_recordEntity_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_recordEntity_2__Trace_record_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_recordEntity_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ","
protected class Anonymous_recordEntity_2__CommaKeyword_0 extends KeywordToken  {
	
	public Anonymous_recordEntity_2__CommaKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_recordEntity_2_Access().getCommaKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// trace_record_1=ID
protected class Anonymous_recordEntity_2__Trace_record_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_recordEntity_2__Trace_record_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_recordEntity_2_Access().getTrace_record_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_recordEntity_2__CommaKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("trace_record_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("trace_record_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_recordEntity_2_Access().getTrace_record_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_recordEntity_2_Access().getTrace_record_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_recordEntity_2_ ****************/


/************ begin Rule TraceCondition_ ****************
 *
 * TraceCondition_:
 * 	LHS_1=ID ConditionRHS_1+=ConditionRHS_;
 *
 **/

// LHS_1=ID ConditionRHS_1+=ConditionRHS_
protected class TraceCondition__Group extends GroupToken {
	
	public TraceCondition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceCondition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCondition__ConditionRHS_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceCondition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// LHS_1=ID
protected class TraceCondition__LHS_1Assignment_0 extends AssignmentToken  {
	
	public TraceCondition__LHS_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCondition_Access().getLHS_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("LHS_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("LHS_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceCondition_Access().getLHS_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceCondition_Access().getLHS_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ConditionRHS_1+=ConditionRHS_
protected class TraceCondition__ConditionRHS_1Assignment_1 extends AssignmentToken  {
	
	public TraceCondition__ConditionRHS_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCondition_Access().getConditionRHS_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConditionRHS__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConditionRHS_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConditionRHS_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConditionRHS_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceCondition_Access().getConditionRHS_1ConditionRHS_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceCondition__LHS_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule TraceCondition_ ****************/


/************ begin Rule ConditionRHS_ ****************
 *
 * ConditionRHS_:
 * 	comparison_operator_1=ID RHS_1=ID;
 *
 **/

// comparison_operator_1=ID RHS_1=ID
protected class ConditionRHS__Group extends GroupToken {
	
	public ConditionRHS__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConditionRHS_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConditionRHS__RHS_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConditionRHS_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// comparison_operator_1=ID
protected class ConditionRHS__Comparison_operator_1Assignment_0 extends AssignmentToken  {
	
	public ConditionRHS__Comparison_operator_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditionRHS_Access().getComparison_operator_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comparison_operator_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comparison_operator_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConditionRHS_Access().getComparison_operator_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConditionRHS_Access().getComparison_operator_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// RHS_1=ID
protected class ConditionRHS__RHS_1Assignment_1 extends AssignmentToken  {
	
	public ConditionRHS__RHS_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConditionRHS_Access().getRHS_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConditionRHS__Comparison_operator_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("RHS_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("RHS_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConditionRHS_Access().getRHS_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConditionRHS_Access().getRHS_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ConditionRHS_ ****************/


/************ begin Rule TraceCase_ ****************
 *
 * TraceCase_:
 * 	TraceCaseDef_1+=TraceCaseDef_ | TraceCaseActivation_1+=TraceCaseActivation_ |
 * 	TraceCaseDeactivation_1+=TraceCaseDeactivation_;
 *
 **/

// TraceCaseDef_1+=TraceCaseDef_ | TraceCaseActivation_1+=TraceCaseActivation_ |
// TraceCaseDeactivation_1+=TraceCaseDeactivation_
protected class TraceCase__Alternatives extends AlternativesToken {

	public TraceCase__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTraceCase_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCase__TraceCaseDef_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceCase__TraceCaseActivation_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TraceCase__TraceCaseDeactivation_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceCase_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TraceCaseDef_1+=TraceCaseDef_
protected class TraceCase__TraceCaseDef_1Assignment_0 extends AssignmentToken  {
	
	public TraceCase__TraceCaseDef_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCase_Access().getTraceCaseDef_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDef__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceCaseDef_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceCaseDef_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceCaseDef_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceCase_Access().getTraceCaseDef_1TraceCaseDef_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceCaseActivation_1+=TraceCaseActivation_
protected class TraceCase__TraceCaseActivation_1Assignment_1 extends AssignmentToken  {
	
	public TraceCase__TraceCaseActivation_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCase_Access().getTraceCaseActivation_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseActivation__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceCaseActivation_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceCaseActivation_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceCaseActivation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceCase_Access().getTraceCaseActivation_1TraceCaseActivation_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// TraceCaseDeactivation_1+=TraceCaseDeactivation_
protected class TraceCase__TraceCaseDeactivation_1Assignment_2 extends AssignmentToken  {
	
	public TraceCase__TraceCaseDeactivation_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCase_Access().getTraceCaseDeactivation_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDeactivation__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceCaseDeactivation_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceCaseDeactivation_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceCaseDeactivation_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceCase_Access().getTraceCaseDeactivation_1TraceCaseDeactivation_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule TraceCase_ ****************/


/************ begin Rule TraceCaseDef_ ****************
 *
 * TraceCaseDef_:
 * 	"tracecase" tracecase_name_1=ID "{" TraceDirective_1+=TraceDirective_* "}";
 *
 **/

// "tracecase" tracecase_name_1=ID "{" TraceDirective_1+=TraceDirective_* "}"
protected class TraceCaseDef__Group extends GroupToken {
	
	public TraceCaseDef__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceCaseDef_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDef__RightCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceCaseDef_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "tracecase"
protected class TraceCaseDef__TracecaseKeyword_0 extends KeywordToken  {
	
	public TraceCaseDef__TracecaseKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseDef_Access().getTracecaseKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tracecase_name_1=ID
protected class TraceCaseDef__Tracecase_name_1Assignment_1 extends AssignmentToken  {
	
	public TraceCaseDef__Tracecase_name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCaseDef_Access().getTracecase_name_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDef__TracecaseKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tracecase_name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tracecase_name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceCaseDef_Access().getTracecase_name_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceCaseDef_Access().getTracecase_name_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class TraceCaseDef__LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public TraceCaseDef__LeftCurlyBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseDef_Access().getLeftCurlyBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDef__Tracecase_name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// TraceDirective_1+=TraceDirective_*
protected class TraceCaseDef__TraceDirective_1Assignment_3 extends AssignmentToken  {
	
	public TraceCaseDef__TraceDirective_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCaseDef_Access().getTraceDirective_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceDirective__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("TraceDirective_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("TraceDirective_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTraceDirective_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceCaseDef_Access().getTraceDirective_1TraceDirective_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceCaseDef__TraceDirective_1Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TraceCaseDef__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class TraceCaseDef__RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public TraceCaseDef__RightCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseDef_Access().getRightCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDef__TraceDirective_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceCaseDef__LeftCurlyBracketKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TraceCaseDef_ ****************/


/************ begin Rule TraceCaseActivation_ ****************
 *
 * TraceCaseActivation_:
 * 	"activate" tracecase_act_name_1=ID Anonymous_traceCaseActivation_1_1+=Anonymous_traceCaseActivation_1_? ";";
 *
 **/

// "activate" tracecase_act_name_1=ID Anonymous_traceCaseActivation_1_1+=Anonymous_traceCaseActivation_1_? ";"
protected class TraceCaseActivation__Group extends GroupToken {
	
	public TraceCaseActivation__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceCaseActivation_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseActivation__SemicolonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceCaseActivation_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "activate"
protected class TraceCaseActivation__ActivateKeyword_0 extends KeywordToken  {
	
	public TraceCaseActivation__ActivateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseActivation_Access().getActivateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tracecase_act_name_1=ID
protected class TraceCaseActivation__Tracecase_act_name_1Assignment_1 extends AssignmentToken  {
	
	public TraceCaseActivation__Tracecase_act_name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCaseActivation_Access().getTracecase_act_name_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseActivation__ActivateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tracecase_act_name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tracecase_act_name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceCaseActivation_Access().getTracecase_act_name_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceCaseActivation_Access().getTracecase_act_name_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_traceCaseActivation_1_1+=Anonymous_traceCaseActivation_1_?
protected class TraceCaseActivation__Anonymous_traceCaseActivation_1_1Assignment_2 extends AssignmentToken  {
	
	public TraceCaseActivation__Anonymous_traceCaseActivation_1_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCaseActivation_Access().getAnonymous_traceCaseActivation_1_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseActivation__Tracecase_act_name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_traceCaseActivation_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_traceCaseActivation_1_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceCaseActivation_Access().getAnonymous_traceCaseActivation_1_1Anonymous_traceCaseActivation_1_ParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTraceCaseActivation_Access().getAnonymous_traceCaseActivation_1_1Anonymous_traceCaseActivation_1_ParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class TraceCaseActivation__SemicolonKeyword_3 extends KeywordToken  {
	
	public TraceCaseActivation__SemicolonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseActivation_Access().getSemicolonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseActivation__Anonymous_traceCaseActivation_1_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceCaseActivation__Tracecase_act_name_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TraceCaseActivation_ ****************/



/************ begin Rule TraceCaseDeactivation_ ****************
 *
 * TraceCaseDeactivation_:
 * 	"deactivate" tracecase_deact_name_1=ID "onThisObject" DeActivateFor_1+=DeActivateFor_? ";";
 *
 **/

// "deactivate" tracecase_deact_name_1=ID "onThisObject" DeActivateFor_1+=DeActivateFor_? ";"
protected class TraceCaseDeactivation__Group extends GroupToken {
	
	public TraceCaseDeactivation__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTraceCaseDeactivation_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDeactivation__SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTraceCaseDeactivation_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "deactivate"
protected class TraceCaseDeactivation__DeactivateKeyword_0 extends KeywordToken  {
	
	public TraceCaseDeactivation__DeactivateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseDeactivation_Access().getDeactivateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tracecase_deact_name_1=ID
protected class TraceCaseDeactivation__Tracecase_deact_name_1Assignment_1 extends AssignmentToken  {
	
	public TraceCaseDeactivation__Tracecase_deact_name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCaseDeactivation_Access().getTracecase_deact_name_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDeactivation__DeactivateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tracecase_deact_name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tracecase_deact_name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTraceCaseDeactivation_Access().getTracecase_deact_name_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getTraceCaseDeactivation_Access().getTracecase_deact_name_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "onThisObject"
protected class TraceCaseDeactivation__OnThisObjectKeyword_2 extends KeywordToken  {
	
	public TraceCaseDeactivation__OnThisObjectKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseDeactivation_Access().getOnThisObjectKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDeactivation__Tracecase_deact_name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// DeActivateFor_1+=DeActivateFor_?
protected class TraceCaseDeactivation__DeActivateFor_1Assignment_3 extends AssignmentToken  {
	
	public TraceCaseDeactivation__DeActivateFor_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTraceCaseDeactivation_Access().getDeActivateFor_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeActivateFor__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("DeActivateFor_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("DeActivateFor_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeActivateFor_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTraceCaseDeactivation_Access().getDeActivateFor_1DeActivateFor_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TraceCaseDeactivation__OnThisObjectKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class TraceCaseDeactivation__SemicolonKeyword_4 extends KeywordToken  {
	
	public TraceCaseDeactivation__SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTraceCaseDeactivation_Access().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TraceCaseDeactivation__DeActivateFor_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TraceCaseDeactivation__OnThisObjectKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


/************ end Rule TraceCaseDeactivation_ ****************/


/************ begin Rule DeActivateFor_ ****************
 *
 * DeActivateFor_:
 * 	"for" deactivate_for_1=ID;
 *
 **/

// "for" deactivate_for_1=ID
protected class DeActivateFor__Group extends GroupToken {
	
	public DeActivateFor__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDeActivateFor_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeActivateFor__Deactivate_for_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDeActivateFor_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "for"
protected class DeActivateFor__ForKeyword_0 extends KeywordToken  {
	
	public DeActivateFor__ForKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDeActivateFor_Access().getForKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// deactivate_for_1=ID
protected class DeActivateFor__Deactivate_for_1Assignment_1 extends AssignmentToken  {
	
	public DeActivateFor__Deactivate_for_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDeActivateFor_Access().getDeactivate_for_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeActivateFor__ForKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("deactivate_for_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("deactivate_for_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDeActivateFor_Access().getDeactivate_for_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDeActivateFor_Access().getDeactivate_for_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DeActivateFor_ ****************/


/************ begin Rule Precondition_ ****************
 *
 * Precondition_:
 * 	"[" name_1=ID? "pre:" Constraint_1+=Constraint_ "]";
 *
 **/

// "[" name_1=ID? "pre:" Constraint_1+=Constraint_ "]"
protected class Precondition__Group extends GroupToken {
	
	public Precondition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPrecondition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Precondition__RightSquareBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPrecondition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Precondition__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Precondition__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrecondition_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID?
protected class Precondition__Name_1Assignment_1 extends AssignmentToken  {
	
	public Precondition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrecondition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Precondition__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPrecondition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPrecondition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "pre:"
protected class Precondition__PreKeyword_2 extends KeywordToken  {
	
	public Precondition__PreKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrecondition_Access().getPreKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Precondition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Precondition__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// Constraint_1+=Constraint_
protected class Precondition__Constraint_1Assignment_3 extends AssignmentToken  {
	
	public Precondition__Constraint_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPrecondition_Access().getConstraint_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPrecondition_Access().getConstraint_1Constraint_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Precondition__PreKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Precondition__RightSquareBracketKeyword_4 extends KeywordToken  {
	
	public Precondition__RightSquareBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPrecondition_Access().getRightSquareBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Precondition__Constraint_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Precondition_ ****************/


/************ begin Rule Postcondition_ ****************
 *
 * Postcondition_:
 * 	"[" name_1=ID? "post:" Constraint_1+=Constraint_ "]";
 *
 **/

// "[" name_1=ID? "post:" Constraint_1+=Constraint_ "]"
protected class Postcondition__Group extends GroupToken {
	
	public Postcondition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getPostcondition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postcondition__RightSquareBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPostcondition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Postcondition__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Postcondition__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPostcondition_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID?
protected class Postcondition__Name_1Assignment_1 extends AssignmentToken  {
	
	public Postcondition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostcondition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postcondition__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getPostcondition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getPostcondition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "post:"
protected class Postcondition__PostKeyword_2 extends KeywordToken  {
	
	public Postcondition__PostKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPostcondition_Access().getPostKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postcondition__Name_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Postcondition__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// Constraint_1+=Constraint_
protected class Postcondition__Constraint_1Assignment_3 extends AssignmentToken  {
	
	public Postcondition__Constraint_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPostcondition_Access().getConstraint_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPostcondition_Access().getConstraint_1Constraint_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Postcondition__PostKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Postcondition__RightSquareBracketKeyword_4 extends KeywordToken  {
	
	public Postcondition__RightSquareBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getPostcondition_Access().getRightSquareBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Postcondition__Constraint_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Postcondition_ ****************/


/************ begin Rule Invariant_ ****************
 *
 * Invariant_:
 * 	"[" Anonymous_invariant_1_1+=Anonymous_invariant_1_? Anonymous_invariant_2_1+=Anonymous_invariant_2_ "]";
 *
 **/

// "[" Anonymous_invariant_1_1+=Anonymous_invariant_1_? Anonymous_invariant_2_1+=Anonymous_invariant_2_ "]"
protected class Invariant__Group extends GroupToken {
	
	public Invariant__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInvariant_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Invariant__RightSquareBracketKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInvariant_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Invariant__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Invariant__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInvariant_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Anonymous_invariant_1_1+=Anonymous_invariant_1_?
protected class Invariant__Anonymous_invariant_1_1Assignment_1 extends AssignmentToken  {
	
	public Invariant__Anonymous_invariant_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInvariant_Access().getAnonymous_invariant_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_invariant_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_invariant_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_invariant_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_invariant_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInvariant_Access().getAnonymous_invariant_1_1Anonymous_invariant_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Invariant__LeftSquareBracketKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_invariant_2_1+=Anonymous_invariant_2_
protected class Invariant__Anonymous_invariant_2_1Assignment_2 extends AssignmentToken  {
	
	public Invariant__Anonymous_invariant_2_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInvariant_Access().getAnonymous_invariant_2_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_invariant_2__Constraint_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_invariant_2_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_invariant_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_invariant_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getInvariant_Access().getAnonymous_invariant_2_1Anonymous_invariant_2_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Invariant__Anonymous_invariant_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Invariant__LeftSquareBracketKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Invariant__RightSquareBracketKeyword_3 extends KeywordToken  {
	
	public Invariant__RightSquareBracketKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getInvariant_Access().getRightSquareBracketKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Invariant__Anonymous_invariant_2_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Invariant_ ****************/


/************ begin Rule Anonymous_invariant_1_ ****************
 *
 * Anonymous_invariant_1_:
 * 	name_1=ID ":";
 *
 **/

// name_1=ID ":"
protected class Anonymous_invariant_1__Group extends GroupToken {
	
	public Anonymous_invariant_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_invariant_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_invariant_1__ColonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_invariant_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=ID
protected class Anonymous_invariant_1__Name_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_invariant_1__Name_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_invariant_1_Access().getName_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_invariant_1_Access().getName_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_invariant_1_Access().getName_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class Anonymous_invariant_1__ColonKeyword_1 extends KeywordToken  {
	
	public Anonymous_invariant_1__ColonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_invariant_1_Access().getColonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_invariant_1__Name_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Anonymous_invariant_1_ ****************/


/************ begin Rule Anonymous_invariant_2_ ****************
 *
 * Anonymous_invariant_2_:
 * 	Constraint_1+=Constraint_;
 *
 **/

// Constraint_1+=Constraint_
protected class Anonymous_invariant_2__Constraint_1Assignment extends AssignmentToken  {
	
	public Anonymous_invariant_2__Constraint_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_invariant_2_Access().getConstraint_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_invariant_2_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_invariant_2_Access().getConstraint_1Constraint_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_invariant_2_ ****************/


/************ begin Rule ConstraintToken_ ****************
 *
 * ConstraintToken_:
 * 	Constraint_1+=Constraint_;
 *
 **/

// Constraint_1+=Constraint_
protected class ConstraintToken__Constraint_1Assignment extends AssignmentToken  {
	
	public ConstraintToken__Constraint_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintToken_Access().getConstraint_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstraintToken_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintToken_Access().getConstraint_1Constraint_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule ConstraintToken_ ****************/


/************ begin Rule Constraint_ ****************
 *
 * Constraint_:
 * 	"(" Anonymous_constraint_1_1+=Anonymous_constraint_1_ ")" | ConstraintBody_1+=ConstraintBody_;
 *
 **/

// "(" Anonymous_constraint_1_1+=Anonymous_constraint_1_ ")" | ConstraintBody_1+=ConstraintBody_
protected class Constraint__Alternatives extends AlternativesToken {

	public Constraint__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstraint_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Constraint__ConstraintBody_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstraint_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "(" Anonymous_constraint_1_1+=Anonymous_constraint_1_ ")"
protected class Constraint__Group_0 extends GroupToken {
	
	public Constraint__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstraint_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__RightParenthesisKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class Constraint__LeftParenthesisKeyword_0_0 extends KeywordToken  {
	
	public Constraint__LeftParenthesisKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstraint_Access().getLeftParenthesisKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Anonymous_constraint_1_1+=Anonymous_constraint_1_
protected class Constraint__Anonymous_constraint_1_1Assignment_0_1 extends AssignmentToken  {
	
	public Constraint__Anonymous_constraint_1_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraint_Access().getAnonymous_constraint_1_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constraint_1__ConstraintBody_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_constraint_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_constraint_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_constraint_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraint_Access().getAnonymous_constraint_1_1Anonymous_constraint_1_ParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Constraint__LeftParenthesisKeyword_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class Constraint__RightParenthesisKeyword_0_2 extends KeywordToken  {
	
	public Constraint__RightParenthesisKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConstraint_Access().getRightParenthesisKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Anonymous_constraint_1_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// ConstraintBody_1+=ConstraintBody_
protected class Constraint__ConstraintBody_1Assignment_1 extends AssignmentToken  {
	
	public Constraint__ConstraintBody_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraint_Access().getConstraintBody_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintBody__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstraintBody_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintBody_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintBody_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraint_Access().getConstraintBody_1ConstraintBody_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Constraint_ ****************/


/************ begin Rule Anonymous_constraint_1_ ****************
 *
 * Anonymous_constraint_1_:
 * 	ConstraintBody_1+=ConstraintBody_;
 *
 **/

// ConstraintBody_1+=ConstraintBody_
protected class Anonymous_constraint_1__ConstraintBody_1Assignment extends AssignmentToken  {
	
	public Anonymous_constraint_1__ConstraintBody_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constraint_1_Access().getConstraintBody_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintBody__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_constraint_1_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("ConstraintBody_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintBody_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintBody_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_constraint_1_Access().getConstraintBody_1ConstraintBody_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_constraint_1_ ****************/


/************ begin Rule NegativeConstraint_ ****************
 *
 * NegativeConstraint_:
 * 	"!" Constraint_1+=Constraint_ | "not" Constraint_1+=Constraint_ | "~" Constraint_1+=Constraint_;
 *
 **/

// "!" Constraint_1+=Constraint_ | "not" Constraint_1+=Constraint_ | "~" Constraint_1+=Constraint_
protected class NegativeConstraint__Alternatives extends AlternativesToken {

	public NegativeConstraint__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NegativeConstraint__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NegativeConstraint__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NegativeConstraint__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNegativeConstraint_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "!" Constraint_1+=Constraint_
protected class NegativeConstraint__Group_0 extends GroupToken {
	
	public NegativeConstraint__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NegativeConstraint__Constraint_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "!"
protected class NegativeConstraint__ExclamationMarkKeyword_0_0 extends KeywordToken  {
	
	public NegativeConstraint__ExclamationMarkKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getExclamationMarkKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Constraint_1+=Constraint_
protected class NegativeConstraint__Constraint_1Assignment_0_1 extends AssignmentToken  {
	
	public NegativeConstraint__Constraint_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getConstraint_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNegativeConstraint_Access().getConstraint_1Constraint_ParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NegativeConstraint__ExclamationMarkKeyword_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "not" Constraint_1+=Constraint_
protected class NegativeConstraint__Group_1 extends GroupToken {
	
	public NegativeConstraint__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NegativeConstraint__Constraint_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "not"
protected class NegativeConstraint__NotKeyword_1_0 extends KeywordToken  {
	
	public NegativeConstraint__NotKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getNotKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Constraint_1+=Constraint_
protected class NegativeConstraint__Constraint_1Assignment_1_1 extends AssignmentToken  {
	
	public NegativeConstraint__Constraint_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getConstraint_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNegativeConstraint_Access().getConstraint_1Constraint_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NegativeConstraint__NotKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "~" Constraint_1+=Constraint_
protected class NegativeConstraint__Group_2 extends GroupToken {
	
	public NegativeConstraint__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NegativeConstraint__Constraint_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "~"
protected class NegativeConstraint__TildeKeyword_2_0 extends KeywordToken  {
	
	public NegativeConstraint__TildeKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getTildeKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// Constraint_1+=Constraint_
protected class NegativeConstraint__Constraint_1Assignment_2_1 extends AssignmentToken  {
	
	public NegativeConstraint__Constraint_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNegativeConstraint_Access().getConstraint_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Constraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Constraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNegativeConstraint_Access().getConstraint_1Constraint_ParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NegativeConstraint__TildeKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule NegativeConstraint_ ****************/


/************ begin Rule ConstraintBody_ ****************
 *
 * ConstraintBody_:
 * 	ConstraintExpr_1+=ConstraintExpr_ Anonymous_constraintBody_1_1+=Anonymous_constraintBody_1_*;
 *
 **/

// ConstraintExpr_1+=ConstraintExpr_ Anonymous_constraintBody_1_1+=Anonymous_constraintBody_1_*
protected class ConstraintBody__Group extends GroupToken {
	
	public ConstraintBody__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstraintBody_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintBody__Anonymous_constraintBody_1_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstraintBody__ConstraintExpr_1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstraintBody_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// ConstraintExpr_1+=ConstraintExpr_
protected class ConstraintBody__ConstraintExpr_1Assignment_0 extends AssignmentToken  {
	
	public ConstraintBody__ConstraintExpr_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintBody_Access().getConstraintExpr_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstraintExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintBody_Access().getConstraintExpr_1ConstraintExpr_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Anonymous_constraintBody_1_1+=Anonymous_constraintBody_1_*
protected class ConstraintBody__Anonymous_constraintBody_1_1Assignment_1 extends AssignmentToken  {
	
	public ConstraintBody__Anonymous_constraintBody_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintBody_Access().getAnonymous_constraintBody_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constraintBody_1__LinkingOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_constraintBody_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_constraintBody_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_constraintBody_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintBody_Access().getAnonymous_constraintBody_1_1Anonymous_constraintBody_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstraintBody__Anonymous_constraintBody_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ConstraintBody__ConstraintExpr_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ConstraintBody_ ****************/


/************ begin Rule Anonymous_constraintBody_1_ ****************
 *
 * Anonymous_constraintBody_1_:
 * 	LinkingOp_1+=LinkingOp_;
 *
 **/

// LinkingOp_1+=LinkingOp_
protected class Anonymous_constraintBody_1__LinkingOp_1Assignment extends AssignmentToken  {
	
	public Anonymous_constraintBody_1__LinkingOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constraintBody_1_Access().getLinkingOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LinkingOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_constraintBody_1_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("LinkingOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("LinkingOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLinkingOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_constraintBody_1_Access().getLinkingOp_1LinkingOp_ParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule Anonymous_constraintBody_1_ ****************/


/************ begin Rule LinkingOp_ ****************
 *
 * LinkingOp_:
 * 	Anonymous_linkingOp_1_1+=Anonymous_linkingOp_1_ | Anonymous_linkingOp_2_1+=Anonymous_linkingOp_2_ |
 * 	Anonymous_linkingOp_3_1+=Anonymous_linkingOp_3_;
 *
 **/

// Anonymous_linkingOp_1_1+=Anonymous_linkingOp_1_ | Anonymous_linkingOp_2_1+=Anonymous_linkingOp_2_ |
// Anonymous_linkingOp_3_1+=Anonymous_linkingOp_3_
protected class LinkingOp__Alternatives extends AlternativesToken {

	public LinkingOp__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getLinkingOp_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LinkingOp__Anonymous_linkingOp_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new LinkingOp__Anonymous_linkingOp_2_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new LinkingOp__Anonymous_linkingOp_3_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLinkingOp_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_linkingOp_1_1+=Anonymous_linkingOp_1_
protected class LinkingOp__Anonymous_linkingOp_1_1Assignment_0 extends AssignmentToken  {
	
	public LinkingOp__Anonymous_linkingOp_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkingOp_Access().getAnonymous_linkingOp_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_linkingOp_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_linkingOp_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_linkingOp_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_linkingOp_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLinkingOp_Access().getAnonymous_linkingOp_1_1Anonymous_linkingOp_1_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Anonymous_linkingOp_2_1+=Anonymous_linkingOp_2_
protected class LinkingOp__Anonymous_linkingOp_2_1Assignment_1 extends AssignmentToken  {
	
	public LinkingOp__Anonymous_linkingOp_2_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkingOp_Access().getAnonymous_linkingOp_2_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_linkingOp_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_linkingOp_2_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_linkingOp_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_linkingOp_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLinkingOp_Access().getAnonymous_linkingOp_2_1Anonymous_linkingOp_2_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// Anonymous_linkingOp_3_1+=Anonymous_linkingOp_3_
protected class LinkingOp__Anonymous_linkingOp_3_1Assignment_2 extends AssignmentToken  {
	
	public LinkingOp__Anonymous_linkingOp_3_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLinkingOp_Access().getAnonymous_linkingOp_3_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_linkingOp_3__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_linkingOp_3_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_linkingOp_3_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_linkingOp_3_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getLinkingOp_Access().getAnonymous_linkingOp_3_1Anonymous_linkingOp_3_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule LinkingOp_ ****************/


/************ begin Rule Anonymous_linkingOp_1_ ****************
 *
 * Anonymous_linkingOp_1_:
 * 	"||" ConstraintExpr_1+=ConstraintExpr_;
 *
 **/

// "||" ConstraintExpr_1+=ConstraintExpr_
protected class Anonymous_linkingOp_1__Group extends GroupToken {
	
	public Anonymous_linkingOp_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_linkingOp_1__ConstraintExpr_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_linkingOp_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "||"
protected class Anonymous_linkingOp_1__VerticalLineVerticalLineKeyword_0 extends KeywordToken  {
	
	public Anonymous_linkingOp_1__VerticalLineVerticalLineKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_1_Access().getVerticalLineVerticalLineKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ConstraintExpr_1+=ConstraintExpr_
protected class Anonymous_linkingOp_1__ConstraintExpr_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_linkingOp_1__ConstraintExpr_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_1_Access().getConstraintExpr_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstraintExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_linkingOp_1_Access().getConstraintExpr_1ConstraintExpr_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_linkingOp_1__VerticalLineVerticalLineKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_linkingOp_1_ ****************/


/************ begin Rule Anonymous_linkingOp_2_ ****************
 *
 * Anonymous_linkingOp_2_:
 * 	andOp_1=("and" | "&&" | "&") ConstraintExpr_1+=ConstraintExpr_;
 *
 **/

// andOp_1=("and" | "&&" | "&") ConstraintExpr_1+=ConstraintExpr_
protected class Anonymous_linkingOp_2__Group extends GroupToken {
	
	public Anonymous_linkingOp_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_linkingOp_2__ConstraintExpr_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_linkingOp_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// andOp_1=("and" | "&&" | "&")
protected class Anonymous_linkingOp_2__AndOp_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_linkingOp_2__AndOp_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("andOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("andOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1AndKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1AndKeyword_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1AmpersandAmpersandKeyword_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1AmpersandAmpersandKeyword_0_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1AmpersandKeyword_0_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_linkingOp_2_Access().getAndOp_1AmpersandKeyword_0_0_2();
			return obj;
		}
		return null;
	}

}

// ConstraintExpr_1+=ConstraintExpr_
protected class Anonymous_linkingOp_2__ConstraintExpr_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_linkingOp_2__ConstraintExpr_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_2_Access().getConstraintExpr_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstraintExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_linkingOp_2_Access().getConstraintExpr_1ConstraintExpr_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_linkingOp_2__AndOp_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_linkingOp_2_ ****************/


/************ begin Rule Anonymous_linkingOp_3_ ****************
 *
 * Anonymous_linkingOp_3_:
 * 	orOp_1="or" ConstraintExpr_1+=ConstraintExpr_;
 *
 **/

// orOp_1="or" ConstraintExpr_1+=ConstraintExpr_
protected class Anonymous_linkingOp_3__Group extends GroupToken {
	
	public Anonymous_linkingOp_3__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_3_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_linkingOp_3__ConstraintExpr_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_linkingOp_3_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// orOp_1="or"
protected class Anonymous_linkingOp_3__OrOp_1Assignment_0 extends AssignmentToken  {
	
	public Anonymous_linkingOp_3__OrOp_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_3_Access().getOrOp_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("orOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("orOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_linkingOp_3_Access().getOrOp_1OrKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnonymous_linkingOp_3_Access().getOrOp_1OrKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// ConstraintExpr_1+=ConstraintExpr_
protected class Anonymous_linkingOp_3__ConstraintExpr_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_linkingOp_3__ConstraintExpr_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_linkingOp_3_Access().getConstraintExpr_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ConstraintExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ConstraintExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstraintExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAnonymous_linkingOp_3_Access().getConstraintExpr_1ConstraintExpr_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Anonymous_linkingOp_3__OrOp_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Anonymous_linkingOp_3_ ****************/


/************ begin Rule ConstraintExpr_ ****************
 *
 * ConstraintExpr_:
 * 	NegativeConstraint_1+=NegativeConstraint_ | StringExpr_1+=StringExpr_ | BoolExpr_1+=BoolExpr_ | GenExpr_1+=GenExpr_ |
 * 	NumExpr_1+=NumExpr_ | loneBoolean_1=ID Anonymous_constraintExpr_1_1+=Anonymous_constraintExpr_1_?;
 *
 **/

// NegativeConstraint_1+=NegativeConstraint_ | StringExpr_1+=StringExpr_ | BoolExpr_1+=BoolExpr_ | GenExpr_1+=GenExpr_ |
// NumExpr_1+=NumExpr_ | loneBoolean_1=ID Anonymous_constraintExpr_1_1+=Anonymous_constraintExpr_1_?
protected class ConstraintExpr__Alternatives extends AlternativesToken {

	public ConstraintExpr__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintExpr__NegativeConstraint_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstraintExpr__StringExpr_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new ConstraintExpr__BoolExpr_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new ConstraintExpr__GenExpr_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			case 4: return new ConstraintExpr__NumExpr_1Assignment_4(lastRuleCallOrigin, this, 4, inst);
			case 5: return new ConstraintExpr__Group_5(lastRuleCallOrigin, this, 5, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstraintExpr_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NegativeConstraint_1+=NegativeConstraint_
protected class ConstraintExpr__NegativeConstraint_1Assignment_0 extends AssignmentToken  {
	
	public ConstraintExpr__NegativeConstraint_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getNegativeConstraint_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NegativeConstraint__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("NegativeConstraint_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("NegativeConstraint_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNegativeConstraint_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintExpr_Access().getNegativeConstraint_1NegativeConstraint_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// StringExpr_1+=StringExpr_
protected class ConstraintExpr__StringExpr_1Assignment_1 extends AssignmentToken  {
	
	public ConstraintExpr__StringExpr_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getStringExpr_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StringExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StringExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintExpr_Access().getStringExpr_1StringExpr_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// BoolExpr_1+=BoolExpr_
protected class ConstraintExpr__BoolExpr_1Assignment_2 extends AssignmentToken  {
	
	public ConstraintExpr__BoolExpr_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getBoolExpr_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("BoolExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("BoolExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintExpr_Access().getBoolExpr_1BoolExpr_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// GenExpr_1+=GenExpr_
protected class ConstraintExpr__GenExpr_1Assignment_3 extends AssignmentToken  {
	
	public ConstraintExpr__GenExpr_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getGenExpr_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenExpr__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("GenExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("GenExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintExpr_Access().getGenExpr_1GenExpr_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// NumExpr_1+=NumExpr_
protected class ConstraintExpr__NumExpr_1Assignment_4 extends AssignmentToken  {
	
	public ConstraintExpr__NumExpr_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getNumExpr_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumExpr__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("NumExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("NumExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNumExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintExpr_Access().getNumExpr_1NumExpr_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// loneBoolean_1=ID Anonymous_constraintExpr_1_1+=Anonymous_constraintExpr_1_?
protected class ConstraintExpr__Group_5 extends GroupToken {
	
	public ConstraintExpr__Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstraintExpr__Anonymous_constraintExpr_1_1Assignment_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new ConstraintExpr__LoneBoolean_1Assignment_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// loneBoolean_1=ID
protected class ConstraintExpr__LoneBoolean_1Assignment_5_0 extends AssignmentToken  {
	
	public ConstraintExpr__LoneBoolean_1Assignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getLoneBoolean_1Assignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("loneBoolean_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("loneBoolean_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConstraintExpr_Access().getLoneBoolean_1IDTerminalRuleCall_5_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConstraintExpr_Access().getLoneBoolean_1IDTerminalRuleCall_5_0_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_constraintExpr_1_1+=Anonymous_constraintExpr_1_?
protected class ConstraintExpr__Anonymous_constraintExpr_1_1Assignment_5_1 extends AssignmentToken  {
	
	public ConstraintExpr__Anonymous_constraintExpr_1_1Assignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstraintExpr_Access().getAnonymous_constraintExpr_1_1Assignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constraintExpr_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_constraintExpr_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_constraintExpr_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_constraintExpr_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConstraintExpr_Access().getAnonymous_constraintExpr_1_1Anonymous_constraintExpr_1_ParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ConstraintExpr__LoneBoolean_1Assignment_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ConstraintExpr_ ****************/


/************ begin Rule Anonymous_constraintExpr_1_ ****************
 *
 * Anonymous_constraintExpr_1_:
 * 	"[" index_1=ID "]";
 *
 **/

// "[" index_1=ID "]"
protected class Anonymous_constraintExpr_1__Group extends GroupToken {
	
	public Anonymous_constraintExpr_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_constraintExpr_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constraintExpr_1__RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_constraintExpr_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Anonymous_constraintExpr_1__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Anonymous_constraintExpr_1__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_constraintExpr_1_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// index_1=ID
protected class Anonymous_constraintExpr_1__Index_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_constraintExpr_1__Index_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_constraintExpr_1_Access().getIndex_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constraintExpr_1__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_constraintExpr_1_Access().getIndex_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_constraintExpr_1_Access().getIndex_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class Anonymous_constraintExpr_1__RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Anonymous_constraintExpr_1__RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_constraintExpr_1_Access().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_constraintExpr_1__Index_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Anonymous_constraintExpr_1_ ****************/


/************ begin Rule CompoundExpr_ ****************
 *
 * CompoundExpr_:
 * 	StringExpr_1+=StringExpr_ | BoolExpr_1+=BoolExpr_ | NumExpr_1+=NumExpr_ | GenExpr_1+=GenExpr_;
 *
 **/

// StringExpr_1+=StringExpr_ | BoolExpr_1+=BoolExpr_ | NumExpr_1+=NumExpr_ | GenExpr_1+=GenExpr_
protected class CompoundExpr__Alternatives extends AlternativesToken {

	public CompoundExpr__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCompoundExpr_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CompoundExpr__StringExpr_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CompoundExpr__BoolExpr_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new CompoundExpr__NumExpr_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new CompoundExpr__GenExpr_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCompoundExpr_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// StringExpr_1+=StringExpr_
protected class CompoundExpr__StringExpr_1Assignment_0 extends AssignmentToken  {
	
	public CompoundExpr__StringExpr_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundExpr_Access().getStringExpr_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StringExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StringExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompoundExpr_Access().getStringExpr_1StringExpr_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// BoolExpr_1+=BoolExpr_
protected class CompoundExpr__BoolExpr_1Assignment_1 extends AssignmentToken  {
	
	public CompoundExpr__BoolExpr_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundExpr_Access().getBoolExpr_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("BoolExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("BoolExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBoolExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompoundExpr_Access().getBoolExpr_1BoolExpr_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// NumExpr_1+=NumExpr_
protected class CompoundExpr__NumExpr_1Assignment_2 extends AssignmentToken  {
	
	public CompoundExpr__NumExpr_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundExpr_Access().getNumExpr_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumExpr__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("NumExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("NumExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNumExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompoundExpr_Access().getNumExpr_1NumExpr_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// GenExpr_1+=GenExpr_
protected class CompoundExpr__GenExpr_1Assignment_3 extends AssignmentToken  {
	
	public CompoundExpr__GenExpr_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCompoundExpr_Access().getGenExpr_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenExpr__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("GenExpr_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("GenExpr_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGenExpr_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getCompoundExpr_Access().getGenExpr_1GenExpr_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule CompoundExpr_ ****************/


/************ begin Rule BoolExpr_ ****************
 *
 * BoolExpr_:
 * 	literal_1=("true" | "false") | name_1=nameID EqualityOp_1+=EqualityOp_ literal_1=("true" | "false") |
 * 	literal_1=("true" | "false") EqualityOp_1+=EqualityOp_ name_1=nameID | name_1=nameID "[" index_1=nameID "]"
 * 	EqualityOp_1+=EqualityOp_ literal_1=("true" | "false");
 *
 **/

// literal_1=("true" | "false") | name_1=nameID EqualityOp_1+=EqualityOp_ literal_1=("true" | "false") | literal_1=("true"
// | "false") EqualityOp_1+=EqualityOp_ name_1=nameID | name_1=nameID "[" index_1=nameID "]" EqualityOp_1+=EqualityOp_
// literal_1=("true" | "false")
protected class BoolExpr__Alternatives extends AlternativesToken {

	public BoolExpr__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Literal_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BoolExpr__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new BoolExpr__Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new BoolExpr__Group_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBoolExpr_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// literal_1=("true" | "false")
protected class BoolExpr__Literal_1Assignment_0 extends AssignmentToken  {
	
	public BoolExpr__Literal_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getLiteral_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_0_0_1();
			return obj;
		}
		return null;
	}

}

// name_1=nameID EqualityOp_1+=EqualityOp_ literal_1=("true" | "false")
protected class BoolExpr__Group_1 extends GroupToken {
	
	public BoolExpr__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Literal_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=nameID
protected class BoolExpr__Name_1Assignment_1_0 extends AssignmentToken  {
	
	public BoolExpr__Name_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getName_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getName_1NameIDTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBoolExpr_Access().getName_1NameIDTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}

// EqualityOp_1+=EqualityOp_
protected class BoolExpr__EqualityOp_1Assignment_1_1 extends AssignmentToken  {
	
	public BoolExpr__EqualityOp_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getEqualityOp_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBoolExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BoolExpr__Name_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// literal_1=("true" | "false")
protected class BoolExpr__Literal_1Assignment_1_2 extends AssignmentToken  {
	
	public BoolExpr__Literal_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getLiteral_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__EqualityOp_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_1_2_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_1_2_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_1_2_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_1_2_0_1();
			return obj;
		}
		return null;
	}

}


// literal_1=("true" | "false") EqualityOp_1+=EqualityOp_ name_1=nameID
protected class BoolExpr__Group_2 extends GroupToken {
	
	public BoolExpr__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Name_1Assignment_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// literal_1=("true" | "false")
protected class BoolExpr__Literal_1Assignment_2_0 extends AssignmentToken  {
	
	public BoolExpr__Literal_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getLiteral_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_2_0_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_2_0_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_2_0_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_2_0_0_1();
			return obj;
		}
		return null;
	}

}

// EqualityOp_1+=EqualityOp_
protected class BoolExpr__EqualityOp_1Assignment_2_1 extends AssignmentToken  {
	
	public BoolExpr__EqualityOp_1Assignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getEqualityOp_1Assignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBoolExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BoolExpr__Literal_1Assignment_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name_1=nameID
protected class BoolExpr__Name_1Assignment_2_2 extends AssignmentToken  {
	
	public BoolExpr__Name_1Assignment_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getName_1Assignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__EqualityOp_1Assignment_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getName_1NameIDTerminalRuleCall_2_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBoolExpr_Access().getName_1NameIDTerminalRuleCall_2_2_0();
			return obj;
		}
		return null;
	}

}


// name_1=nameID "[" index_1=nameID "]" EqualityOp_1+=EqualityOp_ literal_1=("true" | "false")
protected class BoolExpr__Group_3 extends GroupToken {
	
	public BoolExpr__Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Literal_1Assignment_3_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=nameID
protected class BoolExpr__Name_1Assignment_3_0 extends AssignmentToken  {
	
	public BoolExpr__Name_1Assignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getName_1Assignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getName_1NameIDTerminalRuleCall_3_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBoolExpr_Access().getName_1NameIDTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class BoolExpr__LeftSquareBracketKeyword_3_1 extends KeywordToken  {
	
	public BoolExpr__LeftSquareBracketKeyword_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getLeftSquareBracketKeyword_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Name_1Assignment_3_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// index_1=nameID
protected class BoolExpr__Index_1Assignment_3_2 extends AssignmentToken  {
	
	public BoolExpr__Index_1Assignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getIndex_1Assignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__LeftSquareBracketKeyword_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getIndex_1NameIDTerminalRuleCall_3_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBoolExpr_Access().getIndex_1NameIDTerminalRuleCall_3_2_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class BoolExpr__RightSquareBracketKeyword_3_3 extends KeywordToken  {
	
	public BoolExpr__RightSquareBracketKeyword_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getRightSquareBracketKeyword_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__Index_1Assignment_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EqualityOp_1+=EqualityOp_
protected class BoolExpr__EqualityOp_1Assignment_3_4 extends AssignmentToken  {
	
	public BoolExpr__EqualityOp_1Assignment_3_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getEqualityOp_1Assignment_3_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBoolExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_3_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BoolExpr__RightSquareBracketKeyword_3_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// literal_1=("true" | "false")
protected class BoolExpr__Literal_1Assignment_3_5 extends AssignmentToken  {
	
	public BoolExpr__Literal_1Assignment_3_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolExpr_Access().getLiteral_1Assignment_3_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BoolExpr__EqualityOp_1Assignment_3_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("literal_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("literal_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_3_5_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1TrueKeyword_3_5_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_3_5_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBoolExpr_Access().getLiteral_1FalseKeyword_3_5_0_1();
			return obj;
		}
		return null;
	}

}



/************ end Rule BoolExpr_ ****************/


/************ begin Rule StringExpr_ ****************
 *
 * StringExpr_:
 * 	name_1=nameID EqualityOp_1+=EqualityOp_ StringLit_1+=StringLit_ | StringLit_1+=StringLit_ EqualityOp_1+=EqualityOp_
 * 	name_1=nameID | name_1=nameID "[" index_1=nameID "]" EqualityOp_1+=EqualityOp_ StringLit_1+=StringLit_;
 *
 **/

// name_1=nameID EqualityOp_1+=EqualityOp_ StringLit_1+=StringLit_ | StringLit_1+=StringLit_ EqualityOp_1+=EqualityOp_
// name_1=nameID | name_1=nameID "[" index_1=nameID "]" EqualityOp_1+=EqualityOp_ StringLit_1+=StringLit_
protected class StringExpr__Alternatives extends AlternativesToken {

	public StringExpr__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringExpr__Group_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StringExpr__Group_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringExpr_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=nameID EqualityOp_1+=EqualityOp_ StringLit_1+=StringLit_
protected class StringExpr__Group_0 extends GroupToken {
	
	public StringExpr__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__StringLit_1Assignment_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=nameID
protected class StringExpr__Name_1Assignment_0_0 extends AssignmentToken  {
	
	public StringExpr__Name_1Assignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getName_1Assignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringExpr_Access().getName_1NameIDTerminalRuleCall_0_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringExpr_Access().getName_1NameIDTerminalRuleCall_0_0_0();
			return obj;
		}
		return null;
	}

}

// EqualityOp_1+=EqualityOp_
protected class StringExpr__EqualityOp_1Assignment_0_1 extends AssignmentToken  {
	
	public StringExpr__EqualityOp_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getEqualityOp_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringExpr__Name_1Assignment_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// StringLit_1+=StringLit_
protected class StringExpr__StringLit_1Assignment_0_2 extends AssignmentToken  {
	
	public StringExpr__StringLit_1Assignment_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getStringLit_1Assignment_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StringLit_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StringLit_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringLit_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringExpr_Access().getStringLit_1StringLit_ParserRuleCall_0_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringExpr__EqualityOp_1Assignment_0_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// StringLit_1+=StringLit_ EqualityOp_1+=EqualityOp_ name_1=nameID
protected class StringExpr__Group_1 extends GroupToken {
	
	public StringExpr__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__Name_1Assignment_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// StringLit_1+=StringLit_
protected class StringExpr__StringLit_1Assignment_1_0 extends AssignmentToken  {
	
	public StringExpr__StringLit_1Assignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getStringLit_1Assignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StringLit_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StringLit_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringLit_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringExpr_Access().getStringLit_1StringLit_ParserRuleCall_1_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// EqualityOp_1+=EqualityOp_
protected class StringExpr__EqualityOp_1Assignment_1_1 extends AssignmentToken  {
	
	public StringExpr__EqualityOp_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getEqualityOp_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringExpr__StringLit_1Assignment_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name_1=nameID
protected class StringExpr__Name_1Assignment_1_2 extends AssignmentToken  {
	
	public StringExpr__Name_1Assignment_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getName_1Assignment_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__EqualityOp_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringExpr_Access().getName_1NameIDTerminalRuleCall_1_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringExpr_Access().getName_1NameIDTerminalRuleCall_1_2_0();
			return obj;
		}
		return null;
	}

}


// name_1=nameID "[" index_1=nameID "]" EqualityOp_1+=EqualityOp_ StringLit_1+=StringLit_
protected class StringExpr__Group_2 extends GroupToken {
	
	public StringExpr__Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__StringLit_1Assignment_2_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name_1=nameID
protected class StringExpr__Name_1Assignment_2_0 extends AssignmentToken  {
	
	public StringExpr__Name_1Assignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getName_1Assignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringExpr_Access().getName_1NameIDTerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringExpr_Access().getName_1NameIDTerminalRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class StringExpr__LeftSquareBracketKeyword_2_1 extends KeywordToken  {
	
	public StringExpr__LeftSquareBracketKeyword_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getLeftSquareBracketKeyword_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__Name_1Assignment_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// index_1=nameID
protected class StringExpr__Index_1Assignment_2_2 extends AssignmentToken  {
	
	public StringExpr__Index_1Assignment_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getIndex_1Assignment_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__LeftSquareBracketKeyword_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringExpr_Access().getIndex_1NameIDTerminalRuleCall_2_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringExpr_Access().getIndex_1NameIDTerminalRuleCall_2_2_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class StringExpr__RightSquareBracketKeyword_2_3 extends KeywordToken  {
	
	public StringExpr__RightSquareBracketKeyword_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getRightSquareBracketKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringExpr__Index_1Assignment_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// EqualityOp_1+=EqualityOp_
protected class StringExpr__EqualityOp_1Assignment_2_4 extends AssignmentToken  {
	
	public StringExpr__EqualityOp_1Assignment_2_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getEqualityOp_1Assignment_2_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_2_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringExpr__RightSquareBracketKeyword_2_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// StringLit_1+=StringLit_
protected class StringExpr__StringLit_1Assignment_2_5 extends AssignmentToken  {
	
	public StringExpr__StringLit_1Assignment_2_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringExpr_Access().getStringLit_1Assignment_2_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("StringLit_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("StringLit_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStringLit_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStringExpr_Access().getStringLit_1StringLit_ParserRuleCall_2_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StringExpr__EqualityOp_1Assignment_2_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule StringExpr_ ****************/


/************ begin Rule StringLit_ ****************
 *
 * StringLit_:
 * 	"\"" quote_1=block "\"" | "\'" quote_1=block "\'";
 *
 **/

// "\"" quote_1=block "\"" | "\'" quote_1=block "\'"
protected class StringLit__Alternatives extends AlternativesToken {

	public StringLit__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStringLit_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StringLit__Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStringLit_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "\"" quote_1=block "\""
protected class StringLit__Group_0 extends GroupToken {
	
	public StringLit__Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringLit_Access().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__QuotationMarkKeyword_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "\""
protected class StringLit__QuotationMarkKeyword_0_0 extends KeywordToken  {
	
	public StringLit__QuotationMarkKeyword_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringLit_Access().getQuotationMarkKeyword_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// quote_1=block
protected class StringLit__Quote_1Assignment_0_1 extends AssignmentToken  {
	
	public StringLit__Quote_1Assignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLit_Access().getQuote_1Assignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__QuotationMarkKeyword_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("quote_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("quote_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringLit_Access().getQuote_1BlockTerminalRuleCall_0_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringLit_Access().getQuote_1BlockTerminalRuleCall_0_1_0();
			return obj;
		}
		return null;
	}

}

// "\""
protected class StringLit__QuotationMarkKeyword_0_2 extends KeywordToken  {
	
	public StringLit__QuotationMarkKeyword_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringLit_Access().getQuotationMarkKeyword_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__Quote_1Assignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// "\'" quote_1=block "\'"
protected class StringLit__Group_1 extends GroupToken {
	
	public StringLit__Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStringLit_Access().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__ApostropheKeyword_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "\'"
protected class StringLit__ApostropheKeyword_1_0 extends KeywordToken  {
	
	public StringLit__ApostropheKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringLit_Access().getApostropheKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// quote_1=block
protected class StringLit__Quote_1Assignment_1_1 extends AssignmentToken  {
	
	public StringLit__Quote_1Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStringLit_Access().getQuote_1Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__ApostropheKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("quote_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("quote_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStringLit_Access().getQuote_1BlockTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getStringLit_Access().getQuote_1BlockTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// "\'"
protected class StringLit__ApostropheKeyword_1_2 extends KeywordToken  {
	
	public StringLit__ApostropheKeyword_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStringLit_Access().getApostropheKeyword_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StringLit__Quote_1Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule StringLit_ ****************/


/************ begin Rule GenExpr_ ****************
 *
 * GenExpr_:
 * 	name_1=nameID Anonymous_genExpr_1_1+=Anonymous_genExpr_1_? EqualityOp_1+=EqualityOp_ name_2=nameID
 * 	Anonymous_genExpr_2_1+=Anonymous_genExpr_2_?;
 *
 **/

// name_1=nameID Anonymous_genExpr_1_1+=Anonymous_genExpr_1_? EqualityOp_1+=EqualityOp_ name_2=nameID
// Anonymous_genExpr_2_1+=Anonymous_genExpr_2_?
protected class GenExpr__Group extends GroupToken {
	
	public GenExpr__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenExpr_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenExpr__Anonymous_genExpr_2_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GenExpr__Name_2Assignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenExpr_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=nameID
protected class GenExpr__Name_1Assignment_0 extends AssignmentToken  {
	
	public GenExpr__Name_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenExpr_Access().getName_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGenExpr_Access().getName_1NameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGenExpr_Access().getName_1NameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_genExpr_1_1+=Anonymous_genExpr_1_?
protected class GenExpr__Anonymous_genExpr_1_1Assignment_1 extends AssignmentToken  {
	
	public GenExpr__Anonymous_genExpr_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenExpr_Access().getAnonymous_genExpr_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_genExpr_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_genExpr_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_genExpr_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenExpr_Access().getAnonymous_genExpr_1_1Anonymous_genExpr_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GenExpr__Name_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// EqualityOp_1+=EqualityOp_
protected class GenExpr__EqualityOp_1Assignment_2 extends AssignmentToken  {
	
	public GenExpr__EqualityOp_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenExpr_Access().getEqualityOp_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualityOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualityOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualityOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenExpr_Access().getEqualityOp_1EqualityOp_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GenExpr__Anonymous_genExpr_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new GenExpr__Name_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name_2=nameID
protected class GenExpr__Name_2Assignment_3 extends AssignmentToken  {
	
	public GenExpr__Name_2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenExpr_Access().getName_2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenExpr__EqualityOp_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGenExpr_Access().getName_2NameIDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGenExpr_Access().getName_2NameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_genExpr_2_1+=Anonymous_genExpr_2_?
protected class GenExpr__Anonymous_genExpr_2_1Assignment_4 extends AssignmentToken  {
	
	public GenExpr__Anonymous_genExpr_2_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenExpr_Access().getAnonymous_genExpr_2_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_genExpr_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_genExpr_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_genExpr_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenExpr_Access().getAnonymous_genExpr_2_1Anonymous_genExpr_2_ParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GenExpr__Name_2Assignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule GenExpr_ ****************/


/************ begin Rule Anonymous_genExpr_1_ ****************
 *
 * Anonymous_genExpr_1_:
 * 	"[" index_1=ID "]";
 *
 **/

// "[" index_1=ID "]"
protected class Anonymous_genExpr_1__Group extends GroupToken {
	
	public Anonymous_genExpr_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_1__RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_genExpr_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Anonymous_genExpr_1__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Anonymous_genExpr_1__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_1_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// index_1=ID
protected class Anonymous_genExpr_1__Index_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_genExpr_1__Index_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_1_Access().getIndex_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_1__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_genExpr_1_Access().getIndex_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_genExpr_1_Access().getIndex_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class Anonymous_genExpr_1__RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Anonymous_genExpr_1__RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_1_Access().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_1__Index_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Anonymous_genExpr_1_ ****************/


/************ begin Rule Anonymous_genExpr_2_ ****************
 *
 * Anonymous_genExpr_2_:
 * 	"[" index_1=ID "]";
 *
 **/

// "[" index_1=ID "]"
protected class Anonymous_genExpr_2__Group extends GroupToken {
	
	public Anonymous_genExpr_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_2__RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_genExpr_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Anonymous_genExpr_2__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Anonymous_genExpr_2__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_2_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// index_1=ID
protected class Anonymous_genExpr_2__Index_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_genExpr_2__Index_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_2_Access().getIndex_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_2__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_genExpr_2_Access().getIndex_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_genExpr_2_Access().getIndex_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class Anonymous_genExpr_2__RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Anonymous_genExpr_2__RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_genExpr_2_Access().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_genExpr_2__Index_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Anonymous_genExpr_2_ ****************/


/************ begin Rule NumExpr_ ****************
 *
 * NumExpr_:
 * 	name_1=nameID Anonymous_numExpr_1_1+=Anonymous_numExpr_1_? Anonymous_numExpr_2_1+=Anonymous_numExpr_2_?
 * 	OrdinalOp_1+=OrdinalOp_ name_2=nameID Anonymous_numExpr_3_1+=Anonymous_numExpr_3_?
 * 	Anonymous_numExpr_4_1+=Anonymous_numExpr_4_?;
 *
 **/

// name_1=nameID Anonymous_numExpr_1_1+=Anonymous_numExpr_1_? Anonymous_numExpr_2_1+=Anonymous_numExpr_2_?
// OrdinalOp_1+=OrdinalOp_ name_2=nameID Anonymous_numExpr_3_1+=Anonymous_numExpr_3_?
// Anonymous_numExpr_4_1+=Anonymous_numExpr_4_?
protected class NumExpr__Group extends GroupToken {
	
	public NumExpr__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumExpr__Anonymous_numExpr_4_1Assignment_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NumExpr__Anonymous_numExpr_3_1Assignment_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new NumExpr__Name_2Assignment_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNumExpr_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name_1=nameID
protected class NumExpr__Name_1Assignment_0 extends AssignmentToken  {
	
	public NumExpr__Name_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getName_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNumExpr_Access().getName_1NameIDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNumExpr_Access().getName_1NameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_numExpr_1_1+=Anonymous_numExpr_1_?
protected class NumExpr__Anonymous_numExpr_1_1Assignment_1 extends AssignmentToken  {
	
	public NumExpr__Anonymous_numExpr_1_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getAnonymous_numExpr_1_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_1__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_numExpr_1_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_numExpr_1_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_numExpr_1_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNumExpr_Access().getAnonymous_numExpr_1_1Anonymous_numExpr_1_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NumExpr__Name_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_numExpr_2_1+=Anonymous_numExpr_2_?
protected class NumExpr__Anonymous_numExpr_2_1Assignment_2 extends AssignmentToken  {
	
	public NumExpr__Anonymous_numExpr_2_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getAnonymous_numExpr_2_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_2__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_numExpr_2_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_numExpr_2_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_numExpr_2_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNumExpr_Access().getAnonymous_numExpr_2_1Anonymous_numExpr_2_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NumExpr__Anonymous_numExpr_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NumExpr__Name_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// OrdinalOp_1+=OrdinalOp_
protected class NumExpr__OrdinalOp_1Assignment_3 extends AssignmentToken  {
	
	public NumExpr__OrdinalOp_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getOrdinalOp_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrdinalOp__Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("OrdinalOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("OrdinalOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOrdinalOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNumExpr_Access().getOrdinalOp_1OrdinalOp_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NumExpr__Anonymous_numExpr_2_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NumExpr__Anonymous_numExpr_1_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new NumExpr__Name_1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// name_2=nameID
protected class NumExpr__Name_2Assignment_4 extends AssignmentToken  {
	
	public NumExpr__Name_2Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getName_2Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NumExpr__OrdinalOp_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNumExpr_Access().getName_2NameIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNumExpr_Access().getName_2NameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// Anonymous_numExpr_3_1+=Anonymous_numExpr_3_?
protected class NumExpr__Anonymous_numExpr_3_1Assignment_5 extends AssignmentToken  {
	
	public NumExpr__Anonymous_numExpr_3_1Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getAnonymous_numExpr_3_1Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_3__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_numExpr_3_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_numExpr_3_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_numExpr_3_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNumExpr_Access().getAnonymous_numExpr_3_1Anonymous_numExpr_3_ParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NumExpr__Name_2Assignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Anonymous_numExpr_4_1+=Anonymous_numExpr_4_?
protected class NumExpr__Anonymous_numExpr_4_1Assignment_6 extends AssignmentToken  {
	
	public NumExpr__Anonymous_numExpr_4_1Assignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNumExpr_Access().getAnonymous_numExpr_4_1Assignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_4__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_numExpr_4_1",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_numExpr_4_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAnonymous_numExpr_4_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNumExpr_Access().getAnonymous_numExpr_4_1Anonymous_numExpr_4_ParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NumExpr__Anonymous_numExpr_3_1Assignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NumExpr__Name_2Assignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NumExpr_ ****************/


/************ begin Rule Anonymous_numExpr_1_ ****************
 *
 * Anonymous_numExpr_1_:
 * 	"." tail_1=nameID;
 *
 **/

// "." tail_1=nameID
protected class Anonymous_numExpr_1__Group extends GroupToken {
	
	public Anonymous_numExpr_1__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_1_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_1__Tail_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_numExpr_1_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "."
protected class Anonymous_numExpr_1__FullStopKeyword_0 extends KeywordToken  {
	
	public Anonymous_numExpr_1__FullStopKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_1_Access().getFullStopKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tail_1=nameID
protected class Anonymous_numExpr_1__Tail_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_numExpr_1__Tail_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_1_Access().getTail_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_1__FullStopKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tail_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tail_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_numExpr_1_Access().getTail_1NameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_numExpr_1_Access().getTail_1NameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_numExpr_1_ ****************/


/************ begin Rule Anonymous_numExpr_2_ ****************
 *
 * Anonymous_numExpr_2_:
 * 	"[" index_1=ID "]";
 *
 **/

// "[" index_1=ID "]"
protected class Anonymous_numExpr_2__Group extends GroupToken {
	
	public Anonymous_numExpr_2__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_2_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_2__RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_numExpr_2_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Anonymous_numExpr_2__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Anonymous_numExpr_2__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_2_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// index_1=ID
protected class Anonymous_numExpr_2__Index_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_numExpr_2__Index_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_2_Access().getIndex_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_2__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_numExpr_2_Access().getIndex_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_numExpr_2_Access().getIndex_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class Anonymous_numExpr_2__RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Anonymous_numExpr_2__RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_2_Access().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_2__Index_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Anonymous_numExpr_2_ ****************/


/************ begin Rule Anonymous_numExpr_3_ ****************
 *
 * Anonymous_numExpr_3_:
 * 	"." tail_1=nameID;
 *
 **/

// "." tail_1=nameID
protected class Anonymous_numExpr_3__Group extends GroupToken {
	
	public Anonymous_numExpr_3__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_3_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_3__Tail_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_numExpr_3_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "."
protected class Anonymous_numExpr_3__FullStopKeyword_0 extends KeywordToken  {
	
	public Anonymous_numExpr_3__FullStopKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_3_Access().getFullStopKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// tail_1=nameID
protected class Anonymous_numExpr_3__Tail_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_numExpr_3__Tail_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_3_Access().getTail_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_3__FullStopKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("tail_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("tail_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_numExpr_3_Access().getTail_1NameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_numExpr_3_Access().getTail_1NameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Anonymous_numExpr_3_ ****************/


/************ begin Rule Anonymous_numExpr_4_ ****************
 *
 * Anonymous_numExpr_4_:
 * 	"[" index_1=ID "]";
 *
 **/

// "[" index_1=ID "]"
protected class Anonymous_numExpr_4__Group extends GroupToken {
	
	public Anonymous_numExpr_4__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_4_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_4__RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnonymous_numExpr_4_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class Anonymous_numExpr_4__LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public Anonymous_numExpr_4__LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_4_Access().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// index_1=ID
protected class Anonymous_numExpr_4__Index_1Assignment_1 extends AssignmentToken  {
	
	public Anonymous_numExpr_4__Index_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_4_Access().getIndex_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_4__LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("index_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("index_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAnonymous_numExpr_4_Access().getIndex_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAnonymous_numExpr_4_Access().getIndex_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class Anonymous_numExpr_4__RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public Anonymous_numExpr_4__RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAnonymous_numExpr_4_Access().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Anonymous_numExpr_4__Index_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule Anonymous_numExpr_4_ ****************/


/************ begin Rule EqualityOp_ ****************
 *
 * EqualityOp_:
 * 	EqualsOp_1+=EqualsOp_ | NotequalsOp_1+=NotequalsOp_;
 *
 **/

// EqualsOp_1+=EqualsOp_ | NotequalsOp_1+=NotequalsOp_
protected class EqualityOp__Alternatives extends AlternativesToken {

	public EqualityOp__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEqualityOp_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualityOp__EqualsOp_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EqualityOp__NotequalsOp_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEqualityOp_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EqualsOp_1+=EqualsOp_
protected class EqualityOp__EqualsOp_1Assignment_0 extends AssignmentToken  {
	
	public EqualityOp__EqualsOp_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEqualityOp_Access().getEqualsOp_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EqualsOp__EqualsOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("EqualsOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("EqualsOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEqualsOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEqualityOp_Access().getEqualsOp_1EqualsOp_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// NotequalsOp_1+=NotequalsOp_
protected class EqualityOp__NotequalsOp_1Assignment_1 extends AssignmentToken  {
	
	public EqualityOp__NotequalsOp_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEqualityOp_Access().getNotequalsOp_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotequalsOp__NotequalsOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("NotequalsOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("NotequalsOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNotequalsOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEqualityOp_Access().getNotequalsOp_1NotequalsOp_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule EqualityOp_ ****************/


/************ begin Rule EqualsOp_ ****************
 *
 * EqualsOp_:
 * 	equalsOp_1=("==" | "=" | "equals");
 *
 **/

// equalsOp_1=("==" | "=" | "equals")
protected class EqualsOp__EqualsOp_1Assignment extends AssignmentToken  {
	
	public EqualsOp__EqualsOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEqualsOp_Access().getEqualsOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEqualsOp_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("equalsOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("equalsOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getEqualsOp_Access().getEqualsOp_1EqualsSignEqualsSignKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEqualsOp_Access().getEqualsOp_1EqualsSignEqualsSignKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getEqualsOp_Access().getEqualsOp_1EqualsSignKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEqualsOp_Access().getEqualsOp_1EqualsSignKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getEqualsOp_Access().getEqualsOp_1EqualsKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getEqualsOp_Access().getEqualsOp_1EqualsKeyword_0_2();
			return obj;
		}
		return null;
	}

}

/************ end Rule EqualsOp_ ****************/


/************ begin Rule NotequalsOp_ ****************
 *
 * NotequalsOp_:
 * 	notequalsOp_1=("!=" | "/=" | "=!" | "=/=");
 *
 **/

// notequalsOp_1=("!=" | "/=" | "=!" | "=/=")
protected class NotequalsOp__NotequalsOp_1Assignment extends AssignmentToken  {
	
	public NotequalsOp__NotequalsOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNotequalsOp_Access().getNotequalsOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotequalsOp_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("notequalsOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("notequalsOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNotequalsOp_Access().getNotequalsOp_1ExclamationMarkEqualsSignKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNotequalsOp_Access().getNotequalsOp_1ExclamationMarkEqualsSignKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNotequalsOp_Access().getNotequalsOp_1SolidusEqualsSignKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNotequalsOp_Access().getNotequalsOp_1SolidusEqualsSignKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNotequalsOp_Access().getNotequalsOp_1EqualsSignExclamationMarkKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNotequalsOp_Access().getNotequalsOp_1EqualsSignExclamationMarkKeyword_0_2();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getNotequalsOp_Access().getNotequalsOp_1EqualsSignSolidusEqualsSignKeyword_0_3(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getNotequalsOp_Access().getNotequalsOp_1EqualsSignSolidusEqualsSignKeyword_0_3();
			return obj;
		}
		return null;
	}

}

/************ end Rule NotequalsOp_ ****************/


/************ begin Rule OrdinalOp_ ****************
 *
 * OrdinalOp_:
 * 	GreaterOp_1+=GreaterOp_ | LessOp_1+=LessOp_ | MoreOp_1+=MoreOp_ | SmallerOp_1+=SmallerOp_;
 *
 **/

// GreaterOp_1+=GreaterOp_ | LessOp_1+=LessOp_ | MoreOp_1+=MoreOp_ | SmallerOp_1+=SmallerOp_
protected class OrdinalOp__Alternatives extends AlternativesToken {

	public OrdinalOp__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getOrdinalOp_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OrdinalOp__GreaterOp_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new OrdinalOp__LessOp_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new OrdinalOp__MoreOp_1Assignment_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new OrdinalOp__SmallerOp_1Assignment_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOrdinalOp_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// GreaterOp_1+=GreaterOp_
protected class OrdinalOp__GreaterOp_1Assignment_0 extends AssignmentToken  {
	
	public OrdinalOp__GreaterOp_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrdinalOp_Access().getGreaterOp_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GreaterOp__GreaterOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("GreaterOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("GreaterOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGreaterOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrdinalOp_Access().getGreaterOp_1GreaterOp_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// LessOp_1+=LessOp_
protected class OrdinalOp__LessOp_1Assignment_1 extends AssignmentToken  {
	
	public OrdinalOp__LessOp_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrdinalOp_Access().getLessOp_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new LessOp__LessOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("LessOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("LessOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getLessOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrdinalOp_Access().getLessOp_1LessOp_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// MoreOp_1+=MoreOp_
protected class OrdinalOp__MoreOp_1Assignment_2 extends AssignmentToken  {
	
	public OrdinalOp__MoreOp_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrdinalOp_Access().getMoreOp_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new MoreOp__MoreOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("MoreOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("MoreOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMoreOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrdinalOp_Access().getMoreOp_1MoreOp_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// SmallerOp_1+=SmallerOp_
protected class OrdinalOp__SmallerOp_1Assignment_3 extends AssignmentToken  {
	
	public OrdinalOp__SmallerOp_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOrdinalOp_Access().getSmallerOp_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SmallerOp__SmallerOp_1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("SmallerOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("SmallerOp_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSmallerOp_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getOrdinalOp_Access().getSmallerOp_1SmallerOp_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule OrdinalOp_ ****************/


/************ begin Rule GreaterOp_ ****************
 *
 * GreaterOp_:
 * 	greaterOp_1=("greater" | ">=" | "=>");
 *
 **/

// greaterOp_1=("greater" | ">=" | "=>")
protected class GreaterOp__GreaterOp_1Assignment extends AssignmentToken  {
	
	public GreaterOp__GreaterOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGreaterOp_Access().getGreaterOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGreaterOp_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("greaterOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("greaterOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGreaterOp_Access().getGreaterOp_1GreaterKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGreaterOp_Access().getGreaterOp_1GreaterKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGreaterOp_Access().getGreaterOp_1GreaterThanSignEqualsSignKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGreaterOp_Access().getGreaterOp_1GreaterThanSignEqualsSignKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getGreaterOp_Access().getGreaterOp_1EqualsSignGreaterThanSignKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getGreaterOp_Access().getGreaterOp_1EqualsSignGreaterThanSignKeyword_0_2();
			return obj;
		}
		return null;
	}

}

/************ end Rule GreaterOp_ ****************/


/************ begin Rule LessOp_ ****************
 *
 * LessOp_:
 * 	lessOp_1=("less" | "<=" | "=<");
 *
 **/

// lessOp_1=("less" | "<=" | "=<")
protected class LessOp__LessOp_1Assignment extends AssignmentToken  {
	
	public LessOp__LessOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getLessOp_Access().getLessOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getLessOp_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("lessOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("lessOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getLessOp_Access().getLessOp_1LessKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getLessOp_Access().getLessOp_1LessKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getLessOp_Access().getLessOp_1LessThanSignEqualsSignKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getLessOp_Access().getLessOp_1LessThanSignEqualsSignKeyword_0_1();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getLessOp_Access().getLessOp_1EqualsSignLessThanSignKeyword_0_2(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getLessOp_Access().getLessOp_1EqualsSignLessThanSignKeyword_0_2();
			return obj;
		}
		return null;
	}

}

/************ end Rule LessOp_ ****************/


/************ begin Rule MoreOp_ ****************
 *
 * MoreOp_:
 * 	moreOp_1=("larger" | ">");
 *
 **/

// moreOp_1=("larger" | ">")
protected class MoreOp__MoreOp_1Assignment extends AssignmentToken  {
	
	public MoreOp__MoreOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMoreOp_Access().getMoreOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMoreOp_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("moreOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("moreOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMoreOp_Access().getMoreOp_1LargerKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMoreOp_Access().getMoreOp_1LargerKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getMoreOp_Access().getMoreOp_1GreaterThanSignKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMoreOp_Access().getMoreOp_1GreaterThanSignKeyword_0_1();
			return obj;
		}
		return null;
	}

}

/************ end Rule MoreOp_ ****************/


/************ begin Rule SmallerOp_ ****************
 *
 * SmallerOp_:
 * 	smallerOp_1=("smaller" | "<");
 *
 **/

// smallerOp_1=("smaller" | "<")
protected class SmallerOp__SmallerOp_1Assignment extends AssignmentToken  {
	
	public SmallerOp__SmallerOp_1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSmallerOp_Access().getSmallerOp_1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSmallerOp_Rule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("smallerOp_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("smallerOp_1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSmallerOp_Access().getSmallerOp_1SmallerKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSmallerOp_Access().getSmallerOp_1SmallerKeyword_0_0();
			return obj;
		}
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSmallerOp_Access().getSmallerOp_1LessThanSignKeyword_0_1(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSmallerOp_Access().getSmallerOp_1LessThanSignKeyword_0_1();
			return obj;
		}
		return null;
	}

}

/************ end Rule SmallerOp_ ****************/


/************ begin Rule Position_ ****************
 *
 * Position_:
 * 	AssociationPosition_1+=AssociationPosition_ | ElementPosition_1+=ElementPosition_;
 *
 **/

// AssociationPosition_1+=AssociationPosition_ | ElementPosition_1+=ElementPosition_
protected class Position__Alternatives extends AlternativesToken {

	public Position__Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getPosition_Access().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Position__AssociationPosition_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Position__ElementPosition_1Assignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getPosition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AssociationPosition_1+=AssociationPosition_
protected class Position__AssociationPosition_1Assignment_0 extends AssignmentToken  {
	
	public Position__AssociationPosition_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPosition_Access().getAssociationPosition_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationPosition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("AssociationPosition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("AssociationPosition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationPosition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPosition_Access().getAssociationPosition_1AssociationPosition_ParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ElementPosition_1+=ElementPosition_
protected class Position__ElementPosition_1Assignment_1 extends AssignmentToken  {
	
	public Position__ElementPosition_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getPosition_Access().getElementPosition_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("ElementPosition_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("ElementPosition_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getElementPosition_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getPosition_Access().getElementPosition_1ElementPosition_ParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}


/************ end Rule Position_ ****************/


/************ begin Rule ElementPosition_ ****************
 *
 * ElementPosition_:
 * 	"position" x_1=ID y_1=ID width_1=ID height_1=ID ";";
 *
 **/

// "position" x_1=ID y_1=ID width_1=ID height_1=ID ";"
protected class ElementPosition__Group extends GroupToken {
	
	public ElementPosition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__SemicolonKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementPosition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "position"
protected class ElementPosition__PositionKeyword_0 extends KeywordToken  {
	
	public ElementPosition__PositionKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getPositionKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// x_1=ID
protected class ElementPosition__X_1Assignment_1 extends AssignmentToken  {
	
	public ElementPosition__X_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getX_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__PositionKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("x_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("x_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementPosition_Access().getX_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getElementPosition_Access().getX_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// y_1=ID
protected class ElementPosition__Y_1Assignment_2 extends AssignmentToken  {
	
	public ElementPosition__Y_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getY_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__X_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("y_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("y_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementPosition_Access().getY_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getElementPosition_Access().getY_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// width_1=ID
protected class ElementPosition__Width_1Assignment_3 extends AssignmentToken  {
	
	public ElementPosition__Width_1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getWidth_1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__Y_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("width_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("width_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementPosition_Access().getWidth_1IDTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getElementPosition_Access().getWidth_1IDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// height_1=ID
protected class ElementPosition__Height_1Assignment_4 extends AssignmentToken  {
	
	public ElementPosition__Height_1Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getHeight_1Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__Width_1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("height_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("height_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementPosition_Access().getHeight_1IDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getElementPosition_Access().getHeight_1IDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ElementPosition__SemicolonKeyword_5 extends KeywordToken  {
	
	public ElementPosition__SemicolonKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementPosition_Access().getSemicolonKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementPosition__Height_1Assignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ElementPosition_ ****************/


/************ begin Rule AssociationPosition_ ****************
 *
 * AssociationPosition_:
 * 	"position.association" name_1=ID Coordinate_1+=Coordinate_ Coordinate_2+=Coordinate_ ";";
 *
 **/

// "position.association" name_1=ID Coordinate_1+=Coordinate_ Coordinate_2+=Coordinate_ ";"
protected class AssociationPosition__Group extends GroupToken {
	
	public AssociationPosition__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssociationPosition_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationPosition__SemicolonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssociationPosition_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "position.association"
protected class AssociationPosition__PositionAssociationKeyword_0 extends KeywordToken  {
	
	public AssociationPosition__PositionAssociationKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationPosition_Access().getPositionAssociationKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name_1=ID
protected class AssociationPosition__Name_1Assignment_1 extends AssignmentToken  {
	
	public AssociationPosition__Name_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationPosition_Access().getName_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationPosition__PositionAssociationKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAssociationPosition_Access().getName_1IDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAssociationPosition_Access().getName_1IDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// Coordinate_1+=Coordinate_
protected class AssociationPosition__Coordinate_1Assignment_2 extends AssignmentToken  {
	
	public AssociationPosition__Coordinate_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationPosition_Access().getCoordinate_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Coordinate__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Coordinate_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Coordinate_1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCoordinate_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationPosition_Access().getCoordinate_1Coordinate_ParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssociationPosition__Name_1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// Coordinate_2+=Coordinate_
protected class AssociationPosition__Coordinate_2Assignment_3 extends AssignmentToken  {
	
	public AssociationPosition__Coordinate_2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationPosition_Access().getCoordinate_2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Coordinate__Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Coordinate_2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Coordinate_2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCoordinate_Rule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssociationPosition_Access().getCoordinate_2Coordinate_ParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new AssociationPosition__Coordinate_1Assignment_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";"
protected class AssociationPosition__SemicolonKeyword_4 extends KeywordToken  {
	
	public AssociationPosition__SemicolonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationPosition_Access().getSemicolonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AssociationPosition__Coordinate_2Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule AssociationPosition_ ****************/


/************ begin Rule Coordinate_ ****************
 *
 * Coordinate_:
 * 	x_1=ID "," y_1=ID;
 *
 **/

// x_1=ID "," y_1=ID
protected class Coordinate__Group extends GroupToken {
	
	public Coordinate__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCoordinate_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Coordinate__Y_1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCoordinate_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// x_1=ID
protected class Coordinate__X_1Assignment_0 extends AssignmentToken  {
	
	public Coordinate__X_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinate_Access().getX_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("x_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("x_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCoordinate_Access().getX_1IDTerminalRuleCall_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCoordinate_Access().getX_1IDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ","
protected class Coordinate__CommaKeyword_1 extends KeywordToken  {
	
	public Coordinate__CommaKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCoordinate_Access().getCommaKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Coordinate__X_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// y_1=ID
protected class Coordinate__Y_1Assignment_2 extends AssignmentToken  {
	
	public Coordinate__Y_1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCoordinate_Access().getY_1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Coordinate__CommaKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("y_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("y_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCoordinate_Access().getY_1IDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getCoordinate_Access().getY_1IDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Coordinate_ ****************/


/************ begin Rule DisplayColor_ ****************
 *
 * DisplayColor_:
 * 	Anonymous_displayColor_1_1+=Anonymous_displayColor_1_ colorValue_1=block ";";
 *
 **/

// Anonymous_displayColor_1_1+=Anonymous_displayColor_1_ colorValue_1=block ";"
protected class DisplayColor__Group extends GroupToken {
	
	public DisplayColor__Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDisplayColor_Access().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DisplayColor__SemicolonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDisplayColor_Rule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Anonymous_displayColor_1_1+=Anonymous_displayColor_1_
protected class DisplayColor__Anonymous_displayColor_1_1Assignment_0 extends AssignmentToken  {
	
	public DisplayColor__Anonymous_displayColor_1_1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDisplayColor_Access().getAnonymous_displayColor_1_1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("Anonymous_displayColor_1_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("Anonymous_displayColor_1_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDisplayColor_Access().getAnonymous_displayColor_1_1Anonymous_displayColor_1_ParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getDisplayColor_Access().getAnonymous_displayColor_1_1Anonymous_displayColor_1_ParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// colorValue_1=block
protected class DisplayColor__ColorValue_1Assignment_1 extends AssignmentToken  {
	
	public DisplayColor__ColorValue_1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDisplayColor_Access().getColorValue_1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DisplayColor__Anonymous_displayColor_1_1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("colorValue_1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("colorValue_1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getDisplayColor_Access().getColorValue_1BlockTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getDisplayColor_Access().getColorValue_1BlockTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DisplayColor__SemicolonKeyword_2 extends KeywordToken  {
	
	public DisplayColor__SemicolonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDisplayColor_Access().getSemicolonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DisplayColor__ColorValue_1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule DisplayColor_ ****************/


}
