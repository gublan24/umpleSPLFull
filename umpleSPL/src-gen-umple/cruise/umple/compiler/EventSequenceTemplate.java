/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.31.1.5860.78bb27cc6 modeling language!*/

package cruise.umple.compiler;
import java.util.regex.Pattern;

/**
 * Contains the templates for both the event sequence UI types
 */
// line 903 "../../../../src/Generator_CodeEventSequence.ump"
public class EventSequenceTemplate
{

  //------------------------
  // STATIC VARIABLES
  //------------------------


  /**
   * css class constants
   */
  public static final String GRID_FLOATER_FIRST = "row-header first";
  public static final String GRID_FLOATER = "row-header";
  public static final String TABLE_HEADER = "column-header";
  public static final String TABLE_CELL = "content-cell";
  public static final String NL = System.getProperty("line.separator");
  public static final String TEXT_0 = "<style>";
  public static final String TEXT_1 = NL + "  /* Shared Styles */" + NL + "  .event-sequence-grid, .event-sequence-list " + NL + "  { " + NL + "    font-family: sans-serif;" + NL + "  }" + NL + NL + "  .event-sequence-grid table, table.event-sequence-list" + NL + "  {" + NL + "    border-collapse: collapse;" + NL + "  }" + NL + NL + "  .event-sequence-list td, .event-sequence-grid td" + NL + "  { " + NL + "    line-height: 1;" + NL + "    padding: 2px 10px 2px 10px; " + NL + "    white-space: nowrap;" + NL + "    text-align: center; " + NL + "  }" + NL + NL + "  /* Grid-only styles */" + NL + "  .event-sequence-grid .content-cell {" + NL + "    border: 1px solid black;" + NL + "  }" + NL + NL + "  .event-sequence-grid .row-header {" + NL + "    text-align: left;" + NL + "  }" + NL + NL + "  .event-sequence-grid .column-header > div {" + NL + "    width: 10px;" + NL + NL + "    -moz-transform:" + NL + "      perspective(999px) /* Helps with the font distortion */" + NL + "      translate(20px, 0px)" + NL + "      rotate(-45deg);" + NL + "    -moz-transform-origin: left bottom;" + NL + "    -ms-transform:" + NL + "      translate(21px, 0px)" + NL + "      rotate(-45deg);" + NL + "    -ms-transform-origin: left bottom;" + NL + "    -webkit-transform:" + NL + "      translate(21px, 2px) " + NL + "      rotate(-45deg);" + NL + "    -webkit-transform-origin: left bottom;" + NL + "    -o-transform:" + NL + "      translate(21px, 0px)" + NL + "      rotate(-45deg);" + NL + "    -o-transform-origin: left bottom;" + NL + "  }" + NL + NL + "  .event-sequence-grid .column-header span {" + NL + "    border-bottom: 1px solid black;" + NL + "  }" + NL + NL + "  /* Floating column styles */" + NL + "  .event-sequence-grid .wrapper {" + NL + "    position: relative;" + NL + "    width: 100%;" + NL + "    overflow: hidden;" + NL + "  }" + NL + NL + "  .event-sequence-grid .floating-col {" + NL + "    display: inline-block;" + NL + "    position: absolute;" + NL + "    overflow: hidden;" + NL + "    border-right: 1px solid black;" + NL + "    z-index: 1;" + NL + "  }" + NL + NL + "  .event-sequence-grid .inner-wrapper {" + NL + "    position: relative;" + NL + "  }" + NL + NL + "  .event-sequence-grid .hidden-spacer {" + NL + "    position: relative;" + NL + "    display: inline-block;" + NL + "  }" + NL + NL + "  .event-sequence-grid .table-body {" + NL + "    overflow-x: scroll;" + NL + "  }" + NL + NL + "  .event-sequence-grid .table-body table {" + NL + "    position: relative;" + NL + "    display: inline-block;" + NL + "  }" + NL + NL + "  .event-sequence-grid .floating-col td {" + NL + "    background-color: white;" + NL + "    border: 1px solid black;" + NL + "  }" + NL + NL + "  .event-sequence-grid .floating-col td.first {" + NL + "  }" + NL + NL + "  /* List-only styles */" + NL + "  table.event-sequence-list" + NL + "  {" + NL + "    margin-top: 20px;" + NL + "  }" + NL + NL + "  .event-sequence-list td" + NL + "  {" + NL + "    border: 1px solid black;" + NL + "  }";
  public static final String TEXT_2 = NL;
  public static final String TEXT_3 = "</style>";
  public static final String TEXT_4 = NL + NL;
  public static final String TEXT_5 = "<h1>Event sequence generated by Umple from ";
  public static final String TEXT_6 = ".ump</h1>";
  public static final String TEXT_7 = "<h2>Class ";
  public static final String TEXT_8 = " state machine ";
  public static final String TEXT_9 = "</h2>";
  public static final String TEXT_10 = "<script>";
  public static final String TEXT_11 = NL + "  function formatEventSequence(wrapper) " + NL + "  {" + NL + "    if(wrapper === undefined || wrapper.innerHTML === \"\") " + NL + "    {" + NL + "      return;" + NL + "    }" + NL + NL + "    // Calculate spacer height due to slanted names" + NL + "    var longest = 0;" + NL + "    var last = 0;" + NL + "    var columnHeaders = wrapper" + NL + "        .getElementsByClassName(\"column-header\");" + NL + NL + "    for(var i = 0; i < columnHeaders.length; i++) " + NL + "    {" + NL + "      var innerSpan = columnHeaders[i].firstChild.firstChild;" + NL + "      if(longest < innerSpan.offsetWidth)" + NL + "        longest = innerSpan.offsetWidth;" + NL + NL + "      if(i == columnHeaders.length - 1)" + NL + "        last = innerSpan.offsetWidth;" + NL + "    }" + NL + NL + "    var spacerHeight = longest * Math.cos(45 * (Math.PI / 180));" + NL + "    var lastLabelWidth = last *  Math.sin(45 * (Math.PI / 180));" + NL + NL + "    // Get the various elements" + NL + "    var tableBody = wrapper.getElementsByClassName(\"table-body\")[0];" + NL + "    var floatingCol = wrapper.getElementsByClassName('floating-col')[0];" + NL + "    var innerWrapper = wrapper.getElementsByClassName(\"inner-wrapper\")[0];" + NL + "    var actualTable = innerWrapper.getElementsByTagName('table')[0]" + NL + NL + "    // give the inner elements the header space for the slanted headers" + NL + "    tableBody.style.height = tableBody.offsetHeight + spacerHeight +'px';" + NL + NL + "    // Make the inner wrapper long enough to hold the scrollable contents" + NL + "    innerWrapper.style.width = floatingCol.offsetWidth " + NL + "                             + actualTable.offsetWidth " + NL + "                             + lastLabelWidth " + NL + "                             + 'px';" + NL + NL + "    // Move the elements down so the headers show" + NL + "    actualTable.style.top = spacerHeight + 'px';" + NL + "    floatingCol.style.top = spacerHeight - 1 + 'px';" + NL + NL + "    // Move the table body over to accommodate the floating header column" + NL + "    innerWrapper.getElementsByTagName('table')[0].style.left " + NL + "      = floatingCol.offsetWidth - 6 + 'px';" + NL + "  };" + NL + NL + "  var wrapperIndex = 0;" + NL + NL + "  while(true)" + NL + "  {" + NL + "    var wrapper = document.getElementById(\"wrapper\" + wrapperIndex);" + NL + NL + "    if(wrapper === null)" + NL + "    {" + NL + "      break;" + NL + "    }" + NL + NL + "    wrapperIndex++;" + NL + "    formatEventSequence(wrapper);" + NL + "  }";
  public static final String TEXT_12 = "</script>";
  public static final String TEXT_13 = "<p>Note that the sequence of events is randomly generated. Subsequential event generation will likely yield different results.</p>";
  public static final String TEXT_14 = "<p>No State machines found in this model</p>";
  public static final String TEXT_15 = "<p>Event sequence ending reason: ";
  public static final String TEXT_16 = "</p>";
  public static final String TEXT_17 = "<div class=\"event-sequence-grid\">";
  public static final String TEXT_18 = "  ";
  public static final String TEXT_19 = "<div id=\"wrapper";
  public static final String TEXT_20 = "\" class=\"wrapper\">";
  public static final String TEXT_21 = "    ";
  public static final String TEXT_22 = "<div class=\"floating-col\">";
  public static final String TEXT_23 = "      ";
  public static final String TEXT_24 = "<table>";
  public static final String TEXT_25 = "        ";
  public static final String TEXT_26 = "<tr>";
  public static final String TEXT_27 = "          ";
  public static final String TEXT_28 = "<td class=\"";
  public static final String TEXT_29 = "\">";
  public static final String TEXT_30 = "</td>";
  public static final String TEXT_31 = "<td class=\"";
  public static final String TEXT_32 = "\" data-parent=\"";
  public static final String TEXT_33 = "\">";
  public static final String TEXT_34 = "</td>";
  public static final String TEXT_35 = "</tr>";
  public static final String TEXT_36 = "</table>";
  public static final String TEXT_37 = "</div>";
  public static final String TEXT_38 = "<div class=\"table-body\">";
  public static final String TEXT_39 = "<div class=\"inner-wrapper\">";
  public static final String TEXT_40 = "<div><span>";
  public static final String TEXT_41 = "</span></div>";
  public static final String TEXT_42 = "            ";
  public static final String TEXT_43 = "<table class=\"event-sequence-list\">";
  public static final String TEXT_44 = "<p>No states found in state machine</p>";
  public static final String TEXT_45 = "<p>No transitions found in state machine</p>";

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public EventSequenceTemplate()
  {}

  //------------------------
  // INTERFACE
  //------------------------

  public void delete()
  {}

  private String _createSpacesString(int numSpaces){
    
  StringBuilder spaces =  new StringBuilder();
      for(int i=0; i <numSpaces; i++) {
          spaces.append(" ");
      }
      return spaces.toString();
  }

  public StringBuilder _genTopHeader(Integer numSpaces, StringBuilder sb, String modelName){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_0);
    realSb.append(TEXT_1);
    realSb.append(TEXT_2);
    realSb.append(TEXT_3);
    realSb.append(TEXT_4);
    realSb.append(TEXT_5);
    realSb.append(modelName);
    realSb.append(TEXT_6);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genTopHeader(String modelName){
        StringBuilder sb = new StringBuilder();
    return this._genTopHeader(0,sb,modelName).toString(); 
  }

  public StringBuilder _genTableTitleHeader(Integer numSpaces, StringBuilder sb, String className, String smName){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_2);
    realSb.append(TEXT_7);
    realSb.append(className);
    realSb.append(TEXT_8);
    realSb.append(smName);
    realSb.append(TEXT_9);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genTableTitleHeader(String className, String smName){
        StringBuilder sb = new StringBuilder();
    return this._genTableTitleHeader(0,sb,className,smName).toString(); 
  }

  public StringBuilder _genScripts(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_10);
    realSb.append(TEXT_11);
    realSb.append(TEXT_2);
    realSb.append(TEXT_12);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genScripts(){
        StringBuilder sb = new StringBuilder();
    return this._genScripts(0,sb).toString(); 
  }

  public StringBuilder _genRandomNotification(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_13);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genRandomNotification(){
        StringBuilder sb = new StringBuilder();
    return this._genRandomNotification(0,sb).toString(); 
  }

  public StringBuilder _genNoSMMessage(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_14);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genNoSMMessage(){
        StringBuilder sb = new StringBuilder();
    return this._genNoSMMessage(0,sb).toString(); 
  }

  public StringBuilder _genEndMessage(Integer numSpaces, StringBuilder sb, String reason){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_15);
    realSb.append(reason);
    realSb.append(TEXT_16);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genEndMessage(String reason){
        StringBuilder sb = new StringBuilder();
    return this._genEndMessage(0,sb,reason).toString(); 
  }

  public StringBuilder _genGridHeader(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_17);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridHeader(){
        StringBuilder sb = new StringBuilder();
    return this._genGridHeader(0,sb).toString(); 
  }

  public StringBuilder _genGridContainer(Integer numSpaces, StringBuilder sb, int containerId){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_18);
    realSb.append(TEXT_19);
    realSb.append(containerId);
    realSb.append(TEXT_20);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridContainer(int containerId){
        StringBuilder sb = new StringBuilder();
    return this._genGridContainer(0,sb,containerId).toString(); 
  }

  public StringBuilder _genFloaterHeader(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_21);
    realSb.append(TEXT_22);
    realSb.append(TEXT_2);
    realSb.append(TEXT_23);
    realSb.append(TEXT_24);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFloaterHeader(){
        StringBuilder sb = new StringBuilder();
    return this._genFloaterHeader(0,sb).toString(); 
  }

  public StringBuilder _genFloaterRowStart(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_25);
    realSb.append(TEXT_26);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFloaterRowStart(){
        StringBuilder sb = new StringBuilder();
    return this._genFloaterRowStart(0,sb).toString(); 
  }

  public StringBuilder _genFloaterFirstCell(Integer numSpaces, StringBuilder sb, String cssClass, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_27);
    realSb.append(TEXT_28);
    realSb.append(cssClass);
    realSb.append(TEXT_29);
    realSb.append(content);
    realSb.append(TEXT_30);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFloaterFirstCell(String cssClass, String content){
        StringBuilder sb = new StringBuilder();
    return this._genFloaterFirstCell(0,sb,cssClass,content).toString(); 
  }

  public StringBuilder _genFloaterCell(Integer numSpaces, StringBuilder sb, String cssClass, String parentId, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_27);
    realSb.append(TEXT_31);
    realSb.append(cssClass);
    realSb.append(TEXT_32);
    realSb.append(parentId);
    realSb.append(TEXT_33);
    realSb.append(content);
    realSb.append(TEXT_34);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFloaterCell(String cssClass, String parentId, String content){
        StringBuilder sb = new StringBuilder();
    return this._genFloaterCell(0,sb,cssClass,parentId,content).toString(); 
  }

  public StringBuilder _genFloaterRowEnd(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_25);
    realSb.append(TEXT_35);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFloaterRowEnd(){
        StringBuilder sb = new StringBuilder();
    return this._genFloaterRowEnd(0,sb).toString(); 
  }

  public StringBuilder _genFloaterFooter(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_23);
    realSb.append(TEXT_36);
    realSb.append(TEXT_2);
    realSb.append(TEXT_21);
    realSb.append(TEXT_37);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFloaterFooter(){
        StringBuilder sb = new StringBuilder();
    return this._genFloaterFooter(0,sb).toString(); 
  }

  public StringBuilder _genGridBodyHeader(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_21);
    realSb.append(TEXT_38);
    realSb.append(TEXT_2);
    realSb.append(TEXT_23);
    realSb.append(TEXT_39);
    realSb.append(TEXT_2);
    realSb.append(TEXT_25);
    realSb.append(TEXT_24);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridBodyHeader(){
        StringBuilder sb = new StringBuilder();
    return this._genGridBodyHeader(0,sb).toString(); 
  }

  public StringBuilder _genGridRowStart(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_27);
    realSb.append(TEXT_26);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridRowStart(){
        StringBuilder sb = new StringBuilder();
    return this._genGridRowStart(0,sb).toString(); 
  }

  public StringBuilder _genGridHeaderContent(Integer numSpaces, StringBuilder sb, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_40);
    realSb.append(content);
    realSb.append(TEXT_41);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridHeaderContent(String content){
        StringBuilder sb = new StringBuilder();
    return this._genGridHeaderContent(0,sb,content).toString(); 
  }

  public StringBuilder _genFirstGridCell(Integer numSpaces, StringBuilder sb, String cssClass, String parentId, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_42);
    realSb.append(TEXT_31);
    realSb.append(cssClass);
    realSb.append(TEXT_32);
    realSb.append(parentId);
    realSb.append(TEXT_33);
    realSb.append(content);
    realSb.append(TEXT_34);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genFirstGridCell(String cssClass, String parentId, String content){
        StringBuilder sb = new StringBuilder();
    return this._genFirstGridCell(0,sb,cssClass,parentId,content).toString(); 
  }

  public StringBuilder _genGridCell(Integer numSpaces, StringBuilder sb, String cssClass, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_42);
    realSb.append(TEXT_28);
    realSb.append(cssClass);
    realSb.append(TEXT_29);
    realSb.append(content);
    realSb.append(TEXT_30);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridCell(String cssClass, String content){
        StringBuilder sb = new StringBuilder();
    return this._genGridCell(0,sb,cssClass,content).toString(); 
  }

  public StringBuilder _genGridRowEnd(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_27);
    realSb.append(TEXT_35);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridRowEnd(){
        StringBuilder sb = new StringBuilder();
    return this._genGridRowEnd(0,sb).toString(); 
  }

  public StringBuilder _genGridBodyFooter(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_25);
    realSb.append(TEXT_36);
    realSb.append(TEXT_2);
    realSb.append(TEXT_23);
    realSb.append(TEXT_37);
    realSb.append(TEXT_2);
    realSb.append(TEXT_21);
    realSb.append(TEXT_37);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridBodyFooter(){
        StringBuilder sb = new StringBuilder();
    return this._genGridBodyFooter(0,sb).toString(); 
  }

  public StringBuilder _genGridContainerFooter(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_18);
    realSb.append(TEXT_37);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridContainerFooter(){
        StringBuilder sb = new StringBuilder();
    return this._genGridContainerFooter(0,sb).toString(); 
  }

  public StringBuilder _genGridEnd(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_37);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genGridEnd(){
        StringBuilder sb = new StringBuilder();
    return this._genGridEnd(0,sb).toString(); 
  }

  public StringBuilder _genListStart(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_43);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genListStart(){
        StringBuilder sb = new StringBuilder();
    return this._genListStart(0,sb).toString(); 
  }

  public StringBuilder _genListRowStart(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_18);
    realSb.append(TEXT_26);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genListRowStart(){
        StringBuilder sb = new StringBuilder();
    return this._genListRowStart(0,sb).toString(); 
  }

  public StringBuilder _genListCell(Integer numSpaces, StringBuilder sb, String cssClass, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_21);
    realSb.append(TEXT_28);
    realSb.append(cssClass);
    realSb.append(TEXT_29);
    realSb.append(content);
    realSb.append(TEXT_30);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genListCell(String cssClass, String content){
        StringBuilder sb = new StringBuilder();
    return this._genListCell(0,sb,cssClass,content).toString(); 
  }

  public StringBuilder _genListRowEnd(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_18);
    realSb.append(TEXT_35);
    realSb.append(TEXT_2);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genListRowEnd(){
        StringBuilder sb = new StringBuilder();
    return this._genListRowEnd(0,sb).toString(); 
  }

  public StringBuilder _genListEnd(Integer numSpaces, StringBuilder sb){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_36);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genListEnd(){
        StringBuilder sb = new StringBuilder();
    return this._genListEnd(0,sb).toString(); 
  }

  public StringBuilder _genNoStatesMessage(Integer numSpaces, StringBuilder sb, String containerId){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_19);
    realSb.append(containerId);
    realSb.append(TEXT_20);
    realSb.append(TEXT_37);
    realSb.append(TEXT_44);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genNoStatesMessage(String containerId){
        StringBuilder sb = new StringBuilder();
    return this._genNoStatesMessage(0,sb,containerId).toString(); 
  }

  public StringBuilder _genNoTransitionMessage(Integer numSpaces, StringBuilder sb, String containerId){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_19);
    realSb.append(containerId);
    realSb.append(TEXT_20);
    realSb.append(TEXT_37);
    realSb.append(TEXT_45);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genNoTransitionMessage(String containerId){
        StringBuilder sb = new StringBuilder();
    return this._genNoTransitionMessage(0,sb,containerId).toString(); 
  }


  public String toString()
  {
    return super.toString() + "["+ "]";
  }
}