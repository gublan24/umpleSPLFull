/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.31.1.5860.78bb27cc6 modeling language!*/

package cruise.umple.compiler;
import java.io.*;
import java.util.*;
import cruise.umple.util.*;
import cruise.umple.compiler.exceptions.*;
import java.util.regex.Pattern;

// line 18 "../../../../src/Generator_CodeSimpleMetrics.ump"
public class SimpleMetricsGenerator extends CodeGeneratorWithSubptions
{

  //------------------------
  // STATIC VARIABLES
  //------------------------

  public static final String NL = System.getProperty("line.separator");
  public static final String TEXT_0 = "<h1>Metrics generated by Umple from ";
  public static final String TEXT_1 = ".ump</h1>";
  public static final String TEXT_2 = "<td>";
  public static final String TEXT_3 = "</td>";
  public static final String TEXT_4 = NL;

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //SimpleMetricsGenerator Attributes
  private UmpleModel model;
  private String output;
  private StringBuilder code;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public SimpleMetricsGenerator()
  {
    super();
    model = null;
    output = "";
    code = new StringBuilder();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setModel(UmpleModel aModel)
  {
    boolean wasSet = false;
    model = aModel;
    wasSet = true;
    return wasSet;
  }

  public boolean setOutput(String aOutput)
  {
    boolean wasSet = false;
    output = aOutput;
    wasSet = true;
    return wasSet;
  }

  public boolean setCode(StringBuilder aCode)
  {
    boolean wasSet = false;
    code = aCode;
    wasSet = true;
    return wasSet;
  }

  /**
   * Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
   * off of what's contained in here.
   */
  public UmpleModel getModel()
  {
    return model;
  }

  public String getOutput()
  {
    return output;
  }

  public StringBuilder getCode()
  {
    return code;
  }

  public void delete()
  {
    super.delete();
  }

  // line 46 "../../../../src/Generator_CodeSimpleMetrics.ump"
   public StringBuilder genCellInt(StringBuilder code, int i){
    return _genCell(0, code, String.valueOf(i));
  }

  // line 49 "../../../../src/Generator_CodeSimpleMetrics.ump"
   public StringBuilder genCellString(StringBuilder code, String s){
    return _genCell(0, code, s);
  }

  // line 52 "../../../../src/Generator_CodeSimpleMetrics.ump"
   public StringBuilder genCellFloat(StringBuilder code, Float f){
    return _genCell(0, code, String.format("%.1f", f));
  }

  // line 56 "../../../../src/Generator_CodeSimpleMetrics.ump"
   public void generate(){
    // Output basic file header
    _genTopHeader(0, code, model.getUmpleFile().getSimpleFileName());
  
    // GET DATA ABOUT LINES (CODE, BLANKS, COMMENTS)
    CodeMetrics codemetrics = new CodeMetrics();
    codemetrics.setModel(model);
    codemetrics.setResultCode(code);
    codemetrics.calculate();
    
    // GET DATA FROM CLASSES
    ClassMetrics classmetrics = new ClassMetrics();
    classmetrics.setModel(model);
    classmetrics.setResultCode(code);
    classmetrics.calculate(); 
    
    // GET DATA FROM STATE MACHINES
    StateMachineMetrics SMMeasure = new StateMachineMetrics();    
    SMMeasure.setModel(model);
    SMMeasure.setResultCode(code);
    SMMeasure.calculate();
    
    model.setCode(code.toString());
    writeModel();
    return;
  }


  /**
   * Output the metrics to a file
   */
  // line 85 "../../../../src/Generator_CodeSimpleMetrics.ump"
  public void writeModel(){
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".metrics";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating simple metrics." + e, e);
    }
  }

  private String _createSpacesString(int numSpaces){
    
  StringBuilder spaces =  new StringBuilder();
      for(int i=0; i <numSpaces; i++) {
          spaces.append(" ");
      }
      return spaces.toString();
  }

  public StringBuilder _genTopHeader(Integer numSpaces, StringBuilder sb, String fn){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_0);
    realSb.append(fn);
    realSb.append(TEXT_1);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genTopHeader(String fn){
        StringBuilder sb = new StringBuilder();
    return this._genTopHeader(0,sb,fn).toString(); 
  }

  public StringBuilder _genCell(Integer numSpaces, StringBuilder sb, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_2);
    realSb.append(content);
    realSb.append(TEXT_3);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genCell(String content){
        StringBuilder sb = new StringBuilder();
    return this._genCell(0,sb,content).toString(); 
  }


  public String toString()
  {
    return super.toString() + "["+
            "output" + ":" + getOutput()+ "]" + System.getProperties().getProperty("line.separator") +
            "  " + "model" + "=" + (getModel() != null ? !getModel().equals(this)  ? getModel().toString().replaceAll("  ","    ") : "this" : "null") + System.getProperties().getProperty("line.separator") +
            "  " + "code" + "=" + (getCode() != null ? !getCode().equals(this)  ? getCode().toString().replaceAll("  ","    ") : "this" : "null");
  }
}