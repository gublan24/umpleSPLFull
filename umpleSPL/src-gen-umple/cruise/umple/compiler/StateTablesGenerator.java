/*PLEASE DO NOT EDIT THIS CODE*/
/*This code was generated using the UMPLE 1.31.1.5860.78bb27cc6 modeling language!*/

package cruise.umple.compiler;
import java.io.*;
import java.util.*;
import cruise.umple.util.*;
import cruise.umple.compiler.exceptions.*;
import java.util.regex.Pattern;

// line 24 "../../../../src/Generator_CodeStateTables.ump"
// line 485 "../../../../src/Generator_CodeStateTables.ump"
public class StateTablesGenerator extends CodeGeneratorWithSubptions
{

  //------------------------
  // STATIC VARIABLES
  //------------------------

  public static final String NL = System.getProperty("line.separator");
  public static final String TEXT_0 = NL + "  <style>" + NL + "    .statetable { border-collapse: collapse; }" + NL + "    .statetable td { border: 1px solid black; padding: 2px 10px 2px 10px; white-space: nowrap; }" + NL + "    .statetable .state-header, .statetable .event-header { font-weight: bold; background-color: #ecf0f1; border: 2px solid black; }" + NL + "    .statetable .derived { font-style: italic; }" + NL + "    .statetable-container { overflow-x: auto; }" + NL + "  </style>" + NL + "  " + NL + "  <h1>State tables generated by Umple from ";
  public static final String TEXT_1 = ".ump</h1>" + NL + "  ";
  public static final String TEXT_2 = "<td>";
  public static final String TEXT_3 = "</td>";
  public static final String TEXT_4 = NL + "  ";

  //------------------------
  // MEMBER VARIABLES
  //------------------------

  //StateTablesGenerator Attributes
  private UmpleModel model;
  private String output;
  private StringBuilder code;

  //------------------------
  // CONSTRUCTOR
  //------------------------

  public StateTablesGenerator()
  {
    super();
    model = null;
    output = "";
    code = new StringBuilder();
  }

  //------------------------
  // INTERFACE
  //------------------------

  public boolean setModel(UmpleModel aModel)
  {
    boolean wasSet = false;
    model = aModel;
    wasSet = true;
    return wasSet;
  }

  public boolean setOutput(String aOutput)
  {
    boolean wasSet = false;
    output = aOutput;
    wasSet = true;
    return wasSet;
  }

  public boolean setCode(StringBuilder aCode)
  {
    boolean wasSet = false;
    code = aCode;
    wasSet = true;
    return wasSet;
  }

  /**
   * Contains various aspects from an Umple file (.ump), such as classes, attributes, associations and methods.  Generated output is based
   * off of what's contained in here.
   */
  public UmpleModel getModel()
  {
    return model;
  }

  public String getOutput()
  {
    return output;
  }

  public StringBuilder getCode()
  {
    return code;
  }

  public void delete()
  {
    super.delete();
  }

  // line 512 "../../../../src/Generator_CodeStateTables.ump"
   public StringBuilder genCellString(StringBuilder code, String s){
    return _genCell(0, code, s);
  }


  /**
   * CENTRAL GENERATE METHOD
   */
  // line 519 "../../../../src/Generator_CodeStateTables.ump"
   public void generate(){
    // Output basic file header
    _genTopHeader(0, code, model.getUmpleFile().getSimpleFileName());

    String className;

    // Determine if there are multiple classes with state machines
    // or multiple state machines in any class
    // If so, we will need to put boxes around the state machines
    int smCount = 0;
    for (UmpleClass uClass : model.getUmpleClasses()) {
      for (StateMachine sm : uClass.getStateMachines()) {
        smCount++;
      }
    }
    if(smCount == 0) {
      // Special case. No state machine.

      code.append("<p>No State machines found in this model</p>\n");

      terminateCode(code);
      return;
    }

    // We now know we have to output one or more state machines
    // Iterate through each class.
    for (UmpleClass uClass : model.getUmpleClasses())
    {
      className = uClass.getName();

      // Process the top level state machines in a class
      for (StateMachine sm : uClass.getStateMachines())
      {
        code.append("<h2>Class ");
        code.append(className);
        code.append(" state machine ");
        code.append(sm.getName());
        code.append("</h2>\n\n");

        // Set up the state table
        StateTable st = new StateTable(uClass, sm);

        // Build the contents of the state tables
        st.buildRecursivelyEntry(sm);
        // Now figure out the headers
        st.buildAllEvents();

        // Output the headers of the State Event table
        code.append("<h3>State-event table</h3>\n");

        // Output the body of the state event table
        st.stateEventTableHtml(code);

        // Output the headers of the State State table
        code.append("<h3>State-state table</h3>\n");

        // Output the body of the state state table
        st.stateStateTableHtml(code);

      } // End iteration through state machines of a class
    } // End iteration through classes

    terminateCode(code);
    return;
  }

  // line 585 "../../../../src/Generator_CodeStateTables.ump"
   private void terminateCode(StringBuilder code){
    model.setCode(code.toString());
    writeModel();
    return;
  }


  /**
   * Output the graphviz file to a file with the .gv suffix
   */
  // line 593 "../../../../src/Generator_CodeStateTables.ump"
   private void writeModel(){
    try
    {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".html";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e)
    {
      throw new UmpleCompilerException("There was a problem with generating State Tables." + e, e);
    }
    return;
  }

  private String _createSpacesString(int numSpaces){
    
  StringBuilder spaces =  new StringBuilder();
      for(int i=0; i <numSpaces; i++) {
          spaces.append(" ");
      }
      return spaces.toString();
  }

  public StringBuilder _genTopHeader(Integer numSpaces, StringBuilder sb, String fn){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_0);
    realSb.append(fn);
    realSb.append(TEXT_1);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genTopHeader(String fn){
        StringBuilder sb = new StringBuilder();
    return this._genTopHeader(0,sb,fn).toString(); 
  }

  public StringBuilder _genCell(Integer numSpaces, StringBuilder sb, String content){
    String spaces="";
    StringBuilder newCode = new StringBuilder();
    StringBuilder realSb = sb;
    if(numSpaces > 0) {
        realSb = newCode;
        spaces = _createSpacesString(numSpaces);
        newCode.append(spaces);
    }
    
    realSb.append(TEXT_2);
    realSb.append(content);
    realSb.append(TEXT_3);
    realSb.append(TEXT_4);

    if(numSpaces > 0) {
        newCode.replace(0, newCode.length(), Pattern.compile(NL).matcher(newCode).replaceAll(NL + spaces));
        sb.append(newCode);
    }
    return sb; 
  }

  public String genCell(String content){
        StringBuilder sb = new StringBuilder();
    return this._genCell(0,sb,content).toString(); 
  }


  public String toString()
  {
    return super.toString() + "["+
            "output" + ":" + getOutput()+ "]" + System.getProperties().getProperty("line.separator") +
            "  " + "model" + "=" + (getModel() != null ? !getModel().equals(this)  ? getModel().toString().replaceAll("  ","    ") : "this" : "null") + System.getProperties().getProperty("line.separator") +
            "  " + "code" + "=" + (getCode() != null ? !getCode().equals(this)  ? getCode().toString().replaceAll("  ","    ") : "this" : "null");
  }
}