// Code generated by Umple 1.29.1.4260.b21abf3a3

digraph "DiagramStateMaster" {
  size="80,10"
  rankdir="BT"
  node [shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: EventSequencer
  "EventSequencer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequencer    </td></tr><hr/><tr><td align="left" href="" title="StateMachine sm&#13;">  sm : StateMachine  </td></tr><tr><td align="left" href="" title="double randomEventProportion&#13;">  randomEventProportion : double  </td></tr><tr><td align="left" href="" title="Random randomGenerator&#13;">  randomGenerator : Random  </td></tr><tr><td align="left" href="" title="int smNumber&#13;">  smNumber : int  </td></tr><tr><td align="left" href="" title="int nextStateId&#13;">  nextStateId : int  </td></tr></table>>,
   tooltip="class EventSequencer
@umplesource Generator_CodeEventSequence.ump 18&#13;"];

  // Class: EventSequenceWalkTracker
  "EventSequenceWalkTracker" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventSequenceWalkTracker    </td></tr><hr/><tr><td align="left" href="" title="String finishReason&#13;">  finishReason : String  </td></tr><tr><td align="left" href="" title="int counter&#13;">  counter : int  </td></tr><tr><td align="left" href="" title="int maxEvents&#13;set lazily&#13;">  maxEvents : int  </td></tr></table>>,
   tooltip="class EventSequenceWalkTracker
@umplesource Generator_CodeEventSequence.ump 309&#13;"];

  // Class: EventWrapper
  "EventWrapper" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    EventWrapper    </td></tr><hr/><tr><td align="left" href="" title="Event wrappedEvent&#13;">  wrappedEvent : Event  </td></tr></table>>,
   tooltip="class EventWrapper
Allows mapping from events to the various transitions. This allows guards to&#13;effectively be ignored for the purpose of walking randomly through the state&#13;machine.&#13;@umplesource Generator_CodeEventSequence.ump 486&#13;"];

  // Class: TargetConfiguration
  "TargetConfiguration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    TargetConfiguration    </td></tr></table>>,
   tooltip="class TargetConfiguration
@umplesource TargetConfig.ump 3&#13;"];

  // Class: ExplorationResult
  "ExplorationResult" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ExplorationResult    </td></tr><hr/><tr><td align="left" href="" title="HashMap&lt;State,TargetConfiguration&gt; map&#13;">  map : HashMap&lt;State,TargetConfiguration&gt;  </td></tr></table>>,
   tooltip="class ExplorationResult
@umplesource TargetConfig.ump 23&#13;"];

  // Class: StateMachine
  "StateMachine" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachine    </td></tr><hr/><tr><td align="left" href="" title="Integer recentSearchDepth&#13;">  recentSearchDepth : Integer  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean containsHistoryState&#13;">  containsHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean containsDeepHistoryState&#13;">  containsDeepHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean queued&#13;before getContainsHistoryState { if ('H'.equals(name)) { containsHistoryState = true; } }&#13;before getContainsDeepHistoryState { if ('HStar'.equals(name)) { containsDeepHistoryState = true; } }&#13;">  queued : Boolean  </td></tr><tr><td align="left" href="" title="Boolean pooled&#13;">  pooled : Boolean  </td></tr></table>>,
   tooltip="class StateMachine
* An entity in a running program that can have a set of values (states) and which&#13; changes values by taking transitions in response to various events.&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 18&#13;@umplesource StateMachine_Code.ump 14&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1730&#13;@umplesource DiagramMaster.ump 96&#13;"];

  // Class: State
  "State" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    State    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isConcurrent&#13;">  isConcurrent : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isStartState&#13;">  isStartState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;for code generation only e.g. ouside scope of nested state&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isHistoryState&#13;">  isHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDeepHistoryState&#13;">  isDeepHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean finalState&#13;">  finalState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isVisited&#13;">  isVisited : Boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;State mostRecentState; //will be in dot notation, if used by historyState, only look at first part?&#13;">  position : Position  </td></tr></table>>,
   tooltip="class State
* One of the values in which a state machine can be at any given point in time&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Blue for things to do with state machines&#13;@umplesource StateMachine.ump 48&#13;@umplesource StateMachine_Code.ump 482&#13;@umplesource Trace_Code.ump 54&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1860&#13;@umplesource DiagramMaster.ump 95&#13;"];
  "State" -> "Node" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Activity
  "Activity" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Activity    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String activityCode&#13;target language code&#13;">  activityCode : String  </td></tr><tr><td align="left" href="" title="Map&lt;String,Position&gt; implementationPositions&#13;">  implementationPositions : Map&lt;String,Position&gt;  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr><tr><td align="left" href="" title="Boolean composed&#13;* This is used to detect if an activity has been added to the state by its used traits.&#13;">  composed : Boolean  </td></tr></table>>,
   tooltip="class Activity
* Some code to execute for an extended period while in a state&#13; This code is found after they keyword 'do' in Umple&#13; The code is executed in a separate threat, and can be terminated by&#13; an outgoing transition. Upon completion of the activity, any&#13; autotransition will be taken&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;* Please keep updating the method 'public Activity clone(State inState)' if you add new attributes to this class.&#13;@umplesource StateMachine.ump 81&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1978&#13;@umplesource DiagramMaster.ump 99&#13;"];

  // Class: Transition
  "Transition" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Transition    </td></tr><hr/><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Boolean autoTransition&#13;">  autoTransition : Boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;Issue 519&#13;">  position : Position  </td></tr></table>>,
   tooltip="class Transition
* Specifies, within a state, what happens with a certain event (method call) occurs&#13; Normally the state machine will go to a new state after executing various actions and&#13; activities.&#13; The guard is a boolean condition that may prevent triggering the transition&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 127&#13;@umplesource StateMachine_Code.ump 725&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1494&#13;@umplesource DiagramMaster.ump 100&#13;"];

  // Class: Action
  "Action" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Action    </td></tr><hr/><tr><td align="left" href="" title="String actionType&#13;">  actionType : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String actionCode&#13;target language code&#13;">  actionCode : String  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr></table>>,
   tooltip="class Action
* A quickly-executed block of code that is run upon entry or exit from a state&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 149&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1941&#13;@umplesource DiagramMaster.ump 98&#13;"];

  // Class: Event
  "Event" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Event    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isTimer&#13;String args = null;&#13;">  isTimer : Boolean  </td></tr><tr><td align="left" href="" title="Boolean autoTransition&#13;">  autoTransition : Boolean  </td></tr><tr><td align="left" href="" title="String timerInSeconds&#13;TODO: how do you specify milliseconds etc.&#13;">  timerInSeconds : String  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;for code generation only e.g. ouside scope of nested state&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Boolean unspecified&#13;">  unspecified : Boolean  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the method.&#13;">  type : String  </td></tr></table>>,
   tooltip="class Event
*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 189&#13;@umplesource StateMachine_Code.ump 824&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1904&#13;@umplesource DiagramMaster.ump 97&#13;"];

  // Class: ConstraintVariable
  "ConstraintVariable" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintVariable    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr></table>>,
   tooltip="class ConstraintVariable
* ConstraintVariables encapsulate that data of one element in a ConstraintTree, making up the nodes of that tree.&#13; For example: a<3&#13;     has the structure:   ConstraintTree&#13;                          ConstraintOperator(<)&#13;                            /            \&#13;                    ConstraintTree     ConstraintNumberLiteral(3)&#13;               ConstraintAttribute(a)&#13;     where all the \"Constraint\" classes inherit from ConstraintVariable&#13;@umplesource Umple.ump 322&#13;@umplesource Umple_Code.ump 3271&#13;"];
  "ConstraintVariable" -> "Iterable&lt;ConstraintVariable&gt;" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: ConstraintTree
  "ConstraintTree" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintTree    </td></tr><hr/><tr><td align="left" href="" title="ConstraintVariable root&#13;">  root : ConstraintVariable  </td></tr><tr><td align="left" href="" title="ConstraintOperator requestor&#13;">  requestor : ConstraintOperator  </td></tr><tr><td align="left" href="" title="TreeSet&lt;String&gt; names&#13;">  names : TreeSet&lt;String&gt;  </td></tr><tr><td align="left" href="" title="boolean shouldDisplayBrackets&#13;">  shouldDisplayBrackets : boolean  </td></tr><tr><td align="left" href="" title="boolean displayNegation&#13;">  displayNegation : boolean  </td></tr><tr><td align="left" href="" title="boolean displayBrackets&#13;">  displayBrackets : boolean  </td></tr><tr><td align="left" href="" title="int numberOfElements&#13;">  numberOfElements : int  </td></tr></table>>,
   tooltip="class ConstraintTree
* ConstraintTrees are a redundant class that are necessary because of lone constraints, i.e. [true] has to be handled, and does not contain an operator&#13;   * If lone constraints didn't exist then the ConstraintTree class could be condensed into ConstraintOperator. One nice religation of responsibilities is that ConstraintTrees take care of the ! and () symbols, leaving the ConstraintOperator class to be more pure&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource Umple.ump 328&#13;@umplesource Umple_Code.ump 2577&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1544&#13;"];
  "ConstraintTree" -> "ConstraintVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Guard
  "Guard" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Guard    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr></table>>,
   tooltip="class Guard
* A boolean condition that is checked when an event method is called&#13; If the result is true the transition may be taken&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 214&#13;@umplesource StateMachine_Code.ump 876&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1963&#13;@umplesource DiagramMaster.ump 101&#13;"];
  "Guard" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleElement
  "UmpleElement" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleElement    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple element.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple element.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="Boolean hasMainMethod&#13;">  hasMainMethod : Boolean  </td></tr><tr><td align="left" href="" title="String[] namespaces&#13;">  namespaces : String[]  </td></tr><tr><td align="left" href="" title="String packageName&#13;">  packageName : String  </td></tr><tr><td align="left" href="" title="ExtraCode extraCode&#13;The code associated with the Umple element.&#13;">  extraCode : ExtraCode  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;Specifies whether or not the Umple element is internal.&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate coordinates&#13;Specifies the position of this Umple element (ex. The UmpleOnline diagram).&#13;">  coordinates : Coordinate  </td></tr><tr><td align="left" href="" title="String displayColor&#13;Specifies the display color of this element&#13;">  displayColor : String  </td></tr></table>>,
   tooltip="class UmpleElement
* An UmpleElement is one of the top-level items found in an Umple model&#13; Currently it has one subclass, UmpleClassifier&#13;&#13;@umplesource Umple.ump 124&#13;@umplesource Umple_Code.ump 1264&#13;@umplesource DiagramMaster.ump 79&#13;"];

  // Class: UmpleClassifier
  "UmpleClassifier" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClassifier    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="Boolean isDistributable&#13;Specifies whether or not the Umple class or implemented classes are distributable with RMI technology.&#13;">  isDistributable : Boolean  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="UmpleModel sourceModel&#13;">  sourceModel : UmpleModel  </td></tr></table>>,
   tooltip="class UmpleClassifier
* Represents an Umple classifier: a Class or Interface&#13;@umplesource Umple.ump 551&#13;@umplesource Umple_Code.ump 1332&#13;@umplesource DiagramMaster.ump 78&#13;"];
  "UmpleClassifier" -> "UmpleElement" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleClass
  "UmpleClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClass    </td></tr><hr/><tr><td align="left" href="" title="Boolean hasProxyPattern&#13;">  hasProxyPattern : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsDefaultInterface&#13;">  needsDefaultInterface : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDistributed&#13;">  isDistributed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDefaultInterfaceRemoteRMI&#13;">  isDefaultInterfaceRemoteRMI : Boolean  </td></tr><tr><td align="left" href="" title="Boolean filteredin&#13;Specifies whether or not in the filter&#13;">  filteredin : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple class is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the class&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple class is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Integer propagateCounter&#13;Arbitary Limit&#13;">  propagateCounter : Integer  </td></tr><tr><td align="left" href="" title="PortBindingInformation[] portBindingInformation&#13;">  portBindingInformation : PortBindingInformation[]  </td></tr><tr><td align="left" href="" title="Boolean portClass&#13;">  portClass : Boolean  </td></tr><tr><td align="left" href="" title="TemplateMethod[] emitMethods&#13;">  emitMethods : TemplateMethod[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,TemplateAttributeParser&gt; templateEmitStringMap&#13;">  templateEmitStringMap : Map&lt;String,TemplateAttributeParser&gt;  </td></tr></table>>,
   tooltip="class UmpleClass
* An UmpleClass can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns, such as 'singleton', meaning that there can only be one instance,&#13; and abstract, meaning it can't have any instances.&#13;* In Umple_Code.ump: Methods for computing complex properties&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;----------------------------------------------------------&#13;Handle the existing templates in the current umple model.&#13;class UmpleModel {&#13;  UmpleTemplate getUmpleTemplate(String name){&#13;    for (UmpleTemplate aTemplate : getUmpleTemplates())&#13;    {&#13;      if (aTemplate.getName().equals(name))&#13;      {&#13;        return aTemplate;&#13;      }&#13;    }&#13;    return null;&#13;  }&#13;  &#13;   public UmpleTemplate addUmpleTemplate(String name)&#13;  {&#13;    UmpleTemplate newTemplate = getUmpleTemplate(name);&#13;    if (newTemplate == null)&#13;    {&#13;      newTemplate = new UmpleTemplate(name, this);&#13;      addUmpleTemplate(newTemplate);&#13;    }&#13;    return newTemplate;&#13;  }&#13;}&#13;----------------------------------------------------------&#13;An umple template contains a map for emittable strings&#13;@umplesource StateMachine.ump 359&#13;@umplesource Umple.ump 600&#13;@umplesource Umple_Code.ump 1472&#13;@umplesource Umple_Code_Trait.ump 377&#13;@umplesource Trace.ump 23&#13;@umplesource Structure.ump 18&#13;@umplesource Template.ump 45&#13;@umplesource DiagramMaster.ump 81&#13;"];
  "UmpleClass" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleModel
  "UmpleModel" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleModel    </td></tr><hr/><tr><td align="left" href="" title="UmpleFile umpleFile&#13;The Umple file (.ump) that was used to populate the model.&#13;">  umpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Boolean distributeOn&#13;">  distributeOn : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributeForced&#13;">  distributeForced : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributed&#13;">  distributed : Boolean  </td></tr><tr><td align="left" href="" title="Integer distributePattern&#13;">  distributePattern : Integer  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="String defaultPackage&#13;">  defaultPackage : String  </td></tr><tr><td align="left" href="" title="GenerateTarget[] generates&#13;">  generates : GenerateTarget[]  </td></tr><tr><td align="left" href="" title="Boolean shouldGenerate&#13;">  shouldGenerate : Boolean  </td></tr><tr><td align="left" href="" title="Glossary glossary&#13;">  glossary : Glossary  </td></tr><tr><td align="left" href="" title="String defaultNamespace&#13;">  defaultNamespace : String  </td></tr><tr><td align="left" href="" title="String code&#13;">  code : String  </td></tr><tr><td align="left" href="" title="UmpleClass mainClass&#13;">  mainClass : UmpleClass  </td></tr><tr><td align="left" href="" title="Boolean debugMode&#13;">  debugMode : Boolean  </td></tr><tr><td align="left" href="" title="ParseResult lastResult&#13;">  lastResult : ParseResult  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; generatedCode&#13;">  generatedCode : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Analyzer&gt; analyzers&#13;">  analyzers : Map&lt;String,Analyzer&gt;  </td></tr><tr><td align="left" href="" title="Coordinate levelOffset&#13;data for default class positioning&#13;">  levelOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate initialOffset&#13;">  initialOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate classSize&#13;">  classSize : Coordinate  </td></tr><tr><td align="left" href="" title="int maxYLevels&#13;">  maxYLevels : int  </td></tr><tr><td align="left" href="" title="CodeBlock[] extraCodes&#13;Top level blocks code contained within a model.&#13;extraCodes will be generated in a single file&#13;">  extraCodes : CodeBlock[]  </td></tr><tr><td align="left" href="" title="Coordinate offsetFromEdge&#13;data for default association positioning&#13;">  offsetFromEdge : Coordinate  </td></tr><tr><td align="left" href="" title="int reflexiveSegmentLength&#13;">  reflexiveSegmentLength : int  </td></tr><tr><td align="left" href="" title="List&lt;File&gt; linkedFiles&#13;">  linkedFiles : List&lt;File&gt;  </td></tr><tr><td align="left" href="" title="Double parsingTime&#13;ParsingTime represents Parsing end time&#13;gTime1 represents code generation start time&#13;gTime2 represents code generation end time&#13;">  parsingTime : Double  </td></tr><tr><td align="left" href="" title="Double gTime1&#13;">  gTime1 : Double  </td></tr><tr><td align="left" href="" title="Double gTime2&#13;">  gTime2 : Double  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; hashMap&#13;">  hashMap : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="String traceType&#13;">  traceType : String  </td></tr><tr><td align="left" href="" title="TracerDirective tracer&#13;">  tracer : TracerDirective  </td></tr></table>>,
   tooltip="class UmpleModel
* Class UmpleModel is the central class describing the system being compiled.&#13;&#13; The model contains everything that was derived from an Umple file (.ump) when it was parsed such as&#13; the classes, attributes, associations, state machines, methods, etc that were in it.&#13;&#13; Put another way, when an Umple file (.ump) is parsed an Umple model is populated with everything that was parsed from that file.&#13;&#13; Because of this it is absolutely critical to understand the model since it is basically the \"root\" of everything.&#13;*&#13; In Umple_Code.ump: Methods for manipulating the Model&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;http://umple.org/license&#13;&#13;Mixset meta-model&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;http://umple.org/license&#13;&#13;Feature diagram meta-model&#13;A FeatureDiagram stores information required to build a feature diagram in Umple&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Yellow for Classifiers, classes etc.&#13;@umplesource Umple.ump 29&#13;@umplesource UmpleVersion.ump 13&#13;@umplesource Umple_Code.ump 18&#13;@umplesource Umple_Code_Trait.ump 6&#13;@umplesource Mixset.ump 12&#13;@umplesource FeatureModel.ump 14&#13;@umplesource Trace.ump 17&#13;@umplesource UmpleInternalParser_CodeTrait.ump 7&#13;@umplesource UmpleInternalParser_CodeMixset.ump 18&#13;@umplesource DiagramMaster.ump 76&#13;"];
  "UmpleModel" -> "Runnable" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: UmpleTrait
  "UmpleTrait" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTrait    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple trait is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the Trait&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple trait is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr></table>>,
   tooltip="class UmpleTrait
* An UmpleTrait can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns.&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 691&#13;@umplesource Umple_Code_Trait.ump 38&#13;"];
  "UmpleTrait" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: StateMachineTraceItem
  "StateMachineTraceItem" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachineTraceItem    </td></tr><hr/><tr><td align="left" href="" title="ConstraintTree constraint&#13;">  constraint : ConstraintTree  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr><tr><td align="left" href="" title="boolean isIn&#13;">  isIn : boolean  </td></tr><tr><td align="left" href="" title="boolean isOut&#13;">  isOut : boolean  </td></tr><tr><td align="left" href="" title="boolean entry&#13;">  entry : boolean  </td></tr><tr><td align="left" href="" title="boolean exit&#13;">  exit : boolean  </td></tr><tr><td align="left" href="" title="int level&#13;">  level : int  </td></tr><tr><td align="left" href="" title="boolean traceStateMachineFlag&#13;">  traceStateMachineFlag : boolean  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="String periodClause&#13;">  periodClause : String  </td></tr><tr><td align="left" href="" title="Boolean conditionallyWhere&#13;">  conditionallyWhere : Boolean  </td></tr><tr><td align="left" href="" title="String conditionType&#13;">  conditionType : String  </td></tr><tr><td align="left" href="" title="String accessor&#13;">  accessor : String  </td></tr><tr><td align="left" href="" title="String concatinator&#13;">  concatinator : String  </td></tr></table>>,
   tooltip="class StateMachineTraceItem
* An element of a trace directive that indicates to trace one or more state machines&#13; or transitions&#13;@umplesource Trace.ump 181&#13;@umplesource Trace_Code.ump 423&#13;@umplesource DiagramMaster.ump 123&#13;"];
  "StateMachineTraceItem" -> "TraceItem" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: TraceRecord
  "TraceRecord" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceRecord    </td></tr><hr/><tr><td align="left" href="" title="boolean recordOnly&#13;">  recordOnly : boolean  </td></tr><tr><td align="left" href="" title="String[] record&#13;">  record : String[]  </td></tr></table>>,
   tooltip="class TraceRecord
@umplesource Trace.ump 286&#13;@umplesource DiagramMaster.ump 121&#13;"];

  // All associations
  "EventSequencer" -> "Transition" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* possibleTransitions", tooltip="EventSequencer 0..1  -> * possibleTransitions Transition"];
  "EventSequencer" -> "Event" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* possibleEvents", tooltip="EventSequencer 0..1  -> * possibleEvents Event"];
  "EventSequencer" -> "EventSequenceWalkTracker" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 tracker", tooltip="EventSequencer 0..1  -> 0..1 tracker EventSequenceWalkTracker"];
  "EventSequenceWalkTracker" -> "Transition" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* unvisitedTransitions", tooltip="EventSequenceWalkTracker 0..1  -> * unvisitedTransitions Transition"];
  "EventWrapper" -> "Transition" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="EventWrapper 0..1  -> *  Transition"];
  "TargetConfiguration" -> "State" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 greatest_default_state", tooltip="TargetConfiguration 1  -> 1 greatest_default_state State"];
  "TargetConfiguration" -> "State" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1..* greatest_descendant_states", tooltip="TargetConfiguration 1  -> 1..* greatest_descendant_states State"];
  "ExplorationResult" -> "StateMachine" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="1 ", tooltip="ExplorationResult 1  -> 1  StateMachine"];
  "StateMachine" -> "UmpleClass" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleClass"];
  "StateMachine" -> "UmpleTrait" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleTrait"];
  "StateMachine" -> "State" [dir="none", taillabel="* nestedStateMachines", headlabel="0..1 parentState", tooltip="StateMachine * nestedStateMachines -- 0..1 parentState State"];
  "State" -> "Activity" [dir="none", taillabel="1 ", headlabel="* ", tooltip="State 1  -- *  Activity"];
  "State" -> "Action" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="* ", tooltip="State 0..1  -> *  Action"];
  "State" -> "StateMachine" [dir="none", taillabel="* ", headlabel="1 ", tooltip="State *  -- 1  StateMachine"];
  "Activity" -> "Event" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 onCompletionEvent", tooltip="Activity *  -> 0..1 onCompletionEvent Event"];
  "Transition" -> "Event" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="Transition *  -> 0..1  Event"];
  "Transition" -> "State" [dir="none", taillabel="* ", headlabel="1 fromState", tooltip="Transition *  -- 1 fromState State"];
  "Transition" -> "State" [dir="none", taillabel="* nextTransition", headlabel="1 nextState", tooltip="Transition * nextTransition -- 1 nextState State"];
  "Transition" -> "Guard" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 ", tooltip="Transition *  -> 0..1  Guard"];
  "Transition" -> "Action" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 ", tooltip="Transition 0..1  -> 0..1  Action"];
  "UmpleClass" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uClass", headlabel="* ", tooltip="UmpleClass 1 uClass -> *  ConstraintTree"];
  "UmpleClass" -> "UmpleClass" [dir="none", taillabel="* subclasses", headlabel="0..1 extendsClass", tooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass"];
  "UmpleClass" -> "UmpleTrait" [dir="none", taillabel="* subClasses", headlabel="* extendsTraits", tooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait"];
  "UmpleModel" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleClass"];
  "UmpleModel" -> "UmpleTrait" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleTrait"];
  "UmpleModel" -> "StateMachine" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* stateMachineDefinitions", tooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine"];
  "UmpleTrait" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uTrait", headlabel="* ", tooltip="UmpleTrait 1 uTrait -> *  ConstraintTree"];
  "UmpleTrait" -> "UmpleTrait" [dir="none", taillabel="* subTraits", headlabel="* extendsTraits", tooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait"];
  "StateMachineTraceItem" -> "StateMachine" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachineTraceItem *  -- 0..1  StateMachine"];
  "StateMachineTraceItem" -> "State" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachineTraceItem *  -- 0..1  State"];
  "StateMachineTraceItem" -> "Transition" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachineTraceItem *  -- 0..1  Transition"];
  "TraceRecord" -> "StateMachine" [dir="none", taillabel="* ", headlabel="* ", tooltip="TraceRecord *  -- *  StateMachine"];
}
