
// Code for mixset StateMachine : 


class GeneratorHelper { 
    before Label_StateMachine_1:postpare(UmpleModel)
  {
      postpareStateMachine(model);
    }  }

class GeneratorHelper { 
    before Label_StateMachine_3:postpare(UmpleClass)
  {
      postpareStateMachine(aClass);
    }  }

class UmpleGenerator { 
    before Label_StateMachine_10:initializeParser
  {
      parser.addGrammarFile("/stateMachine/umple_state_machines.grammar");
    }  }

class SuperCodeGenerator { 
    before Label_StateMachine_17:testForPrimitiveInConstraint(ConstraintVariable)
  {
      if(variable instanceof ConstraintStateMachine)
      {
        return false;
      }
    }  }

class SuperCodeGenerator { 
    before Label_StateMachine_18:translate(String,ConstraintVariable,boolean)
  {
      else if("state".equals(id))
      {
        return translate("stateOne", ((ConstraintState)cv).getState());
      }
      else if("statemachine".equals(id))
      {
        return translate("getFullMethod",((ConstraintStateMachine)cv).getStateMachine())+"()";
      }
    }  }

class UmpleClass { 
    before Label_StateMachine_19:getMethodNames
  {
      for(StateMachine sm : this.getStateMachines())
      {
        String stateMachineName = sm.getName().substring(0, 1).toUpperCase() + sm.getName().substring(1);
        methodNames.add("set" + stateMachineName);
        methodNames.add("get" + stateMachineName);

        for(Event ev : sm.getEvents())
        {
          methodNames.add(ev.getName());
        }
      }
    }  }

class UmpleClass { 
    before Label_StateMachine_20:hasImplementedMethodIncludingWithinParentClasses(Method)
  {
    if (numberOfStateMachines()>0){
    	for(StateMachine sm : getStateMachines()){
    		if (sm.getEventByMethod(comparedMethod)!=null){
    			return true;
    		}
    	}
    }
    }  }

class UmpleClass { 
    before Label_StateMachine_21:propagateImmutabilityToAllRelationships(boolean)
  {
      if (this.hasStateMachines()) { return false; }
      }  }

class UmpleTrait { 
    before Label_StateMachine_27:propagateImmutabilityToAllRelationships(boolean)
  {
	      if (this.hasStateMachines()) { return false; } 
        }  }

class GeneralTPApplied { 
    before Label_StateMachine_29:GeneralTPApplied(GeneralTPApplied)
  {
      stateMachineModifiers = new ArrayList<>(another.getStateMachineModifiers());
    }  }

class GeneralTPApplied { 
    before Label_StateMachine_30:GeneralTPApplied(GeneralTPApplied)
  {
      stateMachineTemplateSignatures = new ArrayList<>(another.getStateMachineTemplateSignatures());
    }  }

class StateMachineTraceItem { 
    before Label_StateMachine_34:trace(CodeTranslator,Object,String,UmpleClass,String...)
  {
				else if(o instanceof State)
				{
					State state = (State)o;
					name = getStateMachine().getName()+"\"";
					obj = state.getName();
					for( Action a : ((State) o).getActions() )
					{
						if( this.getEntry() && a.getActionType().equals("entry") )
							obj += ",actionUmpleLine=" + a.getPosition().getLineNumber();
						if( this.getExit() && a.getActionType().equals("exit") )
							obj += ",actionUmpleLine=" + a.getPosition().getLineNumber();
					}
					}
				else if(o instanceof Activity)
				{
					Activity act = (Activity)o;
					State state = act.getState();
					name = getStateMachine().getName()+"\"";
					obj = state.getName();
					if( methodname.equals("sm_da"))
						obj += ",doActivitedStarted";
					else if(methodname.equals("sm_di"))
						obj += ",doActivitedInterrupted";
				}
			}  }

class ConstraintNameNameAnalyzer { 
    before Label_StateMachine_43:generateConstraintName(UmpleClassifier,String,Boolean)
  {
        StateMachine stateMachine = null;
        if(uClassifier instanceof UmpleClass)
        {
          stateMachine = ((UmpleClass)uClassifier).getStateMachine(value);
        }
        }  }

class ConstraintNameNameAnalyzer { 
    before Label_StateMachine_45:generateConstraintName(UmpleClassifier,String,Boolean)
  {
        if(stateMachine!=null)
        {
          ConstraintStateMachine name = new ConstraintStateMachine(stateMachine);
          return name;
        }
        }  }

class UmpleInternalParser { 
    before Label_StateMachine_49:analyze(boolean)
  {
        secondPostTokenAnalysis();
      }  }

class UmpleInternalParser { 
    before Label_StateMachine_56:analyzeToken(Token,int)
  {
      analyzeStateMachineToken(t,analysisStep);
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_80:postTokenClassAnalysis
  {
      addAutogeneratedMethodsForStateMachines();
      }  }

class UmpleInternalParser { 
    before Label_StateMachine_84:analyzeClass(Token)
  {
    //Reset number of activeObjects with each class definition
    this.numberOfActiveObjects = 1;
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_89:addUnlinkedKeys
  {          
            if(c.hasStateMachines())  
            {
                for(StateMachine aStateMachine : c.getStateMachines())
                {
                    if(aStateMachine.getName().equals(tokenVal))
                    {
                        tokenMatch = true;
                        break;
                    }
                }
            }
            }  }

class UmpleInternalParser { 
    before Label_StateMachine_97:analyzeMethod(Token,UmpleElement,boolean)
  {
        if (uClass.getStateDependentMethods().contains(aMethod) && !aMethod.isIsAbstract()) {
          uClass.addStateDependentMethod(aMethod, null);
        }
        else
        }  }

class UmpleInternalParser { 
    before Label_StateMachine_98:analyzeMethod(Token,UmpleElement,boolean)
  {
        stateDependentMethodsflag = !uClass.getStateDependentMethods().contains(aMethod);
        }  }

class UmpleInternalParser { 
    before Label_StateMachine_100:checkCodeInjectionValidity(Token,UmpleClass,String)
  {
          stateDependentMethodsFlag = uClass.getStateDependentMethods().stream().anyMatch(m -> m.getName().equals(operationFinal));
        }  }

class UmpleInternalParser { 
    before Label_StateMachine_102:analyzeExtraCode(Token,UmpleClass)
  {

    //This is a catch all and will be used less often as the grammar gets updated.
    if(extraCodeIsMalformedStateMachine(token)) setFailedPosition(token.getPosition(), 1006, "");
    }  }

class CompositeStructureTokenAnalyzer { 
    before Label_StateMachine_156:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("statemachineExpr"))
			     {
				   rawLine.addElementAll(analyzeStateMachineConstraintExpression(invariantToken,null));
			     }
			   }  }

class CompositeStructureTokenAnalyzer { 
    before Label_StateMachine_153:analyzeConstraint(Token,UmpleClassifier)
  {
	     else if (invariantToken.is("statemachineExpr"))
	     {
		   rawLine.addElementAll(analyzeStateMachineConstraintExpression(invariantToken,uClassifier));
	     }
	   }  }

class UmpleInternalParser { 
    before Label_StateMachine_145:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("state"))
      {
        tokenKey = "stateName";
      }
      else if (token.is("inlineStateMachine"))
      {
        tokenKey =  "name";
      }
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_143:analyzeModelEnumInClass(UmpleClass,UmpleEnumeration)
  {   
     // Check if the class's state machines conflict with the enumeration, and if any of its state 
     // machine's events use the enumeration in their parameters
     for (StateMachine sm : uClass.getStateMachines()) {
       if (classUsesEnum) {
         if (uEnum.hasSameName(sm.getName())) {
           // Enumeration Conflicts with State Machine Error
           getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                             uEnum.getPosition(), 
                                                             uEnum.getName(), 
                                                             "" + uEnum.getPosition().getLineNumber(),
                                                             sm.getName(),
                                                             uClass.getName()));
           return;
         }
       }
       for (Event e : sm.getAllEvents()) {
         for (MethodParameter p : e.getParams()) {
           if (uEnum.hasSameName(p.getType())) {
             if (!classUsesEnum && uEnum.hasSameName(sm.getName())) {
               // Enumeration Conflicts with State Machine Error
               getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                                uEnum.getPosition(), 
                                                                uEnum.getName(), 
                                                                "" + uEnum.getPosition().getLineNumber(),
                                                                sm.getName(),
                                                                uClass.getName()));
               return;
             } else {
               classUsesEnum = true;
           }
         }
       }
      }
     }
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_142:postTokenClassEnumerationAnalysis(UmpleClass)
  {
      // Check if the enumeration conflicts with any state machines, and if the enumeration is used as
      // event parameters
      for (StateMachine sm : uClass.getStateMachines()) {
        if (uEnum.hasSameName(sm.getName())) {
          // Enumeration Conflicts with State Machine Error
          getParseResult().addErrorMessage(new ErrorMessage(97, 
                                                            uEnum.getPosition(), 
                                                            uEnum.getName(), 
                                                            "" + uEnum.getPosition().getLineNumber(),
                                                            sm.getName(),
                                                            uClass.getName()));
          return;
        }
        for (Event e : sm.getAllEvents()) {
          for (MethodParameter p : e.getParams()) {
            if (uEnum.hasSameName(p.getType()) && otherClass != null) {
              // Event Parameter Ambiguity Warning
              getParseResult().addErrorMessage(new ErrorMessage(103, 
                                                                uEnum.getPosition(), 
                                                                uEnum.getName(), 
                                                                "" + uEnum.getPosition().getLineNumber(),
                                                                p.getName(),
                                                                e.getName(),
                                                                sm.getName(),
                                                                otherClass.getName()));
            }
          }
        }
      }
      }  }

class UmpleInternalParser { 
    before Label_StateMachine_136:traceItemType(Token)
  {
      // --- check if state machine
      for( StateMachine sVar : aClass.getStateMachines() )
      {
        if( traceToken.getValue("traceEntity").equals(sVar.getName()))
        {
          traceItemType = 2;
        }
        for( State s : sVar.getStates() )
        {
          if( traceToken.getValue("traceEntity").equals(s.getName()) || traceToken.getValue("traceEntity").equals(sVar.getName()+"."+s.getName()) )
          {
            traceItemType = 2;
          }
          for( Transition t : s.getTransitions() )
            if( traceToken.getValue("traceEntity").equals(t.getEvent().getName()))
            {
              traceItemType = 2;
            }
          // check if traced state is already found
          // no need to check nested states
          if( traceItemType == 2 ) return traceItemType;
          if(s.hasNestedStateMachines())
          {
            traceItemType = checkNestedStateMachine(traceToken.getValue("traceEntity"),s);	
          }
        }
      }
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_133:analyzeTraceItem(Token)
  {
      if( traceItemType == 2 )
      {
        analyzeStateMachineTraceItem(traceToken);
      }
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_116:processGTemplateParameterAssignment(Token,UmpleClassifier,String)
  {
          else if (subToken.is("StateMachineAliasName")){ 
              StateMachineTemplateSignature stTSignature = obtainStateMachineTemplateSignature(subToken);
              if (! aGeneralTPApplied.hasStateMachineTemplateSignature(stTSignature)){  
                aGeneralTPApplied.addStateMachineTemplateSignature(stTSignature);
              } else {
                getParseResult().addErrorMessage(new ErrorMessage(229,subToken.getPosition(),aGeneralTPApplied.getInheritanceName(),stTSignature.getSrcStateMachine()));
                return;
              } 
          } else if (subToken.is("iEStateMachine")){ 
              StateMachineModifier stTSignature = obtainStateMachineModifier(subToken);
              if (! aGeneralTPApplied.hasStateMachineModifier(stTSignature)){  
                aGeneralTPApplied.addStateMachineModifier(stTSignature);
              } else {
                getParseResult().addErrorMessage(new ErrorMessage(229,subToken.getPosition(),aGeneralTPApplied.getInheritanceName(),stTSignature.getSrcStateMachine()));
                return;
              } 
          } 
        }  }

class UmpleInternalParser { 
    before Label_StateMachine_115:processGTemplateParameterAssignment(Token,UmpleClassifier,String)
  {
                StateMachineTemplateSignature stTSignature = obtainStateMachineTemplateSignatureForTransitions(subToken);
                if (! aGeneralTPApplied.hasStateMachineTemplateSignature(stTSignature)){  
                  aGeneralTPApplied.addStateMachineTemplateSignature(stTSignature);
                } else {
                  getParseResult().addErrorMessage(new ErrorMessage(229,subToken.getPosition(),aGeneralTPApplied.getInheritanceName(),stTSignature.getSrcStateMachine()));
                  return;
                }
            }  }

class UmpleInternalParser { 
    before Label_StateMachine_113:applyTraits
  {
          if (getParseResult().getWasSuccess()) copyStateMachinesFromTraiToClass(uClass);
          }  }

class UmpleInternalParser { 
    before Label_StateMachine_108:analyzeExtraCode(Token,UmpleTrait)
  {
      if(extraCodeIsMalformedStateMachine(token)) setFailedPosition(token.getPosition(), 1006, "");
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_66:analyzeToken(Token,UmpleClass,int)
  {
      analyzeStateMachineToken(t,aClass,analysisStep);
    }  }

class UmpleInternalParser { 
    before Label_StateMachine_109:analyzeException(Token,UmpleTrait)
  {
    else if(sub.is("malformedStatemachine1")||sub.is("malformedStatemachine2"))
    {
      String extraCode = "";
      for(Token token:sub.getSubTokens())
      {
        if(token.is("stuff"))
        {
          if(!"".equals(token.getValue())&&!token.getValue().contains(" ")&&!Token.isValidIdentifier(token.getValue()))
          {
            setFailedPosition(token.getPosition(), 150, token.getValue("name"));
          }
          extraCode += token.getValue()+ " ";
        }
      }
      extraCode += "\n  {\n    "+sub.getValue("innerstuff")+"\n  }";
      aTrait.appendExtraCode("// line " + exception.getPosition().getLineNumber() + " " + aTrait.getRelativePath(exception.getPosition().getFilename(),"Java"));
      aTrait.appendExtraCode("  "+extraCode+"\n");
      setFailedPosition(sub.getPosition(), 1006, sub.getValue("name"));
    }

    }  
    
    }
