// Code generated by Umple 1.29.1.4260.b21abf3a3

digraph "DiagramCoreMaster" {
  size="80,10"
  rankdir="BT"
  node [shape=record margin=0; href="javascript:Action.selectClass(&quot;\N&quot;);"];

  // Class: Hierarchy
  "Hierarchy" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Hierarchy    </td></tr><hr/><tr><td align="left" href="" title="UmpleClassifier element&#13;">  element : UmpleClassifier  </td></tr></table>>,
   tooltip="class Hierarchy
Used to persist hirarchy information for given elemnts (owner, and children)&#13;@umplesource Generator_UmpleModelWalker.ump 51&#13;"];

  // Class: StateMachine
  "StateMachine" [ style=filled, fillcolor="#BBDDFF" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    StateMachine    </td></tr><hr/><tr><td align="left" href="" title="Integer recentSearchDepth&#13;">  recentSearchDepth : Integer  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean containsHistoryState&#13;">  containsHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean containsDeepHistoryState&#13;">  containsDeepHistoryState : Boolean  </td></tr><tr><td align="left" href="" title="Boolean queued&#13;before getContainsHistoryState { if ('H'.equals(name)) { containsHistoryState = true; } }&#13;before getContainsDeepHistoryState { if ('HStar'.equals(name)) { containsDeepHistoryState = true; } }&#13;">  queued : Boolean  </td></tr><tr><td align="left" href="" title="Boolean pooled&#13;">  pooled : Boolean  </td></tr></table>>,
   tooltip="class StateMachine
* An entity in a running program that can have a set of values (states) and which&#13; changes values by taking transitions in response to various events.&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource StateMachine.ump 18&#13;@umplesource StateMachine_Code.ump 14&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1730&#13;@umplesource DiagramMaster.ump 96&#13;"];

  // Class: UmpleElement
  "UmpleElement" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleElement    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple element.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple element.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="Boolean hasMainMethod&#13;">  hasMainMethod : Boolean  </td></tr><tr><td align="left" href="" title="String[] namespaces&#13;">  namespaces : String[]  </td></tr><tr><td align="left" href="" title="String packageName&#13;">  packageName : String  </td></tr><tr><td align="left" href="" title="ExtraCode extraCode&#13;The code associated with the Umple element.&#13;">  extraCode : ExtraCode  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;Specifies whether or not the Umple element is internal.&#13;">  isInternal : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate coordinates&#13;Specifies the position of this Umple element (ex. The UmpleOnline diagram).&#13;">  coordinates : Coordinate  </td></tr><tr><td align="left" href="" title="String displayColor&#13;Specifies the display color of this element&#13;">  displayColor : String  </td></tr></table>>,
   tooltip="class UmpleElement
* An UmpleElement is one of the top-level items found in an Umple model&#13; Currently it has one subclass, UmpleClassifier&#13;&#13;@umplesource Umple.ump 124&#13;@umplesource Umple_Code.ump 1264&#13;@umplesource DiagramMaster.ump 79&#13;"];

  // Class: UmpleClassifier
  "UmpleClassifier" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClassifier    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="Boolean isDistributable&#13;Specifies whether or not the Umple class or implemented classes are distributable with RMI technology.&#13;">  isDistributable : Boolean  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="UmpleModel sourceModel&#13;">  sourceModel : UmpleModel  </td></tr></table>>,
   tooltip="class UmpleClassifier
* Represents an Umple classifier: a Class or Interface&#13;@umplesource Umple.ump 551&#13;@umplesource Umple_Code.ump 1332&#13;@umplesource DiagramMaster.ump 78&#13;"];
  "UmpleClassifier" -> "UmpleElement" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleClass
  "UmpleClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleClass    </td></tr><hr/><tr><td align="left" href="" title="Boolean hasProxyPattern&#13;">  hasProxyPattern : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsDefaultInterface&#13;">  needsDefaultInterface : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDistributed&#13;">  isDistributed : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDefaultInterfaceRemoteRMI&#13;">  isDefaultInterfaceRemoteRMI : Boolean  </td></tr><tr><td align="left" href="" title="Boolean filteredin&#13;Specifies whether or not in the filter&#13;">  filteredin : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple class is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the class&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple class is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Integer propagateCounter&#13;Arbitary Limit&#13;">  propagateCounter : Integer  </td></tr><tr><td align="left" href="" title="PortBindingInformation[] portBindingInformation&#13;">  portBindingInformation : PortBindingInformation[]  </td></tr><tr><td align="left" href="" title="Boolean portClass&#13;">  portClass : Boolean  </td></tr><tr><td align="left" href="" title="TemplateMethod[] emitMethods&#13;">  emitMethods : TemplateMethod[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,TemplateAttributeParser&gt; templateEmitStringMap&#13;">  templateEmitStringMap : Map&lt;String,TemplateAttributeParser&gt;  </td></tr></table>>,
   tooltip="class UmpleClass
* An UmpleClass can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns, such as 'singleton', meaning that there can only be one instance,&#13; and abstract, meaning it can't have any instances.&#13;* In Umple_Code.ump: Methods for computing complex properties&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;----------------------------------------------------------&#13;Handle the existing templates in the current umple model.&#13;class UmpleModel {&#13;  UmpleTemplate getUmpleTemplate(String name){&#13;    for (UmpleTemplate aTemplate : getUmpleTemplates())&#13;    {&#13;      if (aTemplate.getName().equals(name))&#13;      {&#13;        return aTemplate;&#13;      }&#13;    }&#13;    return null;&#13;  }&#13;  &#13;   public UmpleTemplate addUmpleTemplate(String name)&#13;  {&#13;    UmpleTemplate newTemplate = getUmpleTemplate(name);&#13;    if (newTemplate == null)&#13;    {&#13;      newTemplate = new UmpleTemplate(name, this);&#13;      addUmpleTemplate(newTemplate);&#13;    }&#13;    return newTemplate;&#13;  }&#13;}&#13;----------------------------------------------------------&#13;An umple template contains a map for emittable strings&#13;@umplesource StateMachine.ump 359&#13;@umplesource Umple.ump 600&#13;@umplesource Umple_Code.ump 1472&#13;@umplesource Umple_Code_Trait.ump 377&#13;@umplesource Trace.ump 23&#13;@umplesource Structure.ump 18&#13;@umplesource Template.ump 45&#13;@umplesource DiagramMaster.ump 81&#13;"];
  "UmpleClass" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleModel
  "UmpleModel" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleModel    </td></tr><hr/><tr><td align="left" href="" title="UmpleFile umpleFile&#13;The Umple file (.ump) that was used to populate the model.&#13;">  umpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Boolean distributeOn&#13;">  distributeOn : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributeForced&#13;">  distributeForced : Boolean  </td></tr><tr><td align="left" href="" title="Boolean distributed&#13;">  distributed : Boolean  </td></tr><tr><td align="left" href="" title="Integer distributePattern&#13;">  distributePattern : Integer  </td></tr><tr><td align="left" href="" title="String distributeTechnology&#13;">  distributeTechnology : String  </td></tr><tr><td align="left" href="" title="String defaultPackage&#13;">  defaultPackage : String  </td></tr><tr><td align="left" href="" title="GenerateTarget[] generates&#13;">  generates : GenerateTarget[]  </td></tr><tr><td align="left" href="" title="Boolean shouldGenerate&#13;">  shouldGenerate : Boolean  </td></tr><tr><td align="left" href="" title="Glossary glossary&#13;">  glossary : Glossary  </td></tr><tr><td align="left" href="" title="String defaultNamespace&#13;">  defaultNamespace : String  </td></tr><tr><td align="left" href="" title="String code&#13;">  code : String  </td></tr><tr><td align="left" href="" title="UmpleClass mainClass&#13;">  mainClass : UmpleClass  </td></tr><tr><td align="left" href="" title="Boolean debugMode&#13;">  debugMode : Boolean  </td></tr><tr><td align="left" href="" title="ParseResult lastResult&#13;">  lastResult : ParseResult  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; generatedCode&#13;">  generatedCode : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="Map&lt;String,Analyzer&gt; analyzers&#13;">  analyzers : Map&lt;String,Analyzer&gt;  </td></tr><tr><td align="left" href="" title="Coordinate levelOffset&#13;data for default class positioning&#13;">  levelOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate initialOffset&#13;">  initialOffset : Coordinate  </td></tr><tr><td align="left" href="" title="Coordinate classSize&#13;">  classSize : Coordinate  </td></tr><tr><td align="left" href="" title="int maxYLevels&#13;">  maxYLevels : int  </td></tr><tr><td align="left" href="" title="CodeBlock[] extraCodes&#13;Top level blocks code contained within a model.&#13;extraCodes will be generated in a single file&#13;">  extraCodes : CodeBlock[]  </td></tr><tr><td align="left" href="" title="Coordinate offsetFromEdge&#13;data for default association positioning&#13;">  offsetFromEdge : Coordinate  </td></tr><tr><td align="left" href="" title="int reflexiveSegmentLength&#13;">  reflexiveSegmentLength : int  </td></tr><tr><td align="left" href="" title="List&lt;File&gt; linkedFiles&#13;">  linkedFiles : List&lt;File&gt;  </td></tr><tr><td align="left" href="" title="Double parsingTime&#13;ParsingTime represents Parsing end time&#13;gTime1 represents code generation start time&#13;gTime2 represents code generation end time&#13;">  parsingTime : Double  </td></tr><tr><td align="left" href="" title="Double gTime1&#13;">  gTime1 : Double  </td></tr><tr><td align="left" href="" title="Double gTime2&#13;">  gTime2 : Double  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; hashMap&#13;">  hashMap : Map&lt;String,String&gt;  </td></tr><tr><td align="left" href="" title="String traceType&#13;">  traceType : String  </td></tr><tr><td align="left" href="" title="TracerDirective tracer&#13;">  tracer : TracerDirective  </td></tr></table>>,
   tooltip="class UmpleModel
* Class UmpleModel is the central class describing the system being compiled.&#13;&#13; The model contains everything that was derived from an Umple file (.ump) when it was parsed such as&#13; the classes, attributes, associations, state machines, methods, etc that were in it.&#13;&#13; Put another way, when an Umple file (.ump) is parsed an Umple model is populated with everything that was parsed from that file.&#13;&#13; Because of this it is absolutely critical to understand the model since it is basically the \"root\" of everything.&#13;*&#13; In Umple_Code.ump: Methods for manipulating the Model&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;http://umple.org/license&#13;&#13;Mixset meta-model&#13;Copyright: All contributers to the Umple Project&#13;&#13;This file is made available subject to the open source license found at:&#13;http://umple.org/license&#13;&#13;Feature diagram meta-model&#13;A FeatureDiagram stores information required to build a feature diagram in Umple&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Yellow for Classifiers, classes etc.&#13;@umplesource Umple.ump 29&#13;@umplesource UmpleVersion.ump 13&#13;@umplesource Umple_Code.ump 18&#13;@umplesource Umple_Code_Trait.ump 6&#13;@umplesource Mixset.ump 12&#13;@umplesource FeatureModel.ump 14&#13;@umplesource Trace.ump 17&#13;@umplesource UmpleInternalParser_CodeTrait.ump 7&#13;@umplesource UmpleInternalParser_CodeMixset.ump 18&#13;@umplesource DiagramMaster.ump 76&#13;"];
  "UmpleModel" -> "Runnable" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: Filter
  "Filter" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Filter    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Integer superCount&#13;">  superCount : Integer  </td></tr><tr><td align="left" href="" title="Integer subCount&#13;">  subCount : Integer  </td></tr><tr><td align="left" href="" title="Integer associationCount&#13;">  associationCount : Integer  </td></tr><tr><td align="left" href="" title="String[] values&#13;">  values : String[]  </td></tr><tr><td align="left" href="" title="String[] filterValues&#13;">  filterValues : String[]  </td></tr></table>>,
   tooltip="class Filter
* A Diagram represents a subset of the available model and is used&#13; to help isolate certain aspects of the system.&#13; It will be used by the code generation process to \"strip\" the model&#13; piror to generation so that all generators will support Diagrams&#13;&#13; Right now, no implementation, just setting up the model&#13;@umplesource Umple.ump 110&#13;@umplesource Umple_Code.ump 4914&#13;"];

  // Class: Method
  "Method" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Method    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Method is abstract.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isConstructor&#13;Specifies whether this is a constructor for the Umple class.&#13;">  isConstructor : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isQueued&#13;Specifies whether or not the method is queued.&#13;">  isQueued : Boolean  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the method.&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String name&#13;The name of the method.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] exceptions&#13;Throws exceptions&#13;">  exceptions : String[]  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the method.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="Boolean isImplemented&#13;Specifies whether or not the method is implemented.&#13;">  isImplemented : Boolean  </td></tr><tr><td align="left" href="" title="Boolean wasGenerated&#13;Specifies, for fAutoAPI methods, if the method was generated&#13;">  wasGenerated : Boolean  </td></tr></table>>,
   tooltip="class Method
* A method in an Umple class or interface&#13; Umple Methods are coded by the programmer in the language(s) of their choice&#13;*&#13;   * This is for cloning&#13;   * Note: This code doesn't cover deep cloning. It's a combination of  shallow and deep cloning&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;Grey for methods and code injections&#13;@umplesource Umple.ump 168&#13;@umplesource Umple_Code.ump 857&#13;@umplesource Trace_Code.ump 278&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1678&#13;@umplesource DiagramMaster.ump 131&#13;"];

  // Class: UmpleTestCase
  "UmpleTestCase" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTestCase    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class UmpleTestCase
* Test Case  at the  Class level .&#13;@umplesource Umple.ump 257&#13;"];

  // Class: ConstraintVariable
  "ConstraintVariable" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintVariable    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr></table>>,
   tooltip="class ConstraintVariable
* ConstraintVariables encapsulate that data of one element in a ConstraintTree, making up the nodes of that tree.&#13; For example: a<3&#13;     has the structure:   ConstraintTree&#13;                          ConstraintOperator(<)&#13;                            /            \&#13;                    ConstraintTree     ConstraintNumberLiteral(3)&#13;               ConstraintAttribute(a)&#13;     where all the \"Constraint\" classes inherit from ConstraintVariable&#13;@umplesource Umple.ump 322&#13;@umplesource Umple_Code.ump 3271&#13;"];
  "ConstraintVariable" -> "Iterable&lt;ConstraintVariable&gt;" [  arrowhead="empty"; samehead="gen"; style=dashed];


  // Class: ConstraintTree
  "ConstraintTree" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ConstraintTree    </td></tr><hr/><tr><td align="left" href="" title="ConstraintVariable root&#13;">  root : ConstraintVariable  </td></tr><tr><td align="left" href="" title="ConstraintOperator requestor&#13;">  requestor : ConstraintOperator  </td></tr><tr><td align="left" href="" title="TreeSet&lt;String&gt; names&#13;">  names : TreeSet&lt;String&gt;  </td></tr><tr><td align="left" href="" title="boolean shouldDisplayBrackets&#13;">  shouldDisplayBrackets : boolean  </td></tr><tr><td align="left" href="" title="boolean displayNegation&#13;">  displayNegation : boolean  </td></tr><tr><td align="left" href="" title="boolean displayBrackets&#13;">  displayBrackets : boolean  </td></tr><tr><td align="left" href="" title="int numberOfElements&#13;">  numberOfElements : int  </td></tr></table>>,
   tooltip="class ConstraintTree
* ConstraintTrees are a redundant class that are necessary because of lone constraints, i.e. [true] has to be handled, and does not contain an operator&#13;   * If lone constraints didn't exist then the ConstraintTree class could be condensed into ConstraintOperator. One nice religation of responsibilities is that ConstraintTrees take care of the ! and () symbols, leaving the ConstraintOperator class to be more pure&#13;*************************************************************************************&#13;************************************NEW CLASS****************************************&#13;*************************************************************************************&#13;@umplesource Umple.ump 328&#13;@umplesource Umple_Code.ump 2577&#13;@umplesource UmpleInternalParser_CodeTrait_StateMachine.ump 1544&#13;"];
  "ConstraintTree" -> "ConstraintVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Precondition
  "Precondition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    Precondition    </td></tr></table>>,
   tooltip="class Precondition
* The Preconditions are constraints on methods, restricting the method so that it does not process if the constraint is not satisfied.&#13;@umplesource Umple.ump 356&#13;@umplesource Umple_Code.ump 2886&#13;"];
  "Precondition" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: Postcondition
  "Postcondition" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Postcondition    </td></tr><hr/><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr></table>>,
   tooltip="class Postcondition
* The Preconditions are constraints on methods, throughing an exception if the constraint is not sastisfied after the method has computed.&#13;@umplesource Umple.ump 363&#13;@umplesource Umple_Code.ump 2916&#13;"];
  "Postcondition" -> "ConstraintTree" [arrowhead="empty"; samehead="gen"];


  // Class: CodeInjection
  "CodeInjection" [ style=filled, fillcolor="#EEEEEE" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CodeInjection    </td></tr><hr/><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String operation&#13;">  operation : String  </td></tr><tr><td align="left" href="" title="String operationSource&#13;">  operationSource : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr><tr><td align="left" href="" title="CodeBlock snippet&#13;">  snippet : CodeBlock  </td></tr><tr><td align="left" href="" title="String constraintParameterName&#13;">  constraintParameterName : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Boolean isInternal&#13;">  isInternal : Boolean  </td></tr></table>>,
   tooltip="class CodeInjection
* A block of code that can be injected into one or more methods, constructor, etc.&#13;&#13;@umplesource Umple.ump 502&#13;@umplesource Umple_Code.ump 1202&#13;@umplesource DiagramMaster.ump 133&#13;"];

  // Class: UmpleEnumeration
  "UmpleEnumeration" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleEnumeration    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String[] enumValues&#13;">  enumValues : String[]  </td></tr></table>>,
   tooltip="class UmpleEnumeration
* Represents an enumeration&#13;@umplesource Umple.ump 539&#13;@umplesource UmpleEnumeration_Code.ump 1&#13;"];

  // Class: UmpleInterface
  "UmpleInterface" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleInterface    </td></tr></table>>,
   tooltip="class UmpleInterface
* Represents a interface.&#13; Like a class, but can't have any concrete methods, attributes or associations.&#13;@umplesource Umple.ump 578&#13;@umplesource DiagramMaster.ump 77&#13;"];
  "UmpleInterface" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleTrait
  "UmpleTrait" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleTrait    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAbstract&#13;Specifies whether or not the Umple class is an abstract class.&#13;">  isAbstract : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSingleton&#13;Specifies whether or not the Umple trait is a singleton.&#13;">  isSingleton : Boolean  </td></tr><tr><td align="left" href="" title="Association[] associations&#13;">  associations : Association[]  </td></tr><tr><td align="left" href="" title="Method[] unimplementedMethods&#13;List of candidate methods that were not added to the Trait&#13;">  unimplementedMethods : Method[]  </td></tr><tr><td align="left" href="" title="Key key&#13;">  key : Key  </td></tr><tr><td align="left" href="" title="Boolean iAmImmutable&#13;Specifies whether or not the Umple trait is immutable.&#13;">  iAmImmutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean ancestorIsImmutable&#13;">  ancestorIsImmutable : Boolean  </td></tr></table>>,
   tooltip="class UmpleTrait
* An UmpleTrait can contain attributes, associations, state machines and methods.&#13; It can also have various other information such as a key (to identify uniqueness),&#13; code to inject into generated code, and comments. It can be tagged with various&#13; patterns.&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 691&#13;@umplesource Umple_Code_Trait.ump 38&#13;"];
  "UmpleTrait" -> "UmpleClassifier" [arrowhead="empty"; samehead="gen"];


  // Class: GeneralTPApplied
  "GeneralTPApplied" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    GeneralTPApplied    </td></tr><hr/><tr><td align="left" href="" title="String inheritanceName&#13;">  inheritanceName : String  </td></tr><tr><td align="left" href="" title="String[] parameters&#13;">  parameters : String[]  </td></tr><tr><td align="left" href="" title="Map&lt;String,String&gt; parameterMapping&#13;">  parameterMapping : Map&lt;String,String&gt;  </td></tr></table>>,
   tooltip="class GeneralTPApplied
This class is used to assign parameters in classes and traits.&#13;@umplesource Umple.ump 771&#13;@umplesource Umple_Code.ump 4248&#13;"];

  // Class: AssociationClass
  "AssociationClass" [ style=filled, fillcolor="#FFEEAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    AssociationClass    </td></tr></table>>,
   tooltip="class AssociationClass
* A combination of Class and Association (as defined in UML)&#13; An AssociationClass is a full-fledged class, but at the same time&#13; It associates two other classes that would otherwise have a many-many&#13; relationship. Instances of the AssociationClass represent data&#13; held by the links between those two classes.&#13;&#13;@umplesource Umple.ump 844&#13;@umplesource Umple_Code.ump 1307&#13;@umplesource DiagramMaster.ump 80&#13;"];
  "AssociationClass" -> "UmpleClass" [arrowhead="empty"; samehead="gen"];


  // Class: UmpleVariable
  "UmpleVariable" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    UmpleVariable    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the Umple variable.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;The type of the Umple variable.&#13;">  type : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;The modifier associated with the Umple variable.&#13;potential enum, 'settable'&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String value&#13;The value of the Umple variable.&#13;">  value : String  </td></tr></table>>,
   tooltip="class UmpleVariable
* Superclass for tracking member variables in all target languages&#13; TODO: Code smell because we have both an association variable and also an association&#13; This class should go and instead AssociationEnd should be the member variable&#13;&#13;@umplesource Umple.ump 855&#13;@umplesource Umple_Code.ump 2260&#13;@umplesource Trace.ump 29&#13;@umplesource Trace_Code.ump 16&#13;@umplesource DiagramMaster.ump 88&#13;"];

  // Class: UniqueIdentifier
  "UniqueIdentifier" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UniqueIdentifier    </td></tr></table>>,
   tooltip="class UniqueIdentifier
@umplesource Umple.ump 877&#13;"];
  "UniqueIdentifier" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Attribute
  "Attribute" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Attribute    </td></tr><hr/><tr><td align="left" href="" title="Boolean isAutounique&#13;Specifies whether or not the method parameter is auto unique.&#13;TODO: should default to false, but constructors would need updating&#13;">  isAutounique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isUnique&#13;Specifies whether or not the attribute is unique.&#13;">  isUnique : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isList&#13;Specifies whether or not the method parameter is a list.&#13;">  isList : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isDerived&#13;Specifies whether or not the method parameter is derived.&#13;">  isDerived : Boolean  </td></tr><tr><td align="left" href="" title="CodeBlock codeblock&#13;">  codeblock : CodeBlock  </td></tr><tr><td align="left" href="" title="Boolean isLazy&#13;Specifies whether or not the method parameter is lazy.&#13;">  isLazy : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRefinement&#13;">  isRefinement : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isIvar&#13;Specifies whether or not the method parameter is ivar.&#13;">  isIvar : Boolean  </td></tr></table>>,
   tooltip="class Attribute
* Represents an attribute.&#13; An attribute is more abstract than an instance variable / property in that&#13; it can be derived, and have various other modifiers such as being&#13; initialized, lazy (does not appear in constructor and must be initialized&#13; after construction), etc.&#13;&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class end------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;------------------------------------class start----------------------------------------------&#13;---------------------------------------------------------------------------------------------&#13;@umplesource Umple.ump 887&#13;@umplesource Umple_Code.ump 2302&#13;@umplesource Umple_Code_Trait.ump 348&#13;@umplesource DiagramMaster.ump 91&#13;"];
  "Attribute" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: Association
  "Association" [ style=filled, fillcolor="#AAFFAA" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Association    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;The name of the association.&#13;">  name : String  </td></tr><tr><td align="left" href="" title="Boolean isLeftNavigable&#13;">  isLeftNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRightNavigable&#13;">  isRightNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isLeftComposition&#13;">  isLeftComposition : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isRightComposition&#13;">  isRightComposition : Boolean  </td></tr><tr><td align="left" href="" title="Coordinate[] positions&#13;">  positions : Coordinate[]  </td></tr><tr><td align="left" href="" title="Position tokenPosition&#13;">  tokenPosition : Position  </td></tr><tr><td align="left" href="" title="Position tokenEndPosition&#13;">  tokenEndPosition : Position  </td></tr><tr><td align="left" href="" title="Boolean immutable&#13;">  immutable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean named&#13;">  named : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialized&#13;">  isSpecialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialization&#13;">  isSpecialization : Boolean  </td></tr><tr><td align="left" href="" title="String commonClassName&#13;name of the class this association shares with its parent&#13;">  commonClassName : String  </td></tr></table>>,
   tooltip="class Association
* Represents an association, typically between two Umple classes (1-1, 1-*, *-1, etc).&#13; An association in UML/Umple represents a relationship that exists at run time&#13; where instances of one class reference the other, and (if bidirectional) instance&#13; of the other class reference the first cass.&#13; The number of references is governed by the Multiplicity at each AssociationEnd&#13;&#13;Green for things to do with associations and attributes&#13;@umplesource Umple.ump 938&#13;@umplesource Umple_Code.ump 2427&#13;@umplesource DiagramMaster.ump 84&#13;"];

  // Class: AssociationVariable
  "AssociationVariable" [ style=filled, fillcolor="#99EE99" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    AssociationVariable    </td></tr><hr/><tr><td align="left" href="" title="Multiplicity multiplicity&#13;">  multiplicity : Multiplicity  </td></tr><tr><td align="left" href="" title="Boolean isNavigable&#13;">  isNavigable : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isComposition&#13;">  isComposition : Boolean  </td></tr><tr><td align="left" href="" title="String priority&#13;">  priority : String  </td></tr><tr><td align="left" href="" title="AssociationVariable specializedFromVariable&#13;specialized from this association variable&#13;">  specializedFromVariable : AssociationVariable  </td></tr><tr><td align="left" href="" title="Boolean isSpecialized&#13;code relevant to specialization of associations&#13;is it ever specialized?&#13;">  isSpecialized : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isSpecialization&#13;is it a specialization of another?&#13;">  isSpecialization : Boolean  </td></tr><tr><td align="left" href="" title="String commonClassName&#13;">  commonClassName : String  </td></tr><tr><td align="left" href="" title="String superClassName&#13;">  superClassName : String  </td></tr><tr><td align="left" href="" title="int relevantEnd&#13;0 to ensure that everything doesn't break&#13;">  relevantEnd : int  </td></tr><tr><td align="left" href="" title="Boolean needsSuperCode&#13;">  needsSuperCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean needsCommonCode&#13;">  needsCommonCode : Boolean  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToOne&#13;">  mulChangedToOne : Boolean  </td></tr><tr><td align="left" href="" title="String scName&#13;">  scName : String  </td></tr><tr><td align="left" href="" title="Boolean mulChangedToN&#13;">  mulChangedToN : Boolean  </td></tr><tr><td align="left" href="" title="Boolean reqSetCode&#13;">  reqSetCode : Boolean  </td></tr></table>>,
   tooltip="class AssociationVariable
* An association variable represents one of the variables used to represent&#13; an association. In a two-directional association (navigable) there would&#13; be one of these in each associated class.&#13;&#13; See also AssociationEnd&#13;&#13; TODO: Code smell. Should be replaced by the 'otherEnd' of the AssociationEnd&#13;* In Umple_Code.ump: Methods for testing various complex properties&#13;@umplesource Umple.ump 1017&#13;@umplesource Umple_Code.ump 3494&#13;@umplesource Trace_Code.ump 236&#13;@umplesource DiagramMaster.ump 89&#13;"];
  "AssociationVariable" -> "UmpleVariable" [arrowhead="empty"; samehead="gen"];


  // Class: GeneratedElement
  "GeneratedElement" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GeneratedElement    </td></tr></table>>,
   tooltip="class GeneratedElement
TODO: Code smell: This duplicates the structure of the class from UmpleClass&#13;This is a problem for model-to-model transformations&#13;Should be abolished&#13;&#13;@umplesource Umple.ump 1074&#13;@umplesource Umple_Code.ump 3865&#13;"];

  // Class: GeneratedClass
  "GeneratedClass" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    GeneratedClass    </td></tr></table>>,
   tooltip="class GeneratedClass
* Represents a class that is generated from an Umple class, such as a Java or Cpp class.&#13;@umplesource Umple.ump 1082&#13;"];
  "GeneratedClass" -> "GeneratedElement" [arrowhead="empty"; samehead="gen"];


  // Class: Comment
  "Comment" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Comment    </td></tr><hr/><tr><td align="left" href="" title="String text&#13;The text associated with the comment.&#13;">  text : String  </td></tr><tr><td align="left" href="" title="Boolean annotation&#13;">  annotation : Boolean  </td></tr><tr><td align="left" href="" title="Boolean isInline&#13;">  isInline : Boolean  </td></tr></table>>,
   tooltip="class Comment
* Represents a comment, such as those found around classes, methods, attributes and associations.&#13;&#13;@umplesource Umple.ump 1140&#13;@umplesource Umple_Code.ump 4059&#13;"];

  // Class: UmpleTemplate
  "UmpleTemplate" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="10"><tr><td>    UmpleTemplate    </td></tr></table>>,
   tooltip="class UmpleTemplate
@umplesource Umple.ump 1149&#13;"];
  "UmpleTemplate" -> "UmpleClass" [arrowhead="empty"; samehead="gen"];


  // Class: MixsetOrFile
  "MixsetOrFile" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    MixsetOrFile    </td></tr><tr><td cellpadding="4">&laquo;abstract&raquo;</td></tr><hr/><tr><td align="left" href="" title="UmpleFile useUmpleFile&#13;File where the use statement was encountered&#13;">  useUmpleFile : UmpleFile  </td></tr><tr><td align="left" href="" title="Integer useUmpleLine&#13;">  useUmpleLine : Integer  </td></tr><tr><td align="left" href="" title="Boolean isMixset&#13;">  isMixset : Boolean  </td></tr></table>>,
   tooltip="class MixsetOrFile
A MixsetOrFile is an umple entity that is subject to require logic&#13;@umplesource Mixset.ump 18&#13;"];

  // Class: FeatureModel
  "FeatureModel" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    FeatureModel    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr></table>>,
   tooltip="class FeatureModel
@umplesource FeatureModel.ump 18&#13;@umplesource UmpleInternalParser_CodeRequireStatement.ump 395&#13;"];

  // Class: TraceDirective
  "TraceDirective" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceDirective    </td></tr><hr/><tr><td align="left" href="" title="Integer id&#13;">  id : Integer  </td></tr><tr><td align="left" href="" title="String tracerType&#13;">  tracerType : String  </td></tr></table>>,
   tooltip="class TraceDirective
* ----- Trace Directive MetaModel&#13; A statement found in Umple that directs code to be generated&#13; to trace a model element and generate output using some tracing tool&#13;Orange for Trace stuff&#13;@umplesource Trace.ump 94&#13;@umplesource DiagramMaster.ump 119&#13;@umplesource DiagramMaster.ump 126&#13;"];

  // Class: TraceCase
  "TraceCase" [ style=filled, fillcolor="#FFCC77" shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TraceCase    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="boolean activation&#13;">  activation : boolean  </td></tr></table>>,
   tooltip="class TraceCase
* Future work - initial implementation is done&#13; A group of trace directives that can be switched on or off by other&#13; trace directives&#13;@umplesource Trace.ump 260&#13;@umplesource DiagramMaster.ump 120&#13;"];

  // Class: Port
  "Port" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    Port    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="boolean conjugated&#13;">  conjugated : boolean  </td></tr><tr><td align="left" href="" title="int multiplicity&#13;">  multiplicity : int  </td></tr><tr><td align="left" href="" title="boolean replicated&#13;">  replicated : boolean  </td></tr><tr><td align="left" href="" title="String signalType&#13;">  signalType : String  </td></tr></table>>,
   tooltip="class Port
component&#13;@umplesource Structure.ump 45&#13;"];

  // Class: PortBinding
  "PortBinding" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    PortBinding    </td></tr><hr/><tr><td align="left" href="" title="UmpleVariable fromSubcomponent&#13;">  fromSubcomponent : UmpleVariable  </td></tr><tr><td align="left" href="" title="UmpleVariable toSubcomponent&#13;">  toSubcomponent : UmpleVariable  </td></tr></table>>,
   tooltip="class PortBinding
@umplesource Structure.ump 80&#13;"];

  // Class: ActiveMethod
  "ActiveMethod" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    ActiveMethod    </td></tr><hr/><tr><td align="left" href="" title="String modifier&#13;">  modifier : String  </td></tr><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="String type&#13;">  type : String  </td></tr><tr><td align="left" href="" title="Position position&#13;">  position : Position  </td></tr><tr><td align="left" href="" title="Position codePosition&#13;">  codePosition : Position  </td></tr><tr><td align="left" href="" title="Position endPosition&#13;">  endPosition : Position  </td></tr><tr><td align="left" href="" title="ActiveDirectionHandler methodBody&#13;">  methodBody : ActiveDirectionHandler  </td></tr><tr><td align="left" href="" title="ActiveMethod inverseMethodBody&#13;">  inverseMethodBody : ActiveMethod  </td></tr></table>>,
   tooltip="class ActiveMethod
@umplesource Structure.ump 148&#13;"];

  // Class: TemplateField
  "TemplateField" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateField    </td></tr><hr/><tr><td align="left" href="" title="String name&#13;">  name : String  </td></tr><tr><td align="left" href="" title="EmitResponse value&#13;">  value : EmitResponse  </td></tr></table>>,
   tooltip="class TemplateField
A template filed reprsents a field with a value for emitting purposes&#13;@umplesource Template.ump 74&#13;"];

  // Class: CompositeStructureTokenAnalyzer
  "CompositeStructureTokenAnalyzer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    CompositeStructureTokenAnalyzer    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="UmpleClass componentClass&#13;">  componentClass : UmpleClass  </td></tr><tr><td align="left" href="" title="boolean mustWarn&#13;*&#13;    * /////////////////////////////////////////////// TO BE REMOVED AFTER FIXING ERRORS WITH LATEST CHANGES ///////////////////////////////////////////////////////////////////////&#13;">  mustWarn : boolean  </td></tr></table>>,
   tooltip="class CompositeStructureTokenAnalyzer
Used as a helper class to analyze tokens in a given component&#13;@umplesource UmpleInternalParser_CodeStructure.ump 18&#13;"];

  // Class: TemplateTokenAnalyzer
  "TemplateTokenAnalyzer" [shape=plaintext margin=0 label=<<table border="1" cellspacing="0" cellborder="0" cellpadding="2"><tr><td cellpadding="4">    TemplateTokenAnalyzer    </td></tr><hr/><tr><td align="left" href="" title="UmpleInternalParser parser&#13;">  parser : UmpleInternalParser  </td></tr><tr><td align="left" href="" title="UmpleClass currentTemplate&#13;">  currentTemplate : UmpleClass  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,Boolean&gt; templateAttributes&#13;">  templateAttributes : HashMap&lt;String,Boolean&gt;  </td></tr><tr><td align="left" href="" title="HashMap&lt;String,Boolean&gt; emitMethods&#13;">  emitMethods : HashMap&lt;String,Boolean&gt;  </td></tr></table>>,
   tooltip="class TemplateTokenAnalyzer
Used as a helper class to analyze tokens in a given template&#13;@umplesource UmpleInternalParser_CodeTemplate.ump 286&#13;"];

  // All associations
  "Hierarchy" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="* ", headlabel="0..1 parentClass", tooltip="Hierarchy *  -> 0..1 parentClass UmpleClass"];
  "Hierarchy" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterfaces", tooltip="Hierarchy *  -> * parentInterfaces UmpleInterface"];
  "StateMachine" -> "UmpleClass" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleClass"];
  "StateMachine" -> "UmpleTrait" [dir="none", taillabel="* ", headlabel="0..1 ", tooltip="StateMachine *  -- 0..1  UmpleTrait"];
  "UmpleClassifier" -> "Method" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClassifier 1  -> *  Method"];
  "UmpleClass" -> "Method" [dir="none", taillabel="0..1 ", headlabel="* stateDependentMethods", tooltip="UmpleClass 0..1  -- * stateDependentMethods Method"];
  "UmpleClass" -> "CodeInjection" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  CodeInjection"];
  "UmpleClass" -> "UmpleEnumeration" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* enums", tooltip="UmpleClass 1  -> * enums UmpleEnumeration"];
  "UmpleClass" -> "Precondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* preConds", tooltip="UmpleClass 1  -> * preConds Precondition"];
  "UmpleClass" -> "Postcondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* postConds", tooltip="UmpleClass 1  -> * postConds Postcondition"];
  "UmpleClass" -> "UmpleTestCase" [dir="none", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -- *  UmpleTestCase"];
  "UmpleClass" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uClass", headlabel="* ", tooltip="UmpleClass 1 uClass -> *  ConstraintTree"];
  "UmpleClass" -> "UmpleClass" [dir="none", taillabel="* subclasses", headlabel="0..1 extendsClass", tooltip="UmpleClass * subclasses -- 0..1 extendsClass UmpleClass"];
  "UmpleClass" -> "UmpleTrait" [dir="none", taillabel="* subClasses", headlabel="* extendsTraits", tooltip="UmpleClass * subClasses -- * extendsTraits UmpleTrait"];
  "UmpleClass" -> "UmpleTemplate" [dir="none", taillabel="* subClasses", headlabel="* extendsTemplates", tooltip="UmpleClass * subClasses -- * extendsTemplates UmpleTemplate"];
  "UmpleClass" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* parentInterface", tooltip="UmpleClass *  -> * parentInterface UmpleInterface"];
  "UmpleClass" -> "UniqueIdentifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleClass 1  -> 0..1  UniqueIdentifier"];
  "UmpleClass" -> "Attribute" [dir="none", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -- *  Attribute"];
  "UmpleClass" -> "AssociationVariable" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  AssociationVariable"];
  "UmpleClass" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  Comment"];
  "UmpleClass" -> "GeneralTPApplied" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleClass 1  -> *  GeneralTPApplied"];
  "UmpleClass" -> "TraceDirective" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TraceDirective"];
  "UmpleClass" -> "TraceCase" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TraceCase"];
  "UmpleClass" -> "Port" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  Port"];
  "UmpleClass" -> "ActiveMethod" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  ActiveMethod"];
  "UmpleClass" -> "PortBinding" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  PortBinding"];
  "UmpleClass" -> "TemplateField" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleClass 0..1  -- *  TemplateField"];
  "UmpleModel" -> "UmpleEnumeration" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* enums", tooltip="UmpleModel 1  -> * enums UmpleEnumeration"];
  "UmpleModel" -> "Association" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  Association"];
  "UmpleModel" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleClass"];
  "UmpleModel" -> "UmpleTrait" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleTrait"];
  "UmpleModel" -> "StateMachine" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* stateMachineDefinitions", tooltip="UmpleModel 1  -> * stateMachineDefinitions StateMachine"];
  "UmpleModel" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  UmpleInterface"];
  "UmpleModel" -> "Filter" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleModel 1  -> *  Filter"];
  "UmpleModel" -> "MixsetOrFile" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleModel 0..1  -- *  MixsetOrFile"];
  "UmpleModel" -> "FeatureModel" [dir="none", taillabel="0..1 ", headlabel="0..1 ", tooltip="UmpleModel 0..1  -- 0..1  FeatureModel"];
  "Method" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Method 1  -> *  Comment"];
  "Precondition" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="Precondition *  -> 1  Method"];
  "Postcondition" -> "Method" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="Postcondition *  -> 1  Method"];
  "CodeInjection" -> "UmpleClassifier" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 ", tooltip="CodeInjection *  -> 1  UmpleClassifier"];
  "CodeInjection" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="CodeInjection 1  -> 0..1  ConstraintTree"];
  "UmpleInterface" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* extendsInterface", tooltip="UmpleInterface *  -> * extendsInterface UmpleInterface"];
  "UmpleInterface" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleInterface 1  -> *  Comment"];
  "UmpleTrait" -> "CodeInjection" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  CodeInjection"];
  "UmpleTrait" -> "Precondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* preConds", tooltip="UmpleTrait 1  -> * preConds Precondition"];
  "UmpleTrait" -> "Postcondition" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* postConds", tooltip="UmpleTrait 1  -> * postConds Postcondition"];
  "UmpleTrait" -> "ConstraintTree" [dir="forward", arrowhead="open", taillabel="1 uTrait", headlabel="* ", tooltip="UmpleTrait 1 uTrait -> *  ConstraintTree"];
  "UmpleTrait" -> "UmpleTrait" [dir="none", taillabel="* subTraits", headlabel="* extendsTraits", tooltip="UmpleTrait * subTraits -- * extendsTraits UmpleTrait"];
  "UmpleTrait" -> "UniqueIdentifier" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..1 ", tooltip="UmpleTrait 1  -> 0..1  UniqueIdentifier"];
  "UmpleTrait" -> "Attribute" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  Attribute"];
  "UmpleTrait" -> "AssociationVariable" [dir="none", taillabel="0..1 ", headlabel="* ", tooltip="UmpleTrait 0..1  -- *  AssociationVariable"];
  "UmpleTrait" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  Comment"];
  "UmpleTrait" -> "GeneralTPApplied" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="UmpleTrait 1  -> *  GeneralTPApplied"];
  "UmpleTrait" -> "UmpleInterface" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* requiredInterfaces", tooltip="UmpleTrait 1  -> * requiredInterfaces UmpleInterface"];
  "AssociationClass" -> "Association" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="0..2 associatedTo", tooltip="AssociationClass 1  -> 0..2 associatedTo Association"];
  "Attribute" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="Attribute 1  -> *  Comment"];
  "Association" -> "Association" [dir="none", taillabel="0..1 specializedFrom", headlabel="* specializedAssociations", tooltip="Association 0..1 specializedFrom -- * specializedAssociations Association"];
  "AssociationVariable" -> "AssociationVariable" [dir="none", label="0..1 relatedAssociation", tooltip="AssociationVariable 0..1 relatedAssociation AssociationVariable"];
  "AssociationVariable" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="AssociationVariable 1  -> *  Comment"];
  "GeneratedClass" -> "UmpleModel" [dir="forward", arrowhead="open", taillabel="* ", headlabel="1 model", tooltip="GeneratedClass *  -> 1 model UmpleModel"];
  "GeneratedClass" -> "UmpleClass" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="1 uClass", tooltip="GeneratedClass 0..1  -> 1 uClass UmpleClass"];
  "GeneratedClass" -> "GeneratedClass" [dir="forward", arrowhead="open", taillabel="0..1 ", headlabel="0..1 parentClass", tooltip="GeneratedClass 0..1  -> 0..1 parentClass GeneratedClass"];
  "TraceCase" -> "TraceDirective" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="TraceCase 1  -> *  TraceDirective"];
  "Port" -> "PortBinding" [dir="forward", arrowhead="open", taillabel="* ", headlabel="* bindings", tooltip="Port *  -> * bindings PortBinding"];
  "PortBinding" -> "Port" [dir="none", taillabel="* ", headlabel="1 fromPort", tooltip="PortBinding *  -- 1 fromPort Port"];
  "PortBinding" -> "Port" [dir="none", taillabel="* connector", headlabel="1 toPort", tooltip="PortBinding * connector -- 1 toPort Port"];
  "ActiveMethod" -> "Comment" [dir="forward", arrowhead="open", taillabel="1 ", headlabel="* ", tooltip="ActiveMethod 1  -> *  Comment"];
  "CompositeStructureTokenAnalyzer" -> "UmpleClass" [dir="none", taillabel="0..1 ", headlabel="* components", tooltip="CompositeStructureTokenAnalyzer 0..1  -- * components UmpleClass"];
  "TemplateTokenAnalyzer" -> "UmpleClass" [dir="none", taillabel="0..1 ", headlabel="* templates", tooltip="TemplateTokenAnalyzer 0..1  -- * templates UmpleClass"];
}
