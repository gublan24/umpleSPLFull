
// Code for mixset Association : 


class UmpleModel { 
    before Label_Association_24:markIncludedClasses(Filter)
  {
          if(f.hasAssociation())
          {
            markRelatedClass(f.getAssociationCount());
          }
        }  }

class UmpleModel { 
    before Label_Association_25:filterOutClasses
  {
            // Chop out it and its associations
            for(Association a : clazz.getAssociations())
            {      
            clazz.removeAssociation(a); // Remove from this end
            
            // Find the other end(s) and remove references too
            for (AssociationEnd ae : a.getEnds())
            {
                String endClassName = ae.getClassName();
                if(!endClassName.equals(clazz.getName()))
                {
                UmpleClass otherClass = getUmpleClass(endClassName);
                if(otherClass != null) {
                    otherClass.removeAssociation(a);
                }
                }
            }
            
            removeAssociation(a); // from model
            a.delete();
            }
            Object[] avs = clazz.getAssociationVariables().toArray();
            for(Object avo:  avs)
            {
            AssociationVariable av = (AssociationVariable)avo;
            AssociationVariable otherAv = av.getRelatedAssociation();
            if(otherAv != null) {
                otherAv.delete();
            }
            av.delete();
            }
            removeUmpleClass(clazz);
            clazz.delete();

          }  }

class ConstraintOperator { 
    before Label_Association_26:correctForCardinality(ConstraintVariable)
  {
      else if((variable instanceof ConstraintAssociation)&&value.contains("cardinality"))
      {
        ((ConstraintAssociation)variable).setNumberOf(true);
      }
    }  }

class UmpleTrait { 
    before Label_Association_28:propagateImmutabilityToAllRelationships(boolean)
  {
          for (AssociationVariable av : associationVariables)
          {
            if (!immutabilityAssociationRulesSatisfied(av, true)) { return false; }
          }
        }  }

class AssociationVariable { 
    before Label_Association_31:getTraced(String,UmpleClass)
  {
				for(AssociationTraceItem ast: td.getAssociationTraceItems())
				{
					if(( (method.equals("associationAdd")||method.equals("associationRemove")) && ast.getTraceCardinality()))
					{
						for(AssociationVariable variable: ast.getAssociationVariables())
						{
							if(variable.getName().equals(this.getName()))
								traceItems.add(ast);
						}

					}
					if((method.equals("associationAdd") && ast.getTraceAdd()))
					{
						for(AssociationVariable variable: ast.getAssociationVariables())
						{
							if(variable.getName().equals(this.getName()))
								traceItems.add(ast);
						}
					}
					if((method.equals("associationRemove") && ast.getTraceRemove()))
					{
						for(AssociationVariable variable: ast.getAssociationVariables())
						{
							if(variable.getName().equals(this.getName()))
								traceItems.add(ast);
						}
					}
				}
			}  }

class ModelConstraintAssociation { 
    before Label_Association_32:evaluate(UmpleClassifier)
  {
        for(Association association:uClass.getAssociations())
        {
          AssociationEnd theirs = null;
          AssociationEnd mine = null;
          if(association.getEnd(0).getClassName().equals(uClass.getName()))
          {
            theirs = association.getEnd(1);
            mine = association.getEnd(0);
          }
          else if(association.getEnd(1).getClassName().equals(uClass.getName()))
          {
            theirs = association.getEnd(0);
            mine = association.getEnd(1);
          }

          if(!theirs.getClassName().equals(getTarget()))
          {
            boolean isNotMyConcern = true;
            UmpleClass child = ((UmpleClass)uClassifier).getSourceModel().getUmpleClass(theirs.getClassName());

            if(child!=null)
            {
              UmpleClass parent = child.getExtendsClass();
              while(child!=null)
              {
                if(child.getName().equals(getTarget()))
                {
                  isNotMyConcern = false;
                }
                UmpleClass temp = parent;
                parent = child.getExtendsClass();
                child = temp;
              }
            }
            if(isNotMyConcern)
            {
              continue;
            }
          }

          String tBound = theirs.getMultiplicity().getBound();

          Integer rMax = 0;
          Integer rMin = 0;

          if(rightHandMultiplicity.getBound()!=null)
          {
            rMax = Integer.parseInt(rightHandMultiplicity.getBound().replace("*",""+Integer.MAX_VALUE));
            rMin = Integer.parseInt(rightHandMultiplicity.getBound().replace("*","0"));
          }
          else
          {
            rMax = Integer.parseInt(rightHandMultiplicity.getMaximum().replace("*",""+Integer.MAX_VALUE));
            rMin = Integer.parseInt(rightHandMultiplicity.getMinimum().replace("*","0"));
          }

          if("*".equals(rightHandMultiplicity.getBound()))
          {
          }
          else if(tBound==null)
          {
            Integer tMin = Integer.parseInt(theirs.getMultiplicity().getMinimum().replace("*","0"));
            Integer tMax = Integer.parseInt(theirs.getMultiplicity().getMaximum().replace("*",""+Integer.MAX_VALUE));

            if(tMax>rMax||tMin<rMin)
            {
              continue;
            }
          }
          else
          {
            Integer itBound = Integer.parseInt(tBound.replace("*","0"));
            if(itBound>rMax||itBound<rMin)
            {
              continue;
            }
          }

          tBound = mine.getMultiplicity().getBound();

          Integer lMax = 0;
          Integer lMin = 0;

          if(leftHandMultiplicity.getBound()!=null)
          {
            lMax = Integer.parseInt(leftHandMultiplicity.getBound().replace("*",""+Integer.MAX_VALUE));
            lMin = Integer.parseInt(leftHandMultiplicity.getBound().replace("*","0"));
          }
          else
          {
            lMax = Integer.parseInt(leftHandMultiplicity.getMaximum().replace("*",""+Integer.MAX_VALUE));
            lMin = Integer.parseInt(leftHandMultiplicity.getMinimum().replace("*","0"));
          }

          if("*".equals(leftHandMultiplicity.getBound()))
          {
          }
          else if(tBound==null)
          {
            Integer tMin = Integer.parseInt(mine.getMultiplicity().getMinimum().replace("*","0"));
            Integer tMax = Integer.parseInt(mine.getMultiplicity().getMaximum().replace("*",""+Integer.MAX_VALUE));

            if(tMax>lMax||tMin<lMin)
            {
              continue;
            }
          }
          else
          {
            Integer itBound = Integer.parseInt(tBound.replace("*","0"));
            if(itBound>lMax||itBound<lMin)
            {
              continue;
            }
          }
          return ModelConstraint.SUCCESS;
        }
        }  }
//Interaction between Trace and Association 
mixset Trace {  
class AssociationTraceItem { 
    before Label_Association_35:trace(CodeTranslator,Object,String,UmpleClass,String...)
  {
		for(AssociationVariable ass: uClass.getAssociationVariables())
		{
			if(ass.equals(o))
			{
				String type = ((AssociationVariable)o).getType();
				String name = "";
				String extra = "";
				String obj = "";
				String accessor = gen.translate("traceAccessor",this);
				String concatinator = gen.translate("traceConcatinator",this);
				String comma = concatinator+"\",\""+concatinator;
				String tracerName = Character.toUpperCase(getTracerType().charAt(0)) + getTracerType().substring(1);
				String messageLayout = "{0}"+comma+"{1}"+concatinator+"\",{2},{3},{4},\""+concatinator+"{5}"+concatinator+"\",{6},{7},\"";
				if(o instanceof AssociationVariable)
				{
					name = gen.translate("associationMany",(AssociationVariable)o);
			  }
				

				//         if(type==null||"".equals(type)||"Boolean".equals(type)||"boolean".equals(type)||"String".equals(type)||"int".equals(type)||"Integer".equals(type)||"float".equals(type)||"Float".equals(type)||"double".equals(type)||"Double".equals(type)||"Time".equals(type)||"Date".equals(type))
				//         {
				//           obj = name;
				//         }
				//         else
				//         {
				//           obj = name+"(\"+"+StringFormatter.format(gen.translate("traceIdentifier",this),name)+"+\")";
				//           name += gen.translate("traceFormatNonPrimitive",this);
				//         }

				for(String str: args){
					extra+=concatinator+str;
				}
				if(getTraceDirective().getTraceRecord()!=null)
				{
					for(Attribute record:getTraceDirective().getTraceRecord().getAttributes())
					{
						extra+=comma+gen.translate("attribute"+(record.getIsList()?"Many":"One"),record);
					}
					if(getTraceDirective().getTraceRecord().numberOfRecord()>0)
					{
						extra+= concatinator+"\"";
						for(String record:getTraceDirective().getTraceRecord().getRecord())
						{
							extra+=","+record.replace("\"","");
						}
						extra+= "\"";
					}
				}
				String message = messageLayout+extra;
				message = StringFormatter.format(
						message,gen.translate("traceTimestamp",this),
						gen.translate("traceThread",this),
						getPosition().getFilename().replace("\\","\\\\"),
						getPosition().getLineNumber(),
						uClass.getName()+"+"+type,
						StringFormatter.format(gen.translate("traceIdentifier",this),gen.translate("traceSelf",this)),
						methodname,
						name        
						);

				message = TraceItemUtil.prepareTraceMessage(getTraceDirective(),gen,this,message);

				message = StringFormatter.format(getExtremities(gen, name),message);
				message = GeneratorHelper.doIndent(message,gen.translate("traceIndent",this));
				if(getTraceDirective().getPostfix().getExecuteClause()!=null)
				{
					String execute = getTraceDirective().getPostfix().getExecuteClause();
					execute = GeneratorHelper.doIndent(execute,gen.translate("traceIndent",this));
					message += "\n" + execute;
				}
				return message;
			}
		}
		}  }
}

class CompositeStructureTokenAnalyzer { 
    before Label_Association_155:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("associationExpr"))
			     {
				   rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,null));
			     }
			   }  }

class CompositeStructureTokenAnalyzer { 
    before Label_Association_154:analyzeAssociationConstraintExpression(Token,UmpleClassifier)
  {
			  else if(sub.is("associationLit"))
			  {
				rawLine.addElementAll(analyzeAssociationLiteralConstraintExpression(sub,uClassifier,card,all,true,subject,operator));
			  }
			}  }

class CompositeStructureTokenAnalyzer { 
    before Label_Association_152:analyzeConstraint(Token,UmpleClassifier)
  {
		else if (invariantToken.is("associationExpr"))
		{
			rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,uClassifier));
		}
	   }  }

class UmpleInternalParser { 
    before Label_Association_147:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("associationDefinition"))
      {
        tokenKey = "name"; 
        prefix ="association";
      }
    }  }

class UmpleInternalParser { 
    before Label_Association_140:analyzeFilterToken(Token,int)
  {
            if(t.is("association"))
	        {
	          addAssociationValue(f,t);
          	}
          }  }

class UmpleInternalParser { 
    before Label_Association_139:layoutNewElements
  {
      // Layout associations
      for (int i=0; i<model.numberOfAssociations(); i++)
      {
        Association a = model.getAssociation(i);
        
        if (associationIsBetweenClassAndInterface (a)){continue;}
        if (associationIsBetweenClassAndTrait (a)){continue;}
        
        int numberOfPositions = a.numberOfPositions();

        if (numberOfPositions < 2)
        {
          Coordinate[] defaults = model.getDefaultAssociationPosition(a);
      if (defaults==null) continue;
          a.addPosition(defaults[0]);
          a.addPosition(defaults[1]);
          a.getPosition(0).setStatus(Coordinate.Status.Defaulted);
          a.getPosition(1).setStatus(Coordinate.Status.Defaulted);
        }
      }
    }  }

class UmpleInternalParser { 
    before Label_Association_138:analyzeLayoutToken(Token,UmpleClassifier,int)
  {
      else if (token.is("associationPosition"))
      {
        String name = token.getValue("name");
        Association assoc = model.getAssociation(name);

        if (assoc != null)
        {
          assoc.setName(name);
          for(Token position : token.getSubTokens())
          {
            if (position.is("coordinate"))
            {
              assoc.addPosition(new Coordinate(position.getIntValue("x"),position.getIntValue("y"),0,0));
            }
          }
        }
      }
    }  }

class UmpleInternalParser { 
    before Label_Association_137:traceItemType(Token)
  {
    // --- check if association
    for( AssociationVariable aVar : aClass.getAssociationVariables() )
    {
      if( traceToken.getValue("traceEntity").equals(aVar.getName()))
      {
        traceItemType = 3;
      }
    }

    for( Association a : aClass.getAssociations() )
    {
      if( a.getName().contains(traceToken.getValue("traceEntity") ))
      {
        traceItemType = 3;
      }
    }
    }  }

class UmpleInternalParser { 
    before Label_Association_135:traceItemType(Token)
  {  
    attr = attr==null?aClass.getAssociationVariable(traceToken.getValue("traceEntity")):attr;
    }  }

class UmpleInternalParser { 
    before Label_Association_134:anaylzeTraceWildCard(Token)
  {
    //------------- trace all associations [wildcard]
    if( traceToken.getValue("traceEntity").toLowerCase().equals("allassociations") )
    {
      for( AssociationVariable assoc : uClass.getAssociationVariables() )
      {
      	tracedAssoc.setPosition(traceToken.getPosition());
      	tracedAssoc.addAssociationVariable(assoc);
      	tracedAssoc.setTraceAdd(true);
      	tracedAssoc.setTraceRemove(true);
      }
    }
    }  }

class UmpleInternalParser { 
    before Label_Association_132:analyzeTraceStatement(UmpleClass,Token)
  {
          attr = traceDirective.getUmpleClass().getAssociationVariable(token.getValue("LHS"));
          }  }

class UmpleInternalParser { 
    before Label_Association_131:analyzeTraceStatement(UmpleClass,Token)
  {
          tracedAssoc.setConstraint(constraint);
          }  }

class UmpleInternalParser { 
    before Label_Association_130:analyzeTraceStatement(UmpleClass,Token)
  {
    tracedAssoc = new AssociationTraceItem(traceDirective);
    }  }

class UmpleInternalParser { 
    before Label_Association_119:analyzeFIXMLextendedContentContetnt(Token)
  {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}  }

class UmpleInternalParser { 
    before Label_addAssociation_118:analyzeFIXMLextendedContentContetnt(Token)
  {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}  }

class UmpleInternalParser { 
    before Label_Association_117:analyzeFIXMLDefinition(Token)
  {
				  assignAssociationInitialValues(); // based-on-single-associations
				}  }

class UmpleInternalParser { 
    before Label_Association_112:applyTraits
  {
            if (getParseResult().getWasSuccess()) copyAssociationsFromTraitToClass(uClass);
          }  }

class UmpleInternalParser { 
    before Label_Association_107:analyzeTraitToken(Token,UmpleTrait,int)
  {
      else if (token.is("inlineAssociation"))
      {
        analyzeinlineAssociation(token,aTrait);
      }
      else if (token.is("symmetricReflexiveAssociation"))
      {
        analyzeSymmetricReflexiveAssociation(token,aTrait);
      }
    }  }
