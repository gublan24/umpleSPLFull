mixset Trait{
// Fragment source file: Umple_Code_Trait.ump
// Line : 80
 class UmpleTrait { 
     
     public AssociationVariable getAssociationVariable(String name){
    for (AssociationVariable av : associationVariables)
    {
      if (av.getName().equals(name))
      {
        return av;
      }
    }
    return null;
    } 
}
}

mixset Trace
{
    // Fragment source file: Trace.ump
// Line : 217
class AssociationTraceItem
  {
    depend cruise.umple.parser.Position;

    isA TraceItem;
    
    ConstraintTree constraint = null;
    tracerType = {getTraceDirective().getTracerType()}

    * -> * AssociationVariable;
    * -> * Association;

    //default case tracing Cardinality
    boolean traceCardinality = true;
    boolean traceAdd = false;
    boolean traceRemove = false;

    Position position = null;
    periodClause = null;
    Boolean conditionallyWhere = false; 
    conditionType = "where";
  }
}

mixset Structure 
{

// Fragment source file: UmpleInternalParser_CodeStructure.ump
// Line : 1260
 class CompositeStructureTokenAnalyzer { private ConstraintTree analyzeAssociationLiteralConstraintExpression(Token literalToken, UmpleClassifier uClassifier, boolean cardinal, boolean all, boolean firstName, ConstraintTree subject, ConstraintOperator operator)
	{
		ConstraintTree rawLine = new ConstraintTree();
		for(Token sub:literalToken.getSubTokens())
		{
			if(sub.is("associationLit"))
			{
				rawLine.addElementAll(analyzeAssociationLiteralConstraintExpression(sub, uClassifier, cardinal, all, firstName, subject, operator));
				firstName = false;
			}
			else if(sub.is("constraintName"))
			{
				if(!firstName)
				{
					if(all&&!cardinal)
					{
						rawLine.addElement(new ConstraintOperator("&&"));
					}
					else
					{
						rawLine.addElement(new ConstraintOperator("||"));
					}
				}
				else
				{
					firstName = false;
				}
				rawLine.addElementAll(subject);
				rawLine.addElement(operator);
				rawLine.addElement(analyzeConstraintName(sub,uClassifier,true));
			}
			else if(sub.is("elements"))
			{
				if(!cardinal)
				{
					operator.setValue("cardinality==");
				}
			}
			else if(sub.is("number"))
			{
				if(!firstName)
				{
					if(all&&!cardinal)
					{
						rawLine.addElement(new ConstraintOperator("&&"));
					}
					else
					{
						rawLine.addElement(new ConstraintOperator("||"));
					}
				}
				else
				{
					firstName = false;
				}
				rawLine.addElementAll(subject);
				rawLine.addElement(operator);
				rawLine.addElement(analyzeConstraintNumber(sub));
				firstName = false;
			}
		}
		return rawLine;
	}

	private ConstraintTree analyzeAssociationConstraintExpression(Token associationExpressionToken , UmpleClassifier uClassifier)
	{
		List<Token> associationExpressionSubtokens = associationExpressionToken.getSubTokens();
		ConstraintTree rawLine = new ConstraintTree();
		ConstraintTree subject = new ConstraintTree();
		boolean card = associationExpressionToken.getValue("firstOp").equals("cardinality");
		boolean all = false;
		ConstraintOperator operator = new ConstraintOperator(associationExpressionToken.getValue("firstOp"));
		for(Token sub : associationExpressionSubtokens)
		{
			if(sub.is("constraintName"))
			{
				subject.addElement(analyzeConstraintName(sub,uClassifier,true));
			}
			  else if(sub.is("associationLit"))
			  {
				rawLine.addElementAll(analyzeAssociationLiteralConstraintExpression(sub,uClassifier,card,all,true,subject,operator));
			  }
			else if(sub.is("all"))
			{
				if(!card)
				{
					operator.setValue("hasAll");
					all = true;
				}
				else
				{
					//warning that cardinality all is not supported
				}
			}
			else if(sub.is("moreOp"))
			{
				if(!card)
				{
					card = true;
				}
				operator.setValue("cardinality>");
			}
			else if(sub.is("smallerOp"))
			{
				if(!card)
				{
					card = true;
				}
				operator.setValue("cardinality<");
			}
			else if(sub.is("greaterOp"))
			{
				if(!card)
				{
					card = true;
				}
				operator.setValue("cardinality>=");
			}
			else if(sub.is("lessOp"))
			{
				if(!card)
				{
					card = true;
				}
				operator.setValue("cardinality<=");
			}
			else if(sub.is("equalsOp"))
			{
				if(!card)
				{
					card = true;
				}
				operator.setValue("cardinality==");
			}
			else if(sub.is("notequalsOp"))
			{
				if(!card)
				{
					card = true;
				}
				operator.setValue("cardinality!=");
			}
		}
		return rawLine;
	} 
} 
}

mixset FIXML {
// Fragment source file: UmpleInternalParser_FIXML.ump
// Line : 7
 class UmpleInternalParser { 
     Map<Association,List<Token>> afixmlLastIntilialization = new HashMap<Association, List<Token>>();
     Map<Association,Integer> afixmlAttributeCount = new HashMap<Association, Integer>(); } 

// Fragment source file: UmpleInternalParser_FIXML.ump
// Line : 326
 class UmpleInternalParser { private void addAssociation(UmpleClass uClass, UmpleClass rUClass, Token mainToken){
    Multiplicity m = new Multiplicity();
		Association aAss = getModel().getAssociation(rUClass.getName()+"_Object");
		if ( aAss != null) {			
			Integer bound = Integer.parseInt(getModel().getAssociation(rUClass.getName()+"_Object").getEnd(1).getMultiplicity().getBound());
			bound++;
			m.setBound( bound.toString());
			getModel().getAssociation(rUClass.getName()+"_Object").getEnd(1).setMultiplicity(m);
			for (AssociationVariable yourAs : uClass.getAssociationVariables()) {
				if (yourAs.getName().equals(rUClass.getName()+"_Object")) {
					yourAs.setMultiplicity(m);
				}
			}
		    List <Token> listOfToken = afixmlLastIntilialization.get(aAss);
		    listOfToken.add(mainToken);
		    afixmlLastIntilialization.put(aAss, listOfToken);
			
		} else {
			m.setBound("1");
			AssociationEnd leftEnd = new AssociationEnd(uClass.getName()+"_Object",uClass.getName(), "",uClass.getName(), m);
			AssociationEnd rightEnd = new AssociationEnd(rUClass.getName()+"_Object",rUClass.getName(), "",rUClass.getName(), m);		
			Association aAssociation = new Association(false, true,false,false,leftEnd,rightEnd);
			aAssociation.setName(rUClass.getName()+"_Object");
			getModel().addAssociation(aAssociation);	    
			AssociationEnd myEnd = aAssociation.getEnd(0);
		    AssociationEnd yourEnd = aAssociation.getEnd(1);
		    AssociationVariable myAs = new AssociationVariable(myEnd.getRoleName(),myEnd.getClassName(),myEnd.getModifier(),null,myEnd.getMultiplicity(),aAssociation.getIsLeftNavigable());
                    myAs.setIsComposition(aAssociation.getIsLeftComposition());
		    AssociationVariable yourAs = new AssociationVariable(yourEnd.getRoleName(),yourEnd.getClassName(),yourEnd.getModifier(),null,yourEnd.getMultiplicity(),aAssociation.getIsRightNavigable());
                    yourAs.setIsComposition(aAssociation.getIsRightComposition());

		    myAs.setRelatedAssociation(yourAs);
		    boolean added = uClass.addAssociationVariable(yourAs);
		    if (added)
		    {
		      unlinkedAssociationVariables.add(yourAs);
		      uClass.addAssociation(aAssociation);
		    }
		    List <Token> listOfToken = new ArrayList<>();
		    listOfToken.add(mainToken);
		    afixmlLastIntilialization.put(aAssociation, listOfToken);
		}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void assignAssociationInitialValues(){
    String value = "";
	for (Association	aa : getModel().getAssociations()) {
		UmpleClass mainClass = getModel().getUmpleClass(aa.getEnd(0).getClassName());
		UmpleClass uClass = getModel().getUmpleClass(aa.getEnd(1).getClassName());
		if (Integer.parseInt(aa.getEnd(1).getMultiplicity().getBound()) >1) {
			for (Token rootToken : afixmlLastIntilialization.get(aa)) {
				value = "new "+uClass.getName()+"(";
				Map<String,String> db = new HashMap<String,String>();
				for (Token subToken : rootToken.getSubTokens()) {
					if (subToken.is("tagDefinition")) {
						   String attname = subToken.getSubToken(0).getValue();
						   //   String attType = "String";
						   String attValue = subToken.getSubToken(3).getValue();	
						   db.put(attname, attValue);  	
					}
				}			
				for (Attribute aAttribute : uClass.getAttributes()) {
					if (db.containsKey(aAttribute.getName())){
						String attValue = db.get(aAttribute.getName());
						   if  ( isStringInteger(attValue) && aAttribute.getType().equals("Integer")) {
							  // attType="Integer";
						   } else if (isStringDuble(attValue) && aAttribute.getType().equals("Double")) {
							   //attType = "Double";
						   } else if (aAttribute.getType().equals("String")) {
							   attValue = "\""+attValue+"\"";
						   } else {
							   attValue = "\""+attValue+"\"";
						   }
						value = value + attValue +", ";
					} else {
					   if  ( aAttribute.getType().equals("Integer") ) {
						   value = value+"0"+", ";
					   } else if (aAttribute.getType().equals("Double")) {
						   value = value+"0.0"+", ";
					   } else if (aAttribute.getType().equals("String")){
						   value = value+"\"\""+", ";
					   }
					}	
				}
				
				for (Association aAssociation : uClass.getAssociations()) {
					List<Token> aToken = afixmlLastIntilialization.get(aAssociation);
					if (aToken.size() >1) {

					} else {
						if (!hasThisObject(rootToken,aAssociation.getEnd(1).getClassName())) {
							 value = value+"null"+", ";
						} else {
							value = value+getAssociationConstructorInConstructor(aAssociation.getEnd(1).getClassName(),aToken.get(0))+", ";
						}
					}
				}
				
				value = value.subSequence(0, value.length()-2) + ")";
				String valueG = aa.getEnd(1).getRoleName()+".add("+value+");";	
				String valuep= "$this->"+aa.getEnd(1).getRoleName()+"[] = "+value+";";
				CodeBlock cb1 = new CodeBlock();
				cb1.setCode("", valueG);
				cb1.setCode("Php", valuep);
				CodeInjection injection = new CodeInjection("after","emptyConstructor",cb1,mainClass);
				mainClass.addCodeInjection(injection);
			}
		} else {
			value = "new "+uClass.getName()+"(";
			value = value+")"; //t.getSubToken(3).getValue();
			value = "set"+aa.getEnd(1).getRoleName()+"("+value+");";
			CodeInjection injection = new CodeInjection("after","emptyConstructor",value,mainClass);
			mainClass.addCodeInjection(injection);
		}

	}
   }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private String getAssociationConstructorInConstructor(String inName, Token inToken){	  
    Map<String,String> db = new HashMap<String,String>();
		String value = "new "+inName+"("; //t.getSubToken(3).getValue();	
		for (Token subToken : inToken.getSubTokens()) {
			if (subToken.getName().equals("tagDefinition")) {
				   String attname = subToken.getSubToken(0).getValue();
				   //String attType = "String";
				   String attValue = subToken.getSubToken(3).getValue();
				   db.put(attname, attValue);  	
				 }
			}  
	for (Attribute aAttribute : getModel().getUmpleClass(inName).getAttributes()) {
		if (db.containsKey(aAttribute.getName())){
			String attValue = db.get(aAttribute.getName());
			   if  ( isStringInteger(attValue) && aAttribute.getType().equals("Integer")) {
				  // attType="Integer";
			   } else if (isStringDuble(attValue) && aAttribute.getType().equals("Double")) {
				   //attType = "Double";
			   } else if (aAttribute.getType().equals("String")) {
				   attValue = "\""+attValue+"\"";
			   } else {
				   attValue = "\""+attValue+"\"";
			   }
			value = value + attValue+", ";
		} else {
		   if  ( aAttribute.getType().equals("Integer") ) {
			   value = value+"0"+", ";
		   } else if (aAttribute.getType().equals("Double")) {
			   value = value+"0.0"+", ";
		   } else if (aAttribute.getType().equals("String")){
			   value = value+"\"\""+", ";
		   }
		}
		
	}		  
	for (Association aAssociation : getModel().getUmpleClass(inName).getAssociations()) {
		List<Token> aToken = afixmlLastIntilialization.get(aAssociation);
		if (aToken.size() >1) {

		} else {
			if (!hasThisObject(inToken,aAssociation.getEnd(1).getClassName())) {
				 value = value+"null"+", ";
			} else {
				value = value+getAssociationConstructorInConstructor(aAssociation.getEnd(1).getClassName(),aToken.get(0));
			}
		}
	}
	  value = value.subSequence(0, value.length()-2) + ")";	
	  return value;
   } } 
}


mixset Filter
{
    // Fragment source file: UmpleFilterModel.ump
// Line : 15
 class Filter { Integer associationCount = -1; } 
}

mixset Constraint {
// Fragment source file: Umple_CodeConstraint.ump
// Line : 680
class ConstraintAssociation
  {
    String getName()
    {
      return association==null?null:association.getName();
    }
    /*
    * A method for conveniently getting the contained association's container class.
    */
    UmpleClassifier retrieveClassifier(){
      UmpleClass containerClass = association.getUmpleClass();
      if(containerClass==null)
      {
        UmpleTrait containerTrait = association.getUmpleTrait();
        return containerTrait;
      }
      else
      {
        return containerClass;
      }
    }
    public String getType(){ return numberOf?"associationNumberOf":index==-1?"associationList":"associationGet"; }
  }

// Fragment source file: Umple_CodeConstraint.ump
// Line : 823
 class ModelConstraint { public void addAssociationEnd(Multiplicity multiplicity)
    {
      if(getModelConstraint(numberOfModelConstraints()-1) instanceof ModelConstraintAssociation)
      {
        getModelConstraint(numberOfModelConstraints()-1).addAssociationEnd(multiplicity);
      }
    }
    public void setAssociationType(String type)
    {
      if(getModelConstraint(numberOfModelConstraints()-1) instanceof ModelConstraintAssociation)
      {
        getModelConstraint(numberOfModelConstraints()-1).setAssociationType(type);
      }
    } } 

// Fragment source file: Umple_CodeConstraint.ump
// Line : 879
class ModelConstraintAssociation
  {
    isA ModelConstraint;
    depend cruise.umple.compiler.*;
    depend cruise.umple.parser.Position;

    Multiplicity leftHandMultiplicity = new Multiplicity();
    Multiplicity rightHandMultiplicity = new Multiplicity();
    type = "--";
    boolean left = true;
    after constructor { leftHandMultiplicity.setBound("*"); }
    after constructor { rightHandMultiplicity.setBound("*"); }
    public void addAssociationEnd(Multiplicity multiplicity)
    {
      if(left)
      {
        leftHandMultiplicity = multiplicity;
      }
      else
      {
        rightHandMultiplicity = multiplicity;
      }
      left = false;
    }
    public void setAssociationType(String aType)
    {
      type = aType;
      left = false;
    }

    public ModelConstraintResult evaluate(UmpleClassifier uClassifier)
    {
      ModelConstraintResult evaluation = super.evaluate(uClassifier);
      if(!evaluation.equals(ModelConstraint.SUCCESS))
      {
        return evaluation;
      }

      if("this".equals(getSource()))
      {
        setSource(uClassifier.getName());
      }
      if(type.equals("<-"))
      {
        String temp = getSource();
        setSource(getTarget());
        setTarget(temp);
        Multiplicity tempMultiplicity = rightHandMultiplicity;
        rightHandMultiplicity = leftHandMultiplicity;
        leftHandMultiplicity = tempMultiplicity;
      }
      if(uClassifier instanceof UmpleClass)
      {
        UmpleClass uClass = null;
        uClass = ((UmpleClass)uClassifier).getSourceModel().getUmpleClass(getSource());

        if(uClass == null)
        {
          return new ModelConstraintResult(getPosition(),94,getTarget(),getSource());
        }
        for(Association association:uClass.getAssociations())
        {
          AssociationEnd theirs = null;
          AssociationEnd mine = null;
          if(association.getEnd(0).getClassName().equals(uClass.getName()))
          {
            theirs = association.getEnd(1);
            mine = association.getEnd(0);
          }
          else if(association.getEnd(1).getClassName().equals(uClass.getName()))
          {
            theirs = association.getEnd(0);
            mine = association.getEnd(1);
          }

          if(!theirs.getClassName().equals(getTarget()))
          {
            boolean isNotMyConcern = true;
            UmpleClass child = ((UmpleClass)uClassifier).getSourceModel().getUmpleClass(theirs.getClassName());

            if(child!=null)
            {
              UmpleClass parent = child.getExtendsClass();
              while(child!=null)
              {
                if(child.getName().equals(getTarget()))
                {
                  isNotMyConcern = false;
                }
                UmpleClass temp = parent;
                parent = child.getExtendsClass();
                child = temp;
              }
            }
            if(isNotMyConcern)
            {
              continue;
            }
          }

          String tBound = theirs.getMultiplicity().getBound();

          Integer rMax = 0;
          Integer rMin = 0;

          if(rightHandMultiplicity.getBound()!=null)
          {
            rMax = Integer.parseInt(rightHandMultiplicity.getBound().replace("*",""+Integer.MAX_VALUE));
            rMin = Integer.parseInt(rightHandMultiplicity.getBound().replace("*","0"));
          }
          else
          {
            rMax = Integer.parseInt(rightHandMultiplicity.getMaximum().replace("*",""+Integer.MAX_VALUE));
            rMin = Integer.parseInt(rightHandMultiplicity.getMinimum().replace("*","0"));
          }

          if("*".equals(rightHandMultiplicity.getBound()))
          {
          }
          else if(tBound==null)
          {
            Integer tMin = Integer.parseInt(theirs.getMultiplicity().getMinimum().replace("*","0"));
            Integer tMax = Integer.parseInt(theirs.getMultiplicity().getMaximum().replace("*",""+Integer.MAX_VALUE));

            if(tMax>rMax||tMin<rMin)
            {
              continue;
            }
          }
          else
          {
            Integer itBound = Integer.parseInt(tBound.replace("*","0"));
            if(itBound>rMax||itBound<rMin)
            {
              continue;
            }
          }

          tBound = mine.getMultiplicity().getBound();

          Integer lMax = 0;
          Integer lMin = 0;

          if(leftHandMultiplicity.getBound()!=null)
          {
            lMax = Integer.parseInt(leftHandMultiplicity.getBound().replace("*",""+Integer.MAX_VALUE));
            lMin = Integer.parseInt(leftHandMultiplicity.getBound().replace("*","0"));
          }
          else
          {
            lMax = Integer.parseInt(leftHandMultiplicity.getMaximum().replace("*",""+Integer.MAX_VALUE));
            lMin = Integer.parseInt(leftHandMultiplicity.getMinimum().replace("*","0"));
          }

          if("*".equals(leftHandMultiplicity.getBound()))
          {
          }
          else if(tBound==null)
          {
            Integer tMin = Integer.parseInt(mine.getMultiplicity().getMinimum().replace("*","0"));
            Integer tMax = Integer.parseInt(mine.getMultiplicity().getMaximum().replace("*",""+Integer.MAX_VALUE));

            if(tMax>lMax||tMin<lMin)
            {
              continue;
            }
          }
          else
          {
            Integer itBound = Integer.parseInt(tBound.replace("*","0"));
            if(itBound>lMax||itBound<lMin)
            {
              continue;
            }
          }
          return ModelConstraint.SUCCESS;
        }
        
        
        return new ModelConstraintResult(getPosition(),94,getTarget(),getSource());
      }
      return ModelConstraint.SUCCESS;
    }
  }
}

mixset Class
{
// Fragment source file: Umple_CodeClass.ump
// Line : 72
 class UmpleModel { 
/*
 */
  class AssociationClass
  {
    public AssociationClass(String name)
    {
      this(name, null);
    }

    public void addMissingKeyIfNeeded()
    {
      Key key = getKey();
      if (!key.isProvided())
      {
        key = new Key();

        for(Association associatedTo: getAssociatedTo())
        {
          key.addMember(associatedTo.getEnd(1).getRoleName());
        }

        key.setIsInternal(true);
        setKey(key);
      }
      }
    } 
} 
// Fragment source file: Umple_CodeClass.ump
// Line : 46
 class UmpleModel { 
     public Association getAssociation(String name)
      {
        for (Association a : associations)
        {
          if (a.getName().equals(name))
          {
            return a;
          }
        }
        return null;
      }

      public AssociationClass addAssociationClass(String className)
      {
        AssociationClass newClass = (AssociationClass) getUmpleClass(className);
        if (newClass == null)
        {
          newClass = new AssociationClass(className);
          addUmpleClass(newClass);
        }
        return newClass;
      } 
}  
}

mixset Filter
{
    // Fragment source file: Umple_Code_Filter.ump
// Line : 153
 class Filter { public boolean hasAssociation()
	  {
	    return getAssociationCount() > 0;
	  } } 

// Fragment source file: Umple_Code_Filter.ump
// Line : 207
 class UmpleModel { private void markRelatedClass(int asso)
    {
      ArrayList<String> names = new ArrayList<String>();
      for(int i = 0; i<asso; i++)
      {
        for(UmpleClass clazz : umpleClasses)
        {
          if(clazz.getFilteredin())
          {
            addRelatedClassName(clazz,names);
          }
        } 
        markClassByName(names);
        names = new ArrayList<String>();
      }
    }
    private void addRelatedClassName(UmpleClass c, ArrayList<String> names)
    {
      for(AssociationVariable a : c.getAssociationVariables())
      {
        names.add(a.getType());
      }  
    } } 


}


mixset Filter {
    // Fragment source file: UmpleInternalParser_CodeFilter.ump
// Line : 108
 class UmpleInternalParser { private void addAssociationValue(Filter f, Token t)
    {
      for(Token nt : t.getSubTokens())
      {
        if("associationNum".equals(nt.getName()))
        {
          int associationNum = Integer.parseInt(nt.getValue("associationNum"));
          f.setAssociationCount(associationNum);
        }
      }
    } } 

}
}

mixset Trait
{
    // Fragment source file: Umple_Code_Trait.ump
// Line : 127
 class UmpleTrait { 
     protected boolean immutabilityAssociationRulesSatisfied(AssociationVariable myAV, boolean myTraitImmutable){
    AssociationVariable relatedAV = myAV.getRelatedAssociation();
    UmpleTrait relatedTrait = (relatedAV == null) ? null : relatedAV.getUmpleTrait();
    boolean relatedTraitImmutable = (relatedTrait == null) ? false : ((relatedTrait == this) ? myTraitImmutable : relatedTrait.isImmutable());

    return immutabilityAssociationRulesSatisfied(myAV, this, myTraitImmutable, relatedAV, relatedTrait, relatedTraitImmutable);
  } 	

   protected static  boolean immutabilityAssociationRulesSatisfied(AssociationVariable myAV, UmpleTrait myTrait, boolean myTraitImmutable, AssociationVariable yourAV, UmpleTrait yourTrait, boolean yourTraitImmutable){
    boolean satisfied = false;
    if (myAV == null || yourAV == null)
    {
      satisfied = true;
    }
    else if (!myTraitImmutable && !yourTraitImmutable && !"immutable".equals(myAV.getModifier()) && !"immutable".equals(yourAV.getModifier()))
    {
      satisfied = true;
    } 
    else if (myAV.getIsNavigable() && yourAV.getIsNavigable())
    {
      //satisfied = false;
    }
    else if (myTrait == null && yourTrait == null)
    {
      satisfied = true;
    }
    else if (!yourAV.getIsNavigable() && (yourTrait == null || yourTraitImmutable))
    {
      if (yourTrait != null && yourTrait == myTrait && myAV.isMandatory())
      {
        // reflexive associations may not be mandatory:
        //satisfied = false
      }
      else
      {
        satisfied = true;
      }
    }
    else if (!myAV.getIsNavigable() && (myTrait == null || myTraitImmutable))
    {
      if (myTrait != null && yourTrait == myTrait && yourAV.isMandatory())
      {
        // reflexive associations may not be mandatory:
        //satisfied = false
      }
      else
      {
        satisfied = true;
      }
    }
    return satisfied;
  } } 



// Fragment source file: UmpleInternalParser_CodeTrait.ump
// Line : 536
 class UmpleInternalParser { private void analyzeinlineAssociation(Token inlineAssociationToken, UmpleTrait aTrait){
    
    Association association = analyzeAssociation(inlineAssociationToken,aTrait.getName());

    if (!getParseResult().getWasSuccess())
    {
      return;
    }

    AssociationEnd myEnd = association.getEnd(0);
    AssociationEnd yourEnd = association.getEnd(1);

    AssociationVariable myAs = new AssociationVariable(myEnd.getRoleName(),myEnd.getClassName(),myEnd.getModifier(),null,myEnd.getMultiplicity(),association.getIsLeftNavigable());
    myAs.setIsComposition(association.getIsLeftComposition());
    AssociationVariable yourAs = new AssociationVariable(yourEnd.getRoleName(),yourEnd.getClassName(),yourEnd.getModifier(),null,yourEnd.getMultiplicity(),association.getIsRightNavigable());
    yourAs.setIsComposition(association.getIsRightComposition());

    myAs.setRelatedAssociation(yourAs);
    
    if(!"".equals(myEnd.getPriority())) { myAs.setPriority(myEnd.getPriority()); }
    if(!"".equals(yourEnd.getPriority())) { yourAs.setPriority(yourEnd.getPriority()); }
    
    if (association.isImmutable())
    {
      boolean set = myAs.setImmutable();
      if (set)
      {
        yourAs.setImmutable();
      }
      else
      {
      	//TODO traits' errors
        setFailedPosition(inlineAssociationToken.getPosition(),17);
      }
    }

    // Add comments above the association to the association.
    for (Comment c : lastComments)
    {
      yourAs.addComment(c);
    }
    
    // set last association made to be yourAs. clear lastattr.
    lastassoc = yourAs;
    lastassocPosition = inlineAssociationToken.getPosition();
    lastattr = null;
    

    boolean added = aTrait.addAssociationVariable(yourAs);
    if (added)
    {
      unlinkedAssociationVariables.add(yourAs);
      aTrait.addAssociation(association);
    }
    else
    {
      if (aTrait.isImmutable()) {
      	//TODO traits' errors
      	setFailedPosition(inlineAssociationToken.getPosition(),17);
      } else {
      	//TODO traits' errors
      	setFailedPosition(inlineAssociationToken.getPosition(),13);
      }
    }
    
  }


//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start--------------------------------------
   private void analyzeSymmetricReflexiveAssociation(Token symmetricReflexiveAssociationToken, UmpleTrait aTrait){
    /*
    String myName = symmetricReflexiveAssociationToken.getValue("roleName");
    String myType = aTrait.getName();
    String myModifier = "symmetricreflexive";
    String myBound = symmetricReflexiveAssociationToken.getValue("bound");
    String myLowerBound = symmetricReflexiveAssociationToken.getValue("lowerBound");
    String myUpperBound = symmetricReflexiveAssociationToken.getValue("upperBound");
    Multiplicity myMult = new Multiplicity();
    myMult.setBound(myBound);
    myMult.setRange(myLowerBound,myUpperBound);

    AssociationVariable myAs = new AssociationVariable(myName,myType,myModifier,null,myMult,true);
    AssociationVariable yourAs = new AssociationVariable(myName,myType,myModifier,null,myMult,true);

    myAs.setRelatedAssociation(yourAs);
    aTrait.addAssociationVariable(yourAs);
    
    AssociationEnd leftEnd = new AssociationEnd(null,myType,myModifier,myType,myMult);
    AssociationEnd rightEnd = new AssociationEnd(myName,myType,myModifier,myType,myMult);
    Association assoc = new Association(false, true, false, false, leftEnd, rightEnd);
    aTrait.addAssociation(assoc);
    */
  } } 

// Fragment source file: UmpleInternalParser_CodeTrait.ump
// Line : 1002
 class UmpleInternalParser { private void ApplyTypeParametersToAssociation(AssociationVariable inAssociationVariable, GeneralTPApplied inGeneralTPApplied,UmpleClass inClass, UmpleTrait inTrait) {  
    String rawRName = "";
    String rName = "";
    boolean bidirectional = inAssociationVariable.getRelatedAssociation().getIsNavigable();
    if (inGeneralTPApplied != null || inTrait.getGeneralTemplateParameters().size()>0) {
      for (GeneralTemplateParameter gtp : inTrait.getGeneralTemplateParameters()){
        String newName = (inGeneralTPApplied!=null && inGeneralTPApplied.getParameterMapping().containsKey(gtp.getName())) ? inGeneralTPApplied.getParameterMapping().get(gtp.getName()) : gtp.getDefaultValue();
        if (inAssociationVariable.getType().equals(gtp.getName())){
              //----------------------------------------------------------------
             String tempOldName = StringFormatter.toCamelCase(gtp.getName());
             String oldName = inAssociationVariable.getMultiplicity().isMany() ? model.getGlossary().getPlural(tempOldName) : tempOldName;
              if (inAssociationVariable.getName().equals(oldName)){
                rawRName = StringFormatter.toCamelCase(newName);
                rName = inAssociationVariable.getMultiplicity().isMany() ? model.getGlossary().getPlural(rawRName) : rawRName;  
                inAssociationVariable.setName(rName);
              } else{
                rawRName = StringFormatter.toCamelCase(inAssociationVariable.getName());
                rName = inAssociationVariable.getMultiplicity().isMany() ? model.getGlossary().getPlural(rawRName) : rawRName;                      
              }
              
              inAssociationVariable.setType(newName);
              if (getModel().getUmpleClass(newName)==null){
                  if (getModel().getUmpleInterface(newName)!=null){
                      if (bidirectional){
                        setFailedPosition(inTrait.getPosition(0), 213, "trait "+inTrait.getName());
                        return;
                      }
                  } 
              }
              return;     
        }
      }
    }
    if (getModel().getUmpleClass(inAssociationVariable.getType())==null){
        if (getModel().getUmpleInterface(inAssociationVariable.getType())!=null && bidirectional){
            setFailedPosition(inTrait.getPosition(0), 213, "trait "+inTrait.getName());
            return;
        }
    }
  }
//---------------------------------end----------------------------------------
//----------------------------------------------------------------------------   
//---------------------------------Start-------------------------------------- 
  private void addAssociation(String lName, String rName, AssociationVariable inAssociationVariable, UmpleClass inClass, UmpleClass relatedClass) {	
        AssociationEnd leftEnd = new AssociationEnd(lName, inClass.getName(), inAssociationVariable.getRelatedAssociation().getModifier(), inClass.getName(), inAssociationVariable.getRelatedAssociation().getMultiplicity());
		AssociationEnd rightEnd = new AssociationEnd(rName,relatedClass.getName(), inAssociationVariable.getModifier(),relatedClass.getName(),inAssociationVariable.getMultiplicity());		
		Association aAssociation = new Association(inAssociationVariable.getRelatedAssociation().getIsNavigable(), inAssociationVariable.getIsNavigable(),false,false,leftEnd,rightEnd);
		aAssociation.setName(rName);
		getModel().addAssociation(aAssociation);	    
		AssociationEnd myEnd = aAssociation.getEnd(0);
	    AssociationEnd yourEnd = aAssociation.getEnd(1);
	    AssociationVariable myAs = new AssociationVariable(myEnd.getRoleName(),myEnd.getClassName(),myEnd.getModifier(),null,myEnd.getMultiplicity(),aAssociation.getIsLeftNavigable());
              myAs.setIsComposition(aAssociation.getIsLeftComposition());
	    AssociationVariable yourAs = new AssociationVariable(yourEnd.getRoleName(),yourEnd.getClassName(),yourEnd.getModifier(),null,yourEnd.getMultiplicity(),aAssociation.getIsRightNavigable());
	    yourAs.setIsComposition(aAssociation.getIsRightComposition());

	    myAs.setRelatedAssociation(yourAs); 
	    boolean added = inClass.addAssociationVariable(yourAs);
	    if (added)
	    {
		    relatedClass.addAssociationVariable(myAs);
		    aAssociation.setSource(Association.Source.fTrait);
	    	inClass.addAssociation(aAssociation);
	    }
} } 

// Fragment source file: UmpleInternalParser_CodeTrait.ump
// Line : 1681
 class UmpleInternalParser { private void copyAssociationsFromTraitToClass(UmpleClass inClass) {
    Map<UmpleTrait, List<AssociationVariable>> traiAssociationVariables = new HashMap<UmpleTrait, List<AssociationVariable>>();
	Map<UmpleTrait, List<AssociationVariable>> tempTraitAssociationVariables = new HashMap<UmpleTrait, List<AssociationVariable>>();
	for (UmpleTrait uTrait : inClass.getExtendsTraits()) {
		tempTraitAssociationVariables = gatherAssociations(uTrait,inClass.getGeneralTPAppliedByName(uTrait.getName()),inClass);
		if ( ! getParseResult().getWasSuccess() ) return;
		//checkMethodComeFromTraitsIsAvaiableInClass(tempTraitAssociations,inClass);
		//if (CheckMethodComeFromTraitsIsAvaialbleInOtherTraits(traitMethods,tempTraitAssociations,inClass)) return;
		AddAssociationMapToAnother(traiAssociationVariables,tempTraitAssociationVariables);
	}
	for (UmpleTrait t1 : traiAssociationVariables.keySet()) {
		for (AssociationVariable associationVariable : traiAssociationVariables.get(t1)) {
            AssociationVariable relAsso = associationVariable.getRelatedAssociation();
            String tempOldName = StringFormatter.toCamelCase(relAsso.getType());
            String oldName = relAsso.getMultiplicity().isMany() ? model.getGlossary().getPlural(tempOldName) : tempOldName;
             if (relAsso.getName().equals(oldName)){
                 String rawRName = StringFormatter.toCamelCase(inClass.getName());
                 relAsso.setName(relAsso.getMultiplicity().isMany() ? model.getGlossary().getPlural(rawRName) : rawRName);
             }
  
             if (model.getUmpleClass(associationVariable.getType())!=null){
                 addAssociation(relAsso.getName(), associationVariable.getName(), associationVariable,inClass, model.getUmpleClass(associationVariable.getType()));
                 if (associationVariable.getIsNavigable())
                   {                  
                       inClass.addReferencedPackage(model.getUmpleClass(associationVariable.getType()).getPackageName());
                   }
                   if (associationVariable.getRelatedAssociation().getIsNavigable())
                   {
                       model.getUmpleClass(associationVariable.getType()).addReferencedPackage(inClass.getPackageName());
                   }        
             } else if (model.getUmpleInterface(associationVariable.getType())!=null){
                 
                 addAssociation(relAsso.getName(), associationVariable.getName(), associationVariable,inClass, new UmpleClass(associationVariable.getType()));
                 if (associationVariable.getRelatedAssociation().getIsNavigable())
                   {
                       inClass.addReferencedPackage(model.getUmpleInterface(associationVariable.getType()).getPackageName());
                   }     
             }  		
		}
	}	
  } } 

// Fragment source file: UmpleInternalParser_CodeTrait.ump
// Line : 1756
 class UmpleInternalParser { private Map<UmpleTrait, List<AssociationVariable>> gatherAssociations(UmpleTrait inTrait, GeneralTPApplied inGTPApplied, UmpleClass inClass) {
     Map<UmpleTrait, List<AssociationVariable>> traitAssociationVariables = new HashMap<UmpleTrait, List<AssociationVariable>>(); 
 	 Map<UmpleTrait, List<AssociationVariable>> tempTraitAssociationVariables = new HashMap<UmpleTrait, List<AssociationVariable>>();
 	 //----------------------------------------------------------------------------------------
 	 List<AssociationVariable> associationVariables = new ArrayList<AssociationVariable>();	  
 	 for (AssociationVariable associationVariable : inTrait.getAssociationVariables()) {
 		 	AssociationVariable newAssociationVariable = new AssociationVariable(associationVariable);
 		 	AssociationVariable tempAssociationVariable = new AssociationVariable(associationVariable.getRelatedAssociation());
 		 	newAssociationVariable.setRelatedAssociation(tempAssociationVariable);
    	 	ApplyTypeParametersToAssociation(newAssociationVariable,inGTPApplied,inClass, inTrait);
    	 	associationVariables.add(newAssociationVariable);
	 }
 	traitAssociationVariables.put(inTrait,associationVariables);
     //----------------------------------------------------------------------------------------
     for (UmpleTrait uTrait : inTrait.getExtendsTraits()) {
       GeneralTPApplied newGTParameter = inTrait.getGeneralTPAppliedByName(uTrait.getName())!=null ? new GeneralTPApplied(inTrait.getGeneralTPAppliedByName(uTrait.getName())) : null;     
       if (newGTParameter!=null){
         ApplyTypeParametersToTypeParameters(newGTParameter, inGTPApplied,inTrait);       
    	   tempTraitAssociationVariables = gatherAssociations(uTrait,newGTParameter,inClass);   
    	 }	 
    	 if ( ! getParseResult().getWasSuccess() ) return traitAssociationVariables;
//    	 if (CheckAssociationsComeFromTraitsIsAvaialbleInOtherTraits(traitAssociations,tempTraitAssociations,inTrait)) return traitAssociations;
    	 AddAssociationMapToAnother(traitAssociationVariables,tempTraitAssociationVariables);
	 }
     return traitAssociationVariables;
} } 

// Fragment source file: UmpleInternalParser_CodeTrait.ump
// Line : 1953
 class UmpleInternalParser { 
     private void AddAssociationMapToAnother(Map<UmpleTrait, List<AssociationVariable>> inTraitAssociations,Map<UmpleTrait, List<AssociationVariable>> inTempTraitAssociations) {
    for (UmpleTrait uTrait : inTempTraitAssociations.keySet()) {
		if (inTraitAssociations.containsKey(uTrait)){
			for (AssociationVariable associationVariable : inTraitAssociations.get(uTrait)) {
				inTraitAssociations.get(uTrait).add(associationVariable);
        }
      } else{
        inTraitAssociations.put(uTrait, inTempTraitAssociations.get(uTrait));
      }	
	  }	
  } 
  } 

}
// Fine 

mixset Structure { 
  class CompositeStructureTokenAnalyzer { 
    before Label_Association_152:analyzeConstraint(Token,UmpleClassifier)
  {
		else if (invariantToken.is("associationExpr"))
		{
			rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,uClassifier));
		}
	   }  } 
} 




/*
mixset Structure { 
  class CompositeStructureTokenAnalyzer { 
    before Label_Association_154:analyzeAssociationConstraintExpression(Token,UmpleClassifier)
  {
			  else if(sub.is("associationLit"))
			  {
				rawLine.addElementAll(analyzeAssociationLiteralConstraintExpression(sub,uClassifier,card,all,true,subject,operator));
			  }
			}  } 
} 
*/


mixset Structure { 
  class CompositeStructureTokenAnalyzer { 
    before Label_Association_155:analyzeInvariantConstraint(Token)
  {
			     else if (invariantToken.is("associationExpr"))
			     {
				   rawLine.addElementAll(analyzeAssociationConstraintExpression(invariantToken,null));
			     }
			   }  } 
} 





mixset FIXML { 
  class UmpleInternalParser { 
    before Label_Association_117:analyzeFIXMLDefinition(Token)
  {
				  assignAssociationInitialValues(); // based-on-single-associations
				}  } 
} 


mixset FIXML { 
  class UmpleInternalParser { 
    before Label_addAssociation_118:analyzeFIXMLextendedContentContetnt(Token)
  {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}  } 
} 


mixset FIXML { 
  class UmpleInternalParser { 
    before Label_Association_119:analyzeFIXMLextendedContentContetnt(Token)
  {
				  addAssociation(uClass, rUClass,subToken); // based-on-single-associations
				}  } 
} 










mixset Trace { 
  class UmpleInternalParser { 
    before Label_Association_130:analyzeTraceStatement(UmpleClass,Token)
  {
    tracedAssoc = new AssociationTraceItem(traceDirective);
    }  } 
} 


mixset Trace { 
  class UmpleInternalParser { 
    before Label_Association_131:analyzeTraceStatement(UmpleClass,Token)
  {
          tracedAssoc.setConstraint(constraint);
          }  } 
} 


mixset Trace { 
  class UmpleInternalParser { 
    before Label_Association_132:analyzeTraceStatement(UmpleClass,Token)
  {
          attr = traceDirective.getUmpleClass().getAssociationVariable(token.getValue("LHS"));
          }  } 
} 





mixset Trace { 
  class UmpleInternalParser { 
    before Label_Association_134:anaylzeTraceWildCard(Token)
  {
    //------------- trace all associations [wildcard]
    if( traceToken.getValue("traceEntity").toLowerCase().equals("allassociations") )
    {
      for( AssociationVariable assoc : uClass.getAssociationVariables() )
      {
      	tracedAssoc.setPosition(traceToken.getPosition());
      	tracedAssoc.addAssociationVariable(assoc);
      	tracedAssoc.setTraceAdd(true);
      	tracedAssoc.setTraceRemove(true);
      }
    }
    }  } 
} 


mixset Trace { 
  class UmpleInternalParser { 
    before Label_Association_135:traceItemType(Token)
  {  
    attr = attr==null?aClass.getAssociationVariable(traceToken.getValue("traceEntity")):attr;
    }  } 
} 




mixset Trace
 { 
  class UmpleInternalParser { 
    before Label_Association_137:traceItemType(Token)
  {
    // --- check if association
    for( AssociationVariable aVar : aClass.getAssociationVariables() )
    {
      if( traceToken.getValue("traceEntity").equals(aVar.getName()))
      {
        traceItemType = 3;
      }
    }

    for( Association a : aClass.getAssociations() )
    {
      if( a.getName().contains(traceToken.getValue("traceEntity") ))
      {
        traceItemType = 3;
      }
    }
    }  } 
} 


mixset Layout { 
  class UmpleInternalParser { 
    before Label_Association_138:analyzeLayoutToken(Token,UmpleClassifier,int)
  {
      else if (token.is("associationPosition"))
      {
        String name = token.getValue("name");
        Association assoc = model.getAssociation(name);

        if (assoc != null)
        {
          assoc.setName(name);
          for(Token position : token.getSubTokens())
          {
            if (position.is("coordinate"))
            {
              assoc.addPosition(new Coordinate(position.getIntValue("x"),position.getIntValue("y"),0,0));
            }
          }
        }
      }
    }  } 
} 


mixset Layout { 
  class UmpleInternalParser { 
    before Label_Association_139:layoutNewElements
  {
      // Layout associations
      for (int i=0; i<model.numberOfAssociations(); i++)
      {
        Association a = model.getAssociation(i);
        
        if (associationIsBetweenClassAndInterface (a)){continue;}
        if (associationIsBetweenClassAndTrait (a)){continue;}
        
        int numberOfPositions = a.numberOfPositions();

        if (numberOfPositions < 2)
        {
          Coordinate[] defaults = model.getDefaultAssociationPosition(a);
      if (defaults==null) continue;
          a.addPosition(defaults[0]);
          a.addPosition(defaults[1]);
          a.getPosition(0).setStatus(Coordinate.Status.Defaulted);
          a.getPosition(1).setStatus(Coordinate.Status.Defaulted);
        }
      }
    }  } 
} 


mixset Filter { 
  class UmpleInternalParser { 
    before Label_Association_140:analyzeFilterToken(Token,int)
  {
            if(t.is("association"))
	        {
	          addAssociationValue(f,t);
          	}
          }  } 
} 
 
mixset Mixset { 
  class UmpleInternalParser { 
    before Label_Association_147:getMixsetFragmentWithEnclosingElement(Token,String)
  {
      else if (token.is("associationDefinition"))
      {
        tokenKey = "name"; 
        prefix ="association";
      }
    }  } 
} 


mixset Trait { 
  class UmpleInternalParser { 
    before Label_Association_112:applyTraits
  {
            if (getParseResult().getWasSuccess()) copyAssociationsFromTraitToClass(uClass);
          }  } 
} 



mixset Association { 
  class ModelConstraintAssociation { 
    before Label_Association_32:evaluate(UmpleClassifier)
  {
        for(Association association:uClass.getAssociations())
        {
          AssociationEnd theirs = null;
          AssociationEnd mine = null;
          if(association.getEnd(0).getClassName().equals(uClass.getName()))
          {
            theirs = association.getEnd(1);
            mine = association.getEnd(0);
          }
          else if(association.getEnd(1).getClassName().equals(uClass.getName()))
          {
            theirs = association.getEnd(0);
            mine = association.getEnd(1);
          }

          if(!theirs.getClassName().equals(getTarget()))
          {
            boolean isNotMyConcern = true;
            UmpleClass child = ((UmpleClass)uClassifier).getSourceModel().getUmpleClass(theirs.getClassName());

            if(child!=null)
            {
              UmpleClass parent = child.getExtendsClass();
              while(child!=null)
              {
                if(child.getName().equals(getTarget()))
                {
                  isNotMyConcern = false;
                }
                UmpleClass temp = parent;
                parent = child.getExtendsClass();
                child = temp;
              }
            }
            if(isNotMyConcern)
            {
              continue;
            }
          }

          String tBound = theirs.getMultiplicity().getBound();

          Integer rMax = 0;
          Integer rMin = 0;

          if(rightHandMultiplicity.getBound()!=null)
          {
            rMax = Integer.parseInt(rightHandMultiplicity.getBound().replace("*",""+Integer.MAX_VALUE));
            rMin = Integer.parseInt(rightHandMultiplicity.getBound().replace("*","0"));
          }
          else
          {
            rMax = Integer.parseInt(rightHandMultiplicity.getMaximum().replace("*",""+Integer.MAX_VALUE));
            rMin = Integer.parseInt(rightHandMultiplicity.getMinimum().replace("*","0"));
          }

          if("*".equals(rightHandMultiplicity.getBound()))
          {
          }
          else if(tBound==null)
          {
            Integer tMin = Integer.parseInt(theirs.getMultiplicity().getMinimum().replace("*","0"));
            Integer tMax = Integer.parseInt(theirs.getMultiplicity().getMaximum().replace("*",""+Integer.MAX_VALUE));

            if(tMax>rMax||tMin<rMin)
            {
              continue;
            }
          }
          else
          {
            Integer itBound = Integer.parseInt(tBound.replace("*","0"));
            if(itBound>rMax||itBound<rMin)
            {
              continue;
            }
          }

          tBound = mine.getMultiplicity().getBound();

          Integer lMax = 0;
          Integer lMin = 0;

          if(leftHandMultiplicity.getBound()!=null)
          {
            lMax = Integer.parseInt(leftHandMultiplicity.getBound().replace("*",""+Integer.MAX_VALUE));
            lMin = Integer.parseInt(leftHandMultiplicity.getBound().replace("*","0"));
          }
          else
          {
            lMax = Integer.parseInt(leftHandMultiplicity.getMaximum().replace("*",""+Integer.MAX_VALUE));
            lMin = Integer.parseInt(leftHandMultiplicity.getMinimum().replace("*","0"));
          }

          if("*".equals(leftHandMultiplicity.getBound()))
          {
          }
          else if(tBound==null)
          {
            Integer tMin = Integer.parseInt(mine.getMultiplicity().getMinimum().replace("*","0"));
            Integer tMax = Integer.parseInt(mine.getMultiplicity().getMaximum().replace("*",""+Integer.MAX_VALUE));

            if(tMax>lMax||tMin<lMin)
            {
              continue;
            }
          }
          else
          {
            Integer itBound = Integer.parseInt(tBound.replace("*","0"));
            if(itBound>lMax||itBound<lMin)
            {
              continue;
            }
          }
          return ModelConstraint.SUCCESS;
        }
        }  } 
} 


mixset Trace { 
  class AttributeTraceItem { 
    before Label_Association_33:trace(CodeTranslator,Object,String,UmpleClass,String...)
  {
				  else if(o instanceof AssociationVariable)
				  {
					name = gen.translate("associationMany",(AssociationVariable)o);
				  }
				}  } 
} 



mixset Trace { 
  class AssociationTraceItem { 
    before Label_Association_35:trace(CodeTranslator,Object,String,UmpleClass,String...)
  {
		for(AssociationVariable ass: uClass.getAssociationVariables())
		{
			if(ass.equals(o))
			{
				String type = ((AssociationVariable)o).getType();
				String name = "";
				String extra = "";
				String obj = "";
				String accessor = gen.translate("traceAccessor",this);
				String concatinator = gen.translate("traceConcatinator",this);
				String comma = concatinator+"\",\""+concatinator;
				String tracerName = Character.toUpperCase(getTracerType().charAt(0)) + getTracerType().substring(1);
				String messageLayout = "{0}"+comma+"{1}"+concatinator+"\",{2},{3},{4},\""+concatinator+"{5}"+concatinator+"\",{6},{7},\"";
				  if(o instanceof AssociationVariable)
				  {
					name = gen.translate("associationMany",(AssociationVariable)o);
			  	  }
				

				//         if(type==null||"".equals(type)||"Boolean".equals(type)||"boolean".equals(type)||"String".equals(type)||"int".equals(type)||"Integer".equals(type)||"float".equals(type)||"Float".equals(type)||"double".equals(type)||"Double".equals(type)||"Time".equals(type)||"Date".equals(type))
				//         {
				//           obj = name;
				//         }
				//         else
				//         {
				//           obj = name+"(\"+"+StringFormatter.format(gen.translate("traceIdentifier",this),name)+"+\")";
				//           name += gen.translate("traceFormatNonPrimitive",this);
				//         }

				for(String str: args){
					extra+=concatinator+str;
				}
				if(getTraceDirective().getTraceRecord()!=null)
				{
					for(Attribute record:getTraceDirective().getTraceRecord().getAttributes())
					{
						extra+=comma+gen.translate("attribute"+(record.getIsList()?"Many":"One"),record);
					}
					if(getTraceDirective().getTraceRecord().numberOfRecord()>0)
					{
						extra+= concatinator+"\"";
						for(String record:getTraceDirective().getTraceRecord().getRecord())
						{
							extra+=","+record.replace("\"","");
						}
						extra+= "\"";
					}
				}
				String message = messageLayout+extra;
				message = StringFormatter.format(
						message,gen.translate("traceTimestamp",this),
						gen.translate("traceThread",this),
						getPosition().getFilename().replace("\\","\\\\"),
						getPosition().getLineNumber(),
						uClass.getName()+"+"+type,
						StringFormatter.format(gen.translate("traceIdentifier",this),gen.translate("traceSelf",this)),
						methodname,
						name        
						);

				message = TraceItemUtil.prepareTraceMessage(getTraceDirective(),gen,this,message);

				message = StringFormatter.format(getExtremities(gen, name),message);
				message = GeneratorHelper.doIndent(message,gen.translate("traceIndent",this));
				if(getTraceDirective().getPostfix().getExecuteClause()!=null)
				{
					String execute = getTraceDirective().getPostfix().getExecuteClause();
					execute = GeneratorHelper.doIndent(execute,gen.translate("traceIndent",this));
					message += "\n" + execute;
				}
				return message;
			}
		}
		}  } 
} 

 


mixset Trait { 
  class UmpleInternalParser { 
    before Label_Association_107:analyzeTraitToken(Token,UmpleTrait,int)
  {
      else if (token.is("inlineAssociation"))
      {
        analyzeinlineAssociation(token,aTrait);
      }
      else if (token.is("symmetricReflexiveAssociation"))
      {
        analyzeSymmetricReflexiveAssociation(token,aTrait);
      }
    }  } 
} 




mixset Filter { 
  class UmpleModel { 
    before Label_Association_24:markIncludedClasses(Filter)
  {
          if(f.hasAssociation())
          {
            markRelatedClass(f.getAssociationCount());
          }
        }  } 
} 


mixset Filter { 
  class UmpleModel { 
    before Label_Association_25:filterOutClasses
  {
            // Chop out it and its associations
            for(Association a : clazz.getAssociations())
            {      
            clazz.removeAssociation(a); // Remove from this end
            
            // Find the other end(s) and remove references too
            for (AssociationEnd ae : a.getEnds())
            {
                String endClassName = ae.getClassName();
                if(!endClassName.equals(clazz.getName()))
                {
                UmpleClass otherClass = getUmpleClass(endClassName);
                if(otherClass != null) {
                    otherClass.removeAssociation(a);
                }
                }
            }
            
            removeAssociation(a); // from model
            a.delete();
            }
            Object[] avs = clazz.getAssociationVariables().toArray();
            for(Object avo:  avs)
            {
            AssociationVariable av = (AssociationVariable)avo;
            AssociationVariable otherAv = av.getRelatedAssociation();
            if(otherAv != null) {
                otherAv.delete();
            }
            av.delete();
            }
            removeUmpleClass(clazz);
            clazz.delete();

          }  } 
} 


mixset Constraint { 
  class ConstraintOperator { 
    before Label_Association_26:correctForCardinality(ConstraintVariable)
  {
      else if((variable instanceof ConstraintAssociation)&&value.contains("cardinality"))
      {
        ((ConstraintAssociation)variable).setNumberOf(true);
      }
    }  } 
} 





mixset Trait { 
  class UmpleTrait { 
    before Label_Association_28:propagateImmutabilityToAllRelationships(boolean)
  {
          for (AssociationVariable av : associationVariables)
          {
            if (!immutabilityAssociationRulesSatisfied(av, true)) { return false; }
          }
        }  } 
} 





mixset Trace { 
  class AssociationVariable { 
    before Label_Association_31:getTraced(String,UmpleClass)
  {
				for(AssociationTraceItem ast: td.getAssociationTraceItems())
				{
					if(( (method.equals("associationAdd")||method.equals("associationRemove")) && ast.getTraceCardinality()))
					{
						for(AssociationVariable variable: ast.getAssociationVariables())
						{
							if(variable.getName().equals(this.getName()))
								traceItems.add(ast);
						}

					}
					if((method.equals("associationAdd") && ast.getTraceAdd()))
					{
						for(AssociationVariable variable: ast.getAssociationVariables())
						{
							if(variable.getName().equals(this.getName()))
								traceItems.add(ast);
						}
					}
					if((method.equals("associationRemove") && ast.getTraceRemove()))
					{
						for(AssociationVariable variable: ast.getAssociationVariables())
						{
							if(variable.getName().equals(this.getName()))
								traceItems.add(ast);
						}
					}
				}
			}  } 
} 


