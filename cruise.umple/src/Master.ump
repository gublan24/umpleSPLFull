generate Java "../src-gen-umple";

strictness allow 1006; // Don't worry about extra code that is not pure Umple
strictness allow 1007;
strictness allow 1008;
strictness allow 46; // For now don't worry about special attribute types
strictness allow 36; // don't worry about multiplicity of directed associations
strictness allow 170; // allow custom constructors
strictness allow 31; // dont worry about namespaces


use Documenter.ump;
use Generator.ump;
use Json.ump;
use Parser.ump;

mixset Mixset{
  use mixset/Mixset.ump;
}
mixset FeatureModel {
  use feature/FeatureModel.ump;
}

mixset Constraint {
  use constraint/Umple_CodeConstraint.ump;
}
mixset StateMachine {
  use stateMachine/Umple_Code_StateMachine.ump;
}
mixset StateMachine {
  use stateMachine/StateMachine.ump;
  use Structure_StateMachine;
  use generators/GeneratorHelper_CodeStateMachine.ump;
  use stateMachine/UmpleInternalParser_CodeTraceStateMachine.ump;

}
mixset Filter{
  use filter/Umple_Code_Filter.ump;
  use filter/Filter_refactored.ump;
}
mixset Trait {
  use trait/Umple_Code_Trait.ump;
}
// 
mixset Class {
  use class/UmpleInternalParser_CodeClass.ump;
  use class/Class_refactored.ump;
  // below can be moved to their mixsets:
  use class/Umple_CodeAssociation.ump;
  use class/Umple_CodeAttribute.ump;
  use class/Umple_CodeClass.ump;
  use class/Umple_CodeMethod.ump;
  use class/Umple_CodeCoordinate.ump; 
  use class/Association_refactored.ump;
}
mixset Trait{
  use trait/UmpleInternalParser_CodeTrait.ump;
  use trait/Trait_refactored.ump;
}
mixset Constraint {
  use constraint/UmpleInternalParser_CodeConstraints.ump;
  use constraint/Constraint_refactored.ump;
}
mixset Structure {
  use strcture/UmpleInternalParser_CodeStructure.ump;
  use Template_Strcture;
  use strcture/Structure_refactored.ump;
}
mixset Template {
  use template/UmpleInternalParser_CodeTemplate.ump;
  mixset Structure {
    use Template_Strcture;
  }
}
mixset StateMachine {
  use stateMachine/UmpleInternalParser_CodeStateMachine.ump;
  use stateMachine/StateMachine_refactored.ump;
}
mixset StateMachine {
  mixset Trait {
    use stateMachine/UmpleInternalParser_CodeTrait_StateMachine.ump;
  }
}
mixset Trace {
  use trace/UmpleInternalParser_CodeTrace.ump;
  use generators/GeneratorHelper_CodeTrace.ump;
  use trace/Trace_refactored.ump;
}
mixset Layout {
  use layout/UmpleInternalParser_CodeLayout.ump;
  use layout/Layout_refactored.ump;
}
mixset Filter {
  use filter/UmpleInternalParser_CodeFilter.ump;
}

mixset Mixset{
  use mixset/UmpleInternalParser_CodeMixset.ump;
  use mixset/Mixset_refactored.ump;
}
mixset FeatureModel {
  use UmpleInternalParser_CodeRequireStatement.ump;
  use feature/Feature_refactored.ump;
}

mixset AspectInjection {
  use class/UmpleInternalPraser_CodeInjection.ump;
  use class/Aspect_refactored.ump;
}

mixset FIXML {
  // Fragment source file: UmpleInternalParser_CodeTrait.ump
  // Line : 2057
  use fixml/UmpleInternalParser_FIXML.ump;
  use fixml/Fixml_refactored.ump;
  
  
}

use Umlet.ump;
use Umple.ump;

mixset Trace {
  use trace/Trace.ump;
}
mixset Structure {
  use strcture/Structure.ump;
  use Structure_StateMachine;
}
mixset Template {
  use template/Template.ump;
}
use UmpleDiagram.ump;
use UmpleExceptions.ump;
use util/UmpleHelper.ump;
use UmpleParser.ump;
use UmpleAnalysis.ump;
use UmpleInternalParser.ump;
use UmpleXtextParser.ump;
use UmpleSync.ump;
use Violet.ump;
use UmpleImport.ump;
//use Plugin.ump;

use Main_Code.ump;
use UmpleStats_Code.ump;
use util/Util_Code.ump;
use util/Ant.ump;
use Builder_Code.ump;
use GraphWalking.ump;
//
use StateMachine ;
use Trace ;
use Template ;
use FeatureModel ;
use Structure;
use Template_Strcture ;
use Structure_StateMachine;
use Trait ;
use Mixset;
use Association ;
use Layout ;
use Template ;
use FIXML ;
use Constraint ;
use Filter;


use CodeGenerator ;
use UmpleGenerator ;
use RubyGenerator ;
use JavaGenerator ;
use RTCppGenerator ;
use PhpGenerator ;
use Uigu2Generator ;
use SqlGenerator ;
use UmpleSelfGenerator ;
use USEGenerator ;
use EcoreGenerator ;
use TestGenerator ;
use PapyrusGenerator;
use XmiGenerator;
use TextUmlGenerator;
use ScxmlGenerator;
use GvStateDiagramGenerator ;
use StateTableGenerator;
use EventSequenceGenerator;
use SimpleMetricsGenerator;
use CodeGvClassDiagramGenerator;
use CodeGvClassTraitDiagramGenerator;
use FeatureDiagramCo;
use EntityRelationshipCon;
use AlloyGenerator;
use NuSMVGenerators;
use SimulateGenerator;
use YumlGenerator;
use XtextGenerator;
use JsonGenerator;
use JsonMixedGenerator;
use StructureDiagramGenerator;
use SuperCodeGeneratorGenerator;
use SuperGvGeneratorGenerator;
use HtmlGenerator;
use UmpleModelWalkerGenerator;
use CodeAnalysisGenerator;
use UmpleAnnotaiveToCompositionGenerator ;

use AspectInjection;

use Method ; // Interaction between Method and Attribute
use Class ;
use Attribute ;
use RubyGeneratorIntuse ;
use FeatureDiagramGenerator;
use NuSMVGenerator;
use NuSMVOptimizerGenerator;
use StateDiagramGenerator ;
use EntityRelationshipGenerator;

//
use SuperCodeGeneratorGenerator;
// All code above belongs to the base generator file (Generator.ump)

//Below mixsets use statments. All mentioned mixsets are activited.
use CodeGenerator, UmpleGenerator, RubyGenerator , JavaGenerator , RTCppGenerator, PhpGenerator; 
use Uigu2Generator , SqlGenerator , UmpleSelfGenerator , USEGenerator , EcoreGenerator ,TestGenerator ; 
use PapyrusGenerator, XmiGenerator, TextUmlGenerator, ScxmlGenerator, CodeGvClassTraitDiagramGenerator
use EventSequenceGenerator,  FeatureDiagramCo,  EntityRelationshipCon,  SimulateGenerator,  YumlGenerator;
use XtextGenerator,  JsonGenerator,  JsonMixedGenerator,  StructureDiagramGenerator , GvStateDiagramGenerator;
use StateTableGenerator, SuperGvGeneratorGenerator, HtmlGenerator, UmpleModelWalkerGenerator,  CodeAnalysisGenerator;
use AlloyGenerator,  NuSMVGenerators, NuSMVGenerator,   NuSMVOptimizerGenerator,  SimpleMetricsGenerator, CodeGvClassDiagramGenerator;
use UmpleAnnotaiveToCompositionGenerator; 

// Below mixsets declarations. They contain inclusion of their files.
mixset CodeGenerator { use generators/Generator_Code.ump; }
mixset UmpleGenerator { use generators/Generator_CodeUmple.ump; }
mixset RubyGenerator { 
  use generators/Generator_CodeRuby.ump; 
  mixset Mixset 
  {
    use RubyGeneratorIntMixset;
  }
  }
mixset JavaGenerator { use generators/Generator_CodeJava.ump; }
mixset RTCppGenerator { use generators/Generator_CodeRTCpp.ump; }
mixset PhpGenerator { use generators/Generator_CodePhp.ump; }
mixset Uigu2Generator { use generators/Generator_CodeUigu2.ump; }
mixset SqlGenerator { use generators/Generator_CodeSql.ump; }
mixset UmpleSelfGenerator { use generators/Generator_CodeUmpleSelf.ump; }
mixset USEGenerator { use generators/Generator_CodeUSE.ump; }
mixset EcoreGenerator { use generators/ecoreGenerator/ecoreGeneratorConfig.ump; }
mixset TestGenerator { use generators/Generator_CodeTest.ump; }
mixset PapyrusGenerator{ use generators/papyrus/Generator_CodePapyrus.ump; }
mixset XmiGenerator{ use generators/xmi/Generator_CodeXmi.ump; }
mixset TextUmlGenerator{ use generators/Generator_CodeTextUml.ump; }
mixset ScxmlGenerator{ use generators/Generator_CodeScxml.ump; }
mixset GvStateDiagramGenerator {  use generators/statemachineDiagramGenerator/stateMachineDiagramConfig.ump;}
mixset StateTableGenerator{ use generators/Generator_CodeStateTables.ump; }
mixset EventSequenceGenerator{ use generators/Generator_CodeEventSequence.ump; }
mixset SimpleMetricsGenerator{ use generators/Generator_CodeSimpleMetrics.ump; }
mixset CodeGvClassDiagramGenerator{ use generators/Generator_CodeGvClassDiagram.ump;}
mixset CodeGvClassTraitDiagramGenerator{ use generators/Generator_CodeGvClassTraitDiagram.ump; }
mixset FeatureDiagramCo{ use generators/featureDiagramGenerator/FeatureDiagramConfig.ump; }
mixset EntityRelationshipCon{ use generators/entityRelationshipDiagramGenerator/entityRelationshipConfig.ump;
}
mixset AlloyGenerator{ use generators/alloy/Generator_CodeAlloy.ump; }
mixset NuSMVGenerators{ use generators/NuSMV/nusmvGeneratorConfig.ump; }
mixset SimulateGenerator{ use generators/Generator_CodeSimulate.ump; }
mixset YumlGenerator{ use generators/Generator_CodeYuml.ump; }
mixset XtextGenerator{ use generators/Generator_CodeXtext.ump; }
mixset JsonGenerator{ use generators/Generator_CodeJson.ump; }
mixset JsonMixedGenerator{ use generators/Generator_CodeJsonMixed.ump; }
mixset StructureDiagramGenerator{ use generators/Generator_CodeStructureDiagram.ump; }
mixset SuperCodeGeneratorGenerator{ use generators/Generator_SuperCodeGenerator.ump;}
mixset SuperGvGeneratorGenerator{ use generators/Generator_SuperGvGenerator.ump; }
mixset HtmlGenerator{ use generators/Generator_Html.ump;}
mixset UmpleModelWalkerGenerator{ use generators/Generator_UmpleModelWalker.ump;}
mixset CodeAnalysisGenerator{ use generators/Generator_CodeAnalysis.ump;}
mixset UmpleAnnotaiveToCompositionGenerator { use generators/Generator_CodeAnnotaiveToComposition.ump; }
//End
